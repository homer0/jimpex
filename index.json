[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/app/index.js",
    "content": "const Jimple = require('jimple');\nconst ObjectUtils = require('wootils/shared/objectUtils');\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst compression = require('compression');\nconst multer = require('multer');\n\nconst {\n  appConfiguration,\n  appLogger,\n  environmentUtils,\n  packageInfo,\n  pathUtils,\n  rootRequire,\n} = require('wootils/node/providers');\nconst { EventsHub } = require('wootils/shared');\n\nconst { eventNames } = require('../constants');\nconst commonServices = require('../services/common');\nconst httpServices = require('../services/http');\nconst utilsServices = require('../services/utils');\nconst { escapeForRegExp } = require('../utils/functions');\n/**\n * Jimpex is a mix of Jimple, a Javascript port of Pimple dependency injection container, and\n * Express, one of the most popular web frameworks for Node.\n * @extends {Jimple}\n * @interface\n * @todo Implement `helmet`\n */\nclass Jimpex extends Jimple {\n  /**\n   * Class constructor.\n   * @param {Boolean}        [boot=true]  If `true`, after initializing the server, it will\n   *                                      immediately call the `boot` method. This can be used on\n   *                                      a development environment where you would want to\n   *                                      register development services/middlewares/controllers\n   *                                      before the app starts.\n   * @param {JimpexOptions}  [options={}] Preferences to customize the app.\n   * @throws {TypeError} If instantiated directly.\n   */\n  constructor(boot = true, options = {}) {\n    if (new.target === Jimpex) {\n      throw new TypeError(\n        'Jimpex is an abstract class, it can\\'t be instantiated directly'\n      );\n    }\n\n    super();\n    /**\n     * The app options.\n     * @type {JimpexOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = ObjectUtils.merge({\n      version: '0.0.0',\n      filesizeLimit: '15MB',\n      configuration: {\n        default: null,\n        name: 'app',\n        path: 'config/',\n        hasFolder: true,\n        environmentVariable: 'CONFIG',\n        loadFromEnvironment: true,\n        loadVersionFromConfiguration: true,\n        filenameFormat: '[app-name].[configuration-name].config.js',\n      },\n      statics: {\n        enabled: true,\n        onHome: false,\n        route: 'statics',\n        folder: '',\n      },\n      express: {\n        trustProxy: true,\n        disableXPoweredBy: true,\n        compression: true,\n        bodyParser: true,\n        multer: true,\n      },\n      defaultServices: {\n        common: true,\n        http: true,\n        utils: true,\n      },\n    }, options);\n    /**\n     * The Express app Jimpex uses under the hood.\n     * @type {Express}\n     * @access protected\n     * @ignore\n     */\n    this._express = express();\n    /**\n     * When the app starts, this will be running instance.\n     * @type {?Object}\n     * @access protected\n     * @ignore\n     */\n    this._instance = null;\n    /**\n     * A list of functions that return controllers and middlewares. When the app starts, the\n     * queue will be processed and those controllers and middlewares added to the app.\n     * The reason they are not added directly like with a regular Express implementation is that\n     * services on Jimple use lazy loading, and adding middlewares and controllers as they come\n     * could cause errors if they depend on services that are not yet registered.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._mountQueue = [];\n    /**\n     * A list of all the top routes controlled by the app. Every time a controller is mounted,\n     * its route will be added here.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._controlledRoutes = [];\n\n    this._setupCoreServices();\n    this._setupExpress();\n    this._setupDefaultServices();\n    this._setupConfiguration();\n\n    if (boot) {\n      this.boot();\n    }\n  }\n  /**\n   * The app options.\n   * @type {JimpexOptions}\n   */\n  get options() {\n    return ObjectUtils.copy(this._options);\n  }\n  /**\n   * The Express app Jimpex uses under the hood.\n   * @type {Express}\n   */\n  get express() {\n    return this._express;\n  }\n  /**\n   * The server instance that gets created when the app is started.\n   * @return {?Object}\n   */\n  get instance() {\n    return this._instance;\n  }\n  /**\n   * A list of all the top routes controlled by the app.\n   * @type {Array}\n   */\n  get routes() {\n    return ObjectUtils.copy(this._controlledRoutes);\n  }\n  /**\n   * This is where the app would register all its specific services, middlewares and controllers.\n   * @throws {Error} if not overwritten.\n   * @abstract\n   */\n  boot() {\n    throw new Error('This method must be overwritten');\n  }\n  /**\n   * Tries to access a service on the container, but if is not present, it won't throw an error, it\n   * will just return `null`.\n   * @param {string} name The name of the service.\n   * @return {*}\n   */\n  try(name) {\n    let result;\n    try {\n      result = this.get(name);\n    } catch (error) {\n      /**\n       * Validate if the received error is from Jimple not being able to find the service, or from\n       * something else; if it's not about the module not being registered, throw the error.\n       */\n      const expression = new RegExp(escapeForRegExp(`identifier \"${name}\" is not defined`), 'i');\n      if (error.message && error.message.match(expression)) {\n        result = null;\n      } else {\n        throw error;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Mounts a controller on a specific route.\n   * @param {string}                       route      The route for the controller.\n   * @param {Controller|ControllerCreator} controller The route controller.\n   */\n  mount(route, controller) {\n    this._mountQueue.push((server) => {\n      let result;\n      const routes = this._reduceWithEvent(\n        'controllerWillBeMounted',\n        controller.connect(this, route),\n        route,\n        controller\n      );\n      if (Array.isArray(routes)) {\n        // If the returned value is a list of routes, mount each single route.\n        result = routes.forEach((routeRouter) => server.use(route, routeRouter));\n      } else {\n        // But if the returned value is not a list, it may be a router, so mount it directly.\n        result = server.use(route, routes);\n      }\n\n      this._controlledRoutes.push(route);\n      this._emitEvent('routeAdded', route);\n      return result;\n    });\n  }\n  /**\n   * Adds a middleware.\n   * @param {Middleware|MiddlewareCreator|ExpressMiddleware} middleware The middleware to use.\n   */\n  use(middleware) {\n    this._mountQueue.push((server) => {\n      if (typeof middleware.connect === 'function') {\n        // If the middleware is from Jimpex, connect it and then use it.\n        const middlewareHandler = middleware.connect(this);\n        if (middlewareHandler) {\n          server.use(this._reduceWithEvent(\n            'middlewareWillBeUsed',\n            middlewareHandler,\n            middleware\n          ));\n        }\n      } else {\n        // But if the middleware is a regular middleware, just use it directly.\n        server.use(this._reduceWithEvent(\n          'middlewareWillBeUsed',\n          middleware,\n          null\n        ));\n      }\n    });\n  }\n  /**\n   * Starts the app server.\n   * @param {function(config:AppConfiguration)} [fn] A callback function to be called when the\n   *                                                 server starts.\n   * @return {Object} The server instance\n   */\n  start(fn = () => {}) {\n    const config = this.get('appConfiguration');\n    const port = config.get('port');\n    this._emitEvent('beforeStart');\n    this._instance = this._express.listen(port, () => {\n      this._emitEvent('start');\n      this._mountResources();\n      this.get('appLogger').success(`Starting on port ${port}`);\n      this._emitEvent('afterStart');\n      const result = fn(config);\n      this._emitEvent('afterStartCallback');\n      return result;\n    });\n\n    return this._instance;\n  }\n  /**\n   * This is an alias of `start`. The idea is for it to be used on serverless platforms, where you\n   * don't get to start your app, you just have export it.\n   * @param {number}                            port The port where the app will run. In case the\n   *                                                 rest of the app needs to be aware of the port,\n   *                                                 this method will overwrite the `port` setting\n   *                                                 on the configuration.\n   * @param {function(config:AppConfiguration)} [fn] A callback function to be called when the\n   *                                                 server starts.\n   * @return {Object} The server instance\n   */\n  listen(port, fn = () => {}) {\n    const config = this.get('appConfiguration');\n    config.set('port', port);\n    return this.start(fn, port);\n  }\n  /**\n   * Disables the server TLS validation.\n   */\n  disableTLSValidation() {\n    // eslint-disable-next-line no-process-env\n    process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n    this.get('appLogger').warning('TLS validation has been disabled');\n  }\n  /**\n   * Stops the server instance.\n   */\n  stop() {\n    if (this._instance) {\n      this._emitEvent('beforeStop');\n      this._instance.close();\n      this._instance = null;\n      this._emitEvent('afterStop');\n    }\n  }\n  /**\n   * Registers the _'core services'_.\n   * @ignore\n   * @access protected\n   */\n  _setupCoreServices() {\n    // The logger service.\n    this.register(appLogger);\n    // The service that reads the environment variables.\n    this.register(environmentUtils);\n    // The app `package.json` information.\n    this.register(packageInfo);\n    // The service to build paths relative to the project root directory.\n    this.register(pathUtils);\n    // The service to make `require`s relatives to the project root directory.\n    this.register(rootRequire);\n  }\n  /**\n   * Creates and configure the Express instance.\n   * @ignore\n   * @access protected\n   */\n  _setupExpress() {\n    const {\n      statics,\n      filesizeLimit,\n      express: expressOptions,\n    } = this._options;\n    if (expressOptions.trustProxy) {\n      this._express.enable('trust proxy');\n    }\n\n    if (expressOptions.disableXPoweredBy) {\n      this._express.disable('x-powered-by');\n    }\n\n    if (expressOptions.compression) {\n      this._express.use(compression());\n    }\n\n    if (statics.enabled) {\n      this._addStaticsFolder(\n        statics.route,\n        statics.folder,\n        statics.onHome\n      );\n    }\n\n    if (expressOptions.bodyParser) {\n      this._express.use(bodyParser.json({\n        limit: filesizeLimit,\n      }));\n      this._express.use(bodyParser.urlencoded({\n        extended: true,\n        limit: filesizeLimit,\n      }));\n    }\n\n    if (expressOptions.multer) {\n      this._express.use(multer().any());\n    }\n\n    this.set('router', this.factory(() => express.Router()));\n  }\n  /**\n   * Helper method to add static folders to the app.\n   * @param {string}  route          The route for the static folder.\n   * @param {string}  [folder='']    The path to the folder. If not defined, it will use the\n   *                                 value from `route`.\n   * @param {Boolean} [onHome=false] If `true`, the path to the folder will be relative to where\n   *                                 the app is being executed (`process.cwd()`), otherwise, it\n   *                                 will be relative to where the executable file is located.\n   * @access protected\n   * @ignore\n   */\n  _addStaticsFolder(route, folder = '', onHome = false) {\n    const joinFrom = onHome ? 'home' : 'app';\n    const staticRoute = route.replace(/^\\/+/, '');\n    const staticFolder = this.get('pathUtils').joinFrom(\n      joinFrom,\n      folder || staticRoute\n    );\n    this._express.use(`/${staticRoute}`, express.static(staticFolder));\n  }\n  /**\n   * Based on the constructor received options, register or not the default services.\n   * @ignore\n   * @access protected\n   */\n  _setupDefaultServices() {\n    const { defaultServices } = this._options;\n\n    if (defaultServices.common) {\n      this.register(commonServices);\n    }\n\n    if (defaultServices.http) {\n      this.register(httpServices);\n    }\n\n    if (defaultServices.utils) {\n      this.register(utilsServices);\n    }\n\n    this.set('events', () => new EventsHub());\n  }\n  /**\n   * Creates the configuration service.\n   * @ignore\n   * @access protected\n   */\n  _setupConfiguration() {\n    const { version, configuration: options } = this._options;\n    const {\n      name,\n      environmentVariable,\n      loadVersionFromConfiguration,\n    } = options;\n    let configsPath = options.path;\n    if (options.hasFolder) {\n      configsPath += `${options.name}/`;\n    }\n    const filenameFormat = options.filenameFormat\n    .replace(/\\[app-name\\]/ig, name)\n    .replace(/\\[configuration-name\\]/ig, '[name]');\n\n    let defaultConfig = {};\n    if (options.default) {\n      defaultConfig = options.default;\n    } else {\n      const defaultConfigPath = `${configsPath}${options.name}.config.js`;\n      defaultConfig = this.get('rootRequire')(defaultConfigPath);\n    }\n\n    if (!loadVersionFromConfiguration) {\n      defaultConfig = Object.assign({ version }, defaultConfig);\n    }\n\n    this.register(appConfiguration(\n      name,\n      defaultConfig,\n      {\n        environmentVariable,\n        path: configsPath,\n        filenameFormat,\n      }\n    ));\n\n    if (options.loadFromEnvironment) {\n      this.get('appConfiguration').loadFromEnvironment();\n    }\n\n    if (loadVersionFromConfiguration) {\n      this._options.version = this.get('appConfiguration').get('version');\n    }\n  }\n  /**\n   * Processes and mount all the resources on the `mountQueue`.\n   * @ignore\n   * @access protected\n   */\n  _mountResources() {\n    this._mountQueue.forEach((mountFn) => mountFn(this._express));\n    this._mountQueue.length = 0;\n  }\n  /**\n   * Emits an app event with a reference to this class instance.\n   * @param {string} name The name of the event on {@link JimpexEvents}.\n   * @param {...*}   args   Extra parameters for the listeners.\n   * @access protected\n   */\n  _emitEvent(name, ...args) {\n    this.get('events').emit(eventNames[name], ...[...args, this]);\n  }\n  /**\n   * Sends a target object to a list of reducer events so they can modify or replace it. This\n   * method also sends a reference to this class instance as the last parameter of the event.\n   * @param {string} name   The name of the event on {@link JimpexEvents}.\n   * @param {*}      target The targe object to reduce.\n   * @param {...*}   args   Extra parameters for the listeners.\n   * @return {*} An object of the same type as the `target`.\n   * @access protected\n   */\n  _reduceWithEvent(name, target, ...args) {\n    return this.get('events').reduce(eventNames[name], target, ...[...args, this]);\n  }\n}\n\nmodule.exports = Jimpex;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/app/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Jimpex",
    "memberof": "src/app/index.js",
    "static": true,
    "longname": "src/app/index.js~Jimpex",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/app/index.js",
    "importStyle": "Jimpex",
    "description": "Jimpex is a mix of Jimple, a Javascript port of Pimple dependency injection container, and\nExpress, one of the most popular web frameworks for Node.",
    "lineNumber": 30,
    "todo": [
      "Implement `helmet`"
    ],
    "interface": true,
    "extends": [
      "Jimple"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "boot",
        "description": "If `true`, after initializing the server, it will\n                                     immediately call the `boot` method. This can be used on\n                                     a development environment where you would want to\n                                     register development services/middlewares/controllers\n                                     before the app starts."
      },
      {
        "nullable": null,
        "types": [
          "JimpexOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Preferences to customize the app."
      }
    ],
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "If instantiated directly."
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "_options",
    "memberof": "src/app/index.js~Jimpex",
    "static": false,
    "longname": "src/app/index.js~Jimpex#_options",
    "access": "protected",
    "description": "The app options.",
    "lineNumber": 55,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "JimpexOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "_express",
    "memberof": "src/app/index.js~Jimpex",
    "static": false,
    "longname": "src/app/index.js~Jimpex#_express",
    "access": "protected",
    "description": "The Express app Jimpex uses under the hood.",
    "lineNumber": 93,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Express"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_instance",
    "memberof": "src/app/index.js~Jimpex",
    "static": false,
    "longname": "src/app/index.js~Jimpex#_instance",
    "access": "protected",
    "description": "When the app starts, this will be running instance.",
    "lineNumber": 100,
    "ignore": true,
    "type": {
      "nullable": true,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_mountQueue",
    "memberof": "src/app/index.js~Jimpex",
    "static": false,
    "longname": "src/app/index.js~Jimpex#_mountQueue",
    "access": "protected",
    "description": "A list of functions that return controllers and middlewares. When the app starts, the\nqueue will be processed and those controllers and middlewares added to the app.\nThe reason they are not added directly like with a regular Express implementation is that\nservices on Jimple use lazy loading, and adding middlewares and controllers as they come\ncould cause errors if they depend on services that are not yet registered.",
    "lineNumber": 111,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_controlledRoutes",
    "memberof": "src/app/index.js~Jimpex",
    "static": false,
    "longname": "src/app/index.js~Jimpex#_controlledRoutes",
    "access": "protected",
    "description": "A list of all the top routes controlled by the app. Every time a controller is mounted,\nits route will be added here.",
    "lineNumber": 119,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "get",
    "name": "options",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#options",
    "access": "public",
    "description": "The app options.",
    "lineNumber": 134,
    "type": {
      "nullable": null,
      "types": [
        "JimpexOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "get",
    "name": "express",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#express",
    "access": "public",
    "description": "The Express app Jimpex uses under the hood.",
    "lineNumber": 141,
    "type": {
      "nullable": null,
      "types": [
        "Express"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "get",
    "name": "instance",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#instance",
    "access": "public",
    "description": "The server instance that gets created when the app is started.",
    "lineNumber": 148,
    "return": {
      "nullable": true,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "get",
    "name": "routes",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#routes",
    "access": "public",
    "description": "A list of all the top routes controlled by the app.",
    "lineNumber": 155,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "boot",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#boot",
    "access": "public",
    "description": "This is where the app would register all its specific services, middlewares and controllers.",
    "lineNumber": 163,
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if not overwritten."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "try",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#try",
    "access": "public",
    "description": "Tries to access a service on the container, but if is not present, it won't throw an error, it\nwill just return `null`.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the service."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "mount",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#mount",
    "access": "public",
    "description": "Mounts a controller on a specific route.",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The route for the controller."
      },
      {
        "nullable": null,
        "types": [
          "Controller",
          "ControllerCreator"
        ],
        "spread": false,
        "optional": false,
        "name": "controller",
        "description": "The route controller."
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "use",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#use",
    "access": "public",
    "description": "Adds a middleware.",
    "lineNumber": 222,
    "params": [
      {
        "nullable": null,
        "types": [
          "Middleware",
          "MiddlewareCreator",
          "ExpressMiddleware"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware",
        "description": "The middleware to use."
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "start",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#start",
    "access": "public",
    "description": "Starts the app server.",
    "lineNumber": 250,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(config:AppConfiguration)"
        ],
        "spread": false,
        "optional": true,
        "name": "fn",
        "description": "A callback function to be called when the\n                                                server starts."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The server instance"
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "listen",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#listen",
    "access": "public",
    "description": "This is an alias of `start`. The idea is for it to be used on serverless platforms, where you\ndon't get to start your app, you just have export it.",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "port",
        "description": "The port where the app will run. In case the\n                                                rest of the app needs to be aware of the port,\n                                                this method will overwrite the `port` setting\n                                                on the configuration."
      },
      {
        "nullable": null,
        "types": [
          "function(config:AppConfiguration)"
        ],
        "spread": false,
        "optional": true,
        "name": "fn",
        "description": "A callback function to be called when the\n                                                server starts."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The server instance"
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "disableTLSValidation",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#disableTLSValidation",
    "access": "public",
    "description": "Disables the server TLS validation.",
    "lineNumber": 285,
    "params": [],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "stop",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#stop",
    "access": "public",
    "description": "Stops the server instance.",
    "lineNumber": 293,
    "params": [],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "_setupCoreServices",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#_setupCoreServices",
    "access": "protected",
    "description": "Registers the _'core services'_.",
    "lineNumber": 306,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "_setupExpress",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#_setupExpress",
    "access": "protected",
    "description": "Creates and configure the Express instance.",
    "lineNumber": 323,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "_addStaticsFolder",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#_addStaticsFolder",
    "access": "protected",
    "description": "Helper method to add static folders to the app.",
    "lineNumber": 376,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The route for the static folder."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "folder",
        "description": "The path to the folder. If not defined, it will use the\n                                value from `route`."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "onHome",
        "description": "If `true`, the path to the folder will be relative to where\n                                the app is being executed (`process.cwd()`), otherwise, it\n                                will be relative to where the executable file is located."
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "_setupDefaultServices",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#_setupDefaultServices",
    "access": "protected",
    "description": "Based on the constructor received options, register or not the default services.",
    "lineNumber": 390,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "_setupConfiguration",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#_setupConfiguration",
    "access": "protected",
    "description": "Creates the configuration service.",
    "lineNumber": 412,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "_mountResources",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#_mountResources",
    "access": "protected",
    "description": "Processes and mount all the resources on the `mountQueue`.",
    "lineNumber": 462,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_emitEvent",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#_emitEvent",
    "access": "protected",
    "description": "Emits an app event with a reference to this class instance.",
    "lineNumber": 472,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the event on {@link JimpexEvents}."
      },
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "Extra parameters for the listeners."
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "_reduceWithEvent",
    "memberof": "src/app/index.js~Jimpex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Jimpex#_reduceWithEvent",
    "access": "protected",
    "description": "Sends a target object to a list of reducer events so they can modify or replace it. This\nmethod also sends a reference to this class instance as the last parameter of the event.",
    "lineNumber": 484,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the event on {@link JimpexEvents}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The targe object to reduce."
      },
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "Extra parameters for the listeners."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "An object of the same type as the `target`."
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/app/typedef.js",
    "content": "/**\n * @external {Jimple} https://yarnpkg.com/en/package/jimple\n */\n\n/**\n * @typedef {Object} JimpexConfigurationOptions\n * @property {Object}  [default=null]                      The app default configuration.\n * @property {string}  [name='app']                        The name of the app, used for the\n *                                                         configuration files.\n * @property {string}  [path='config/']                    The path to the configuration files\n *                                                         directory, relative to the project root\n *                                                         directory.\n * @property {boolean} [hasFolder=true]                    Whether the configurations are inside a\n *                                                         sub directory or not. If `true`, a\n *                                                         configuration path would be\n *                                                         `config/[app-name]/[file]`.\n * @property {string}  [environmentVariable='CONFIG']      The name of the environment variable\n *                                                         that will be used to set the active\n *                                                         configuration.\n * @property {boolean} [loadFromEnvironment=true]          Whether or not to check for the\n *                                                         environment variable and load a\n *                                                         configuration based on its value.\n * @property {boolean} [loadVersionFromConfiguration=true] If `true`, the app `version` will be\n *                                                         taken from the loaded configuration,\n *                                                         otherwise, when a configuration is\n *                                                         loaded, the app will copy the version it\n *                                                         has into the configuration.\n * @property {string} [filenameFormat='[app-name].[configuration-name].config.js'] The name format\n *                                                                                 the configuration\n *                                                                                 files have.\n */\n\n/**\n * @typedef {Object} JimpexStaticsOptions\n * @property {boolean} [enabled=true]    Whether or not to include the middleware for static files.\n * @property {boolean} [onHome=false]    If `true`, the path to the statics folder will be relative\n *                                       to the project root directory, otherwise, it will be\n *                                       relative to the directory where the app executable file is\n *                                       located.\n * @property {string}  [route='static']  The name of both the route and the folder, relative to\n *                                       whatever you defined with the `onHome` option.\n * @property {string}  [folder='']       By default, the folder will be the same as the `route`,\n *                                       but you can use this option to define a relative path that\n *                                       won't affect the route.\n */\n\n/**\n * @typedef {Object} JimpexExpressOptions\n * @property {boolean} [trustProxy=true]        Whether or not to enable the `trust proxy` option.\n * @property {boolean} [disableXPoweredBy=true] Whether or not to remove the `x-powered-by` header.\n * @property {boolean} [compression=true]       Whether or not to add the `compression` middleware.\n * @property {boolean} [bodyParser=true]        Whether or not to add the `body-parser` middleware.\n * @property {boolean} [multer=true]            Whether or not to add the `multer` middleware.\n */\n\n/**\n * @typedef {Object} JimpexDefaultServicesOptions\n * @property {boolean} [common=true] Whether or not to register all the `common` service providers.\n * @property {boolean} [http=true]   Whether or not to register all the `http` service providers.\n * @property {boolean} [utils=true]  Whether or not to register all the `utils` service providers.\n */\n\n/**\n * @typedef {Object} JimpexOptions\n * @property {string}                       [version='0.0.0']      The app version. To be used on\n *                                                                 the configuration.\n * @property {JimpexConfigurationOptions}   [configuration]        The options for the app\n *                                                                 configuration service.\n * @property {JimpexStaticsOptions}         [statics]              The options for the app static\n *                                                                 `middleware`.\n * @property {string}                       [filesizeLimit='15MB'] The size limit for the requests\n *                                                                 payload.\n * @property {JimpexExpressOptions}         [express]              The options for the Express app.\n * @property {JimpexDefaultServicesOptions} [defaultServices]      To tell the app which services\n *                                                                 should be registered when\n *                                                                 instantiated.\n */\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/app/typedef.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "external",
    "name": "Jimple",
    "externalLink": "https://yarnpkg.com/en/package/jimple",
    "memberof": "src/app/typedef.js",
    "static": true,
    "longname": "src/app/typedef.js~Jimple",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 80,
    "kind": "typedef",
    "name": "JimpexConfigurationOptions",
    "memberof": "src/app/typedef.js",
    "static": true,
    "longname": "src/app/typedef.js~JimpexConfigurationOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "default",
        "description": "The app default configuration."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'app'",
        "defaultRaw": "'app'",
        "name": "name",
        "description": "The name of the app, used for the\n                                                        configuration files."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'config/'",
        "defaultRaw": "'config/'",
        "name": "path",
        "description": "The path to the configuration files\n                                                        directory, relative to the project root\n                                                        directory."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "hasFolder",
        "description": "Whether the configurations are inside a\n                                                        sub directory or not. If `true`, a\n                                                        configuration path would be\n                                                        `config/[app-name]/[file]`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'CONFIG'",
        "defaultRaw": "'CONFIG'",
        "name": "environmentVariable",
        "description": "The name of the environment variable\n                                                        that will be used to set the active\n                                                        configuration."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "loadFromEnvironment",
        "description": "Whether or not to check for the\n                                                        environment variable and load a\n                                                        configuration based on its value."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "loadVersionFromConfiguration",
        "description": "If `true`, the app `version` will be\n                                                        taken from the loaded configuration,\n                                                        otherwise, when a configuration is\n                                                        loaded, the app will copy the version it\n                                                        has into the configuration."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'[app-name].[configuration-name].config.js'",
        "defaultRaw": "'[app-name].[configuration-name].config.js'",
        "name": "filenameFormat",
        "description": "The name format\n                                                                                the configuration\n                                                                                files have."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JimpexConfigurationOptions"
    }
  },
  {
    "__docId__": 81,
    "kind": "typedef",
    "name": "JimpexStaticsOptions",
    "memberof": "src/app/typedef.js",
    "static": true,
    "longname": "src/app/typedef.js~JimpexStaticsOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "enabled",
        "description": "Whether or not to include the middleware for static files."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "onHome",
        "description": "If `true`, the path to the statics folder will be relative\n                                      to the project root directory, otherwise, it will be\n                                      relative to the directory where the app executable file is\n                                      located."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'static'",
        "defaultRaw": "'static'",
        "name": "route",
        "description": "The name of both the route and the folder, relative to\n                                      whatever you defined with the `onHome` option."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "folder",
        "description": "By default, the folder will be the same as the `route`,\n                                      but you can use this option to define a relative path that\n                                      won't affect the route."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JimpexStaticsOptions"
    }
  },
  {
    "__docId__": 82,
    "kind": "typedef",
    "name": "JimpexExpressOptions",
    "memberof": "src/app/typedef.js",
    "static": true,
    "longname": "src/app/typedef.js~JimpexExpressOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "trustProxy",
        "description": "Whether or not to enable the `trust proxy` option."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "disableXPoweredBy",
        "description": "Whether or not to remove the `x-powered-by` header."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "compression",
        "description": "Whether or not to add the `compression` middleware."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "bodyParser",
        "description": "Whether or not to add the `body-parser` middleware."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "multer",
        "description": "Whether or not to add the `multer` middleware."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JimpexExpressOptions"
    }
  },
  {
    "__docId__": 83,
    "kind": "typedef",
    "name": "JimpexDefaultServicesOptions",
    "memberof": "src/app/typedef.js",
    "static": true,
    "longname": "src/app/typedef.js~JimpexDefaultServicesOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "common",
        "description": "Whether or not to register all the `common` service providers."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "http",
        "description": "Whether or not to register all the `http` service providers."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "utils",
        "description": "Whether or not to register all the `utils` service providers."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JimpexDefaultServicesOptions"
    }
  },
  {
    "__docId__": 84,
    "kind": "typedef",
    "name": "JimpexOptions",
    "memberof": "src/app/typedef.js",
    "static": true,
    "longname": "src/app/typedef.js~JimpexOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'0.0.0'",
        "defaultRaw": "'0.0.0'",
        "name": "version",
        "description": "The app version. To be used on\n                                                                the configuration."
      },
      {
        "nullable": null,
        "types": [
          "JimpexConfigurationOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "configuration",
        "description": "The options for the app\n                                                                configuration service."
      },
      {
        "nullable": null,
        "types": [
          "JimpexStaticsOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "statics",
        "description": "The options for the app static\n                                                                `middleware`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'15MB'",
        "defaultRaw": "'15MB'",
        "name": "filesizeLimit",
        "description": "The size limit for the requests\n                                                                payload."
      },
      {
        "nullable": null,
        "types": [
          "JimpexExpressOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "express",
        "description": "The options for the Express app."
      },
      {
        "nullable": null,
        "types": [
          "JimpexDefaultServicesOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "defaultServices",
        "description": "To tell the app which services\n                                                                should be registered when\n                                                                instantiated."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JimpexOptions"
    }
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/constants/eventNames.js",
    "content": "/**\n * @typedef {Object} JimpexEvents\n * @description The name of all the events {@link Jimpex} can trigger.\n * @property {string} beforeStart              Called before `listen` is executed on the Express\n *                                             app.\n * @property {string} start                    Called from the `listen` callback, when the app is\n *                                             ready to be used.\n * @property {string} afterStart               Called from the `listen` callback, when all\n *                                             controllers and middlewares have been mounted.\n * @property {string} afterStartCallback       Called right after the callback sent to `start`\n *                                             gets executed.\n * @property {string} beforeStop               Called before closing the instance of the app.\n * @property {string} afterStop                called after the app instance has been closed and\n *                                             deleted.\n * @property {string} routeAdded               Called every time a new route is added to the app.\n * @property {string} controllerWillBeMounted  This is for a reducer event. It gets called before\n *                                             mounting a router or a set of routes to the app in\n *                                             order to \"reduce it\".\n * @property {string} middlewareWillBeUsed     This is for a reducer event. it gets called before\n *                                             using a middleware in order to \"reduce it\".\n */\n\n/**\n * The name of all the events {@link Jimpex} can trigger.\n * @type {JimpexEvents}\n */\nconst eventNames = {\n  beforeStart: 'before-start',\n  start: 'start',\n  afterStart: 'after-start',\n  afterStartCallback: 'after-start-callback',\n  beforeStop: 'before-stop',\n  afterStop: 'after-stop',\n  controllerWillBeMounted: 'controller-will-be-mounted',\n  routeAdded: 'route-added',\n  middlewareWillBeUsed: 'middleware-will-be-used',\n};\n\nmodule.exports = eventNames;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/constants/eventNames.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "typedef",
    "name": "JimpexEvents",
    "memberof": "src/constants/eventNames.js",
    "static": true,
    "longname": "src/constants/eventNames.js~JimpexEvents",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "The name of all the events {@link Jimpex} can trigger."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "beforeStart",
        "description": "Called before `listen` is executed on the Express\n                                            app."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Called from the `listen` callback, when the app is\n                                            ready to be used."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "afterStart",
        "description": "Called from the `listen` callback, when all\n                                            controllers and middlewares have been mounted."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "afterStartCallback",
        "description": "Called right after the callback sent to `start`\n                                            gets executed."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "beforeStop",
        "description": "Called before closing the instance of the app."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "afterStop",
        "description": "called after the app instance has been closed and\n                                            deleted."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "routeAdded",
        "description": "Called every time a new route is added to the app."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "controllerWillBeMounted",
        "description": "This is for a reducer event. It gets called before\n                                            mounting a router or a set of routes to the app in\n                                            order to \"reduce it\"."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "middlewareWillBeUsed",
        "description": "This is for a reducer event. it gets called before\n                                            using a middleware in order to \"reduce it\"."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "JimpexEvents"
    }
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "eventNames",
    "memberof": "src/constants/eventNames.js",
    "static": true,
    "longname": "src/constants/eventNames.js~eventNames",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/constants/eventNames.js",
    "importStyle": "eventNames",
    "description": "The name of all the events {@link Jimpex} can trigger.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "JimpexEvents"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/constants/index.js",
    "content": "const eventNames = require('./eventNames');\n/**\n * A dictionary with all the constants the app needs.\n * @type {Object}\n * @property {JimpexEvents} eventNames The name of all the events {@link Jimpex} can trigger.\n * @ignore\n */\nconst constants = {\n  eventNames,\n};\n\nmodule.exports = constants;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/constants/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "constants",
    "memberof": "src/constants/index.js",
    "static": true,
    "longname": "src/constants/index.js~constants",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/constants/index.js",
    "importStyle": "constants",
    "description": "A dictionary with all the constants the app needs.",
    "lineNumber": 8,
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "JimpexEvents"
        ],
        "spread": false,
        "optional": false,
        "name": "eventNames",
        "description": "The name of all the events {@link Jimpex} can trigger."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/controllers/common/configuration.js",
    "content": "const { controller } = require('../../utils/wrappers');\n/**\n * Provides the handlers and middlwares to show and switch configurations.\n */\nclass ConfigurationController {\n  /**\n   * Class constructor.\n   * @param {AppConfiguration} appConfiguration To read the app configuration.\n   * @param {ResponsesBuilder} responsesBuilder To generate the JSON responses.\n   */\n  constructor(appConfiguration, responsesBuilder) {\n    /**\n     * A local reference for the `appConfiguration` service.\n     * @type {AppConfiguration}\n     * @access protected\n     * @ignore\n     */\n    this._appConfiguration = appConfiguration;\n    /**\n     * A local reference for the `responsesBuilder` service.\n     * @type {ResponsesBuilder}\n     * @access protected\n     * @ignore\n     */\n    this._responsesBuilder = responsesBuilder;\n  }\n  /**\n   * Send a response with the current app configuration as a body.\n   * @param {ExpressResponse} res The server response.\n   */\n  getConfigurationResponse(res) {\n    const name = this._appConfiguration.get('name');\n    const data = Object.assign({ name }, this._appConfiguration.getConfig());\n    return this._responsesBuilder.json(res, data);\n  }\n  /**\n   * Returns the middleware to show the current configuration.\n   * @return {ExpressMiddleware}\n   */\n  showConfiguration() {\n    return (req, res) => {\n      this.getConfigurationResponse(res);\n    };\n  }\n  /**\n   * Returns the middleware to switch the current configuration.\n   * @return {ExpressMiddleware}\n   */\n  switchConfiguration() {\n    return (req, res, next) => {\n      if (this._appConfiguration.canSwitch()) {\n        try {\n          this._appConfiguration.switch(req.params.name);\n          this.getConfigurationResponse(res);\n        } catch (error) {\n          next(error);\n        }\n      } else {\n        next();\n      }\n    };\n  }\n}\n/**\n * This controller is kind of special as it will only mount the routes if the\n * `debug.configurationController` setting of the app configuration is `true`.\n * It provides routes for:\n * - Showing the current configuration.\n * - Switching the configuration, but only if the service allows it.\n * @type {Controller}\n */\nconst configurationController = controller((app) => {\n  const routes = [];\n  const appConfiguration = app.get('appConfiguration');\n  if (appConfiguration.get('debug.configurationController') === true) {\n    const router = app.get('router');\n    const ctrl = new ConfigurationController(\n      appConfiguration,\n      app.get('responsesBuilder')\n    );\n    routes.push(...[\n      router.get('/', ctrl.showConfiguration()),\n      router.get('/switch/:name', ctrl.switchConfiguration()),\n    ]);\n  }\n\n  return routes;\n});\n\nmodule.exports = {\n  ConfigurationController,\n  configurationController,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/controllers/common/configuration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "ConfigurationController",
    "memberof": "src/controllers/common/configuration.js",
    "static": true,
    "longname": "src/controllers/common/configuration.js~ConfigurationController",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/controllers/common/configuration.js",
    "importStyle": "{ConfigurationController}",
    "description": "Provides the handlers and middlwares to show and switch configurations.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/controllers/common/configuration.js~ConfigurationController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/configuration.js~ConfigurationController#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "AppConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "appConfiguration",
        "description": "To read the app configuration."
      },
      {
        "nullable": null,
        "types": [
          "ResponsesBuilder"
        ],
        "spread": false,
        "optional": false,
        "name": "responsesBuilder",
        "description": "To generate the JSON responses."
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "_appConfiguration",
    "memberof": "src/controllers/common/configuration.js~ConfigurationController",
    "static": false,
    "longname": "src/controllers/common/configuration.js~ConfigurationController#_appConfiguration",
    "access": "protected",
    "description": "A local reference for the `appConfiguration` service.",
    "lineNumber": 18,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "AppConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "_responsesBuilder",
    "memberof": "src/controllers/common/configuration.js~ConfigurationController",
    "static": false,
    "longname": "src/controllers/common/configuration.js~ConfigurationController#_responsesBuilder",
    "access": "protected",
    "description": "A local reference for the `responsesBuilder` service.",
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ResponsesBuilder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "getConfigurationResponse",
    "memberof": "src/controllers/common/configuration.js~ConfigurationController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/configuration.js~ConfigurationController#getConfigurationResponse",
    "access": "public",
    "description": "Send a response with the current app configuration as a body.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "showConfiguration",
    "memberof": "src/controllers/common/configuration.js~ConfigurationController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/configuration.js~ConfigurationController#showConfiguration",
    "access": "public",
    "description": "Returns the middleware to show the current configuration.",
    "lineNumber": 40,
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "switchConfiguration",
    "memberof": "src/controllers/common/configuration.js~ConfigurationController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/configuration.js~ConfigurationController#switchConfiguration",
    "access": "public",
    "description": "Returns the middleware to switch the current configuration.",
    "lineNumber": 49,
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "configurationController",
    "memberof": "src/controllers/common/configuration.js",
    "static": true,
    "longname": "src/controllers/common/configuration.js~configurationController",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/controllers/common/configuration.js",
    "importStyle": "{configurationController}",
    "description": "This controller is kind of special as it will only mount the routes if the\n`debug.configurationController` setting of the app configuration is `true`.\nIt provides routes for:\n- Showing the current configuration.\n- Switching the configuration, but only if the service allows it.",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "Controller"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/controllers/common/health.js",
    "content": "const statuses = require('statuses');\nconst { controller } = require('../../utils/wrappers');\n/**\n * Provides the handler to show a some minimal health information about the app:\n * - app version.\n * - configuration name.\n */\nclass HealthController {\n  /**\n   * Class constructor.\n   * @param {AppConfiguration} appConfiguration To read the app version and the configuration name.\n   * @param {ResponsesBuilder} responsesBuilder To generate the JSON response.\n   */\n  constructor(appConfiguration, responsesBuilder) {\n    /**\n     * A local reference for the `appConfiguration` service.\n     * @type {AppConfiguration}\n     * @access protected\n     * @ignore\n     */\n    this._appConfiguration = appConfiguration;\n    /**\n     * A local reference for the `responsesBuilder` service.\n     * @type {ResponsesBuilder}\n     * @access protected\n     * @ignore\n     */\n    this._responsesBuilder = responsesBuilder;\n  }\n  /**\n   * Returns the middleware that shows the health information.\n   * @return {ExpressMiddleware}\n   */\n  health() {\n    return (req, res) => {\n      const {\n        name: configuration,\n        version,\n      } = this._appConfiguration.get(['name', 'version']);\n      this._responsesBuilder.json(res, {\n        isHealthy: true,\n        status: statuses.ok,\n        configuration,\n        version,\n      });\n    };\n  }\n}\n/**\n * Mounts the health route.\n * @type {Controller}\n */\nconst healthController = controller((app) => {\n  const router = app.get('router');\n  const ctrl = new HealthController(\n    app.get('appConfiguration'),\n    app.get('responsesBuilder')\n  );\n\n  return [\n    router.get('/', ctrl.health()),\n  ];\n});\n\nmodule.exports = {\n  HealthController,\n  healthController,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/controllers/common/health.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "HealthController",
    "memberof": "src/controllers/common/health.js",
    "static": true,
    "longname": "src/controllers/common/health.js~HealthController",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/controllers/common/health.js",
    "importStyle": "{HealthController}",
    "description": "Provides the handler to show a some minimal health information about the app:\n- app version.\n- configuration name.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/controllers/common/health.js~HealthController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/health.js~HealthController#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "AppConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "appConfiguration",
        "description": "To read the app version and the configuration name."
      },
      {
        "nullable": null,
        "types": [
          "ResponsesBuilder"
        ],
        "spread": false,
        "optional": false,
        "name": "responsesBuilder",
        "description": "To generate the JSON response."
      }
    ]
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "_appConfiguration",
    "memberof": "src/controllers/common/health.js~HealthController",
    "static": false,
    "longname": "src/controllers/common/health.js~HealthController#_appConfiguration",
    "access": "protected",
    "description": "A local reference for the `appConfiguration` service.",
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "AppConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "_responsesBuilder",
    "memberof": "src/controllers/common/health.js~HealthController",
    "static": false,
    "longname": "src/controllers/common/health.js~HealthController#_responsesBuilder",
    "access": "protected",
    "description": "A local reference for the `responsesBuilder` service.",
    "lineNumber": 28,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ResponsesBuilder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "health",
    "memberof": "src/controllers/common/health.js~HealthController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/health.js~HealthController#health",
    "access": "public",
    "description": "Returns the middleware that shows the health information.",
    "lineNumber": 34,
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "healthController",
    "memberof": "src/controllers/common/health.js",
    "static": true,
    "longname": "src/controllers/common/health.js~healthController",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/controllers/common/health.js",
    "importStyle": "{healthController}",
    "description": "Mounts the health route.",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "Controller"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "src/controllers/common/index.js",
    "content": "const { configurationController } = require('./configuration');\nconst { healthController } = require('./health');\nconst { staticsController } = require('./statics');\n\nmodule.exports = {\n  configurationController,\n  healthController,\n  staticsController,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/controllers/common/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/controllers/common/statics.js",
    "content": "const path = require('path');\nconst ObjectUtils = require('wootils/shared/objectUtils');\nconst mime = require('mime');\nconst { controllerCreator } = require('../../utils/wrappers');\nconst { removeSlashes } = require('../../utils/functions');\n\n/**\n * @typdef {Object} StaticsControllerFile\n * @description If you wan to customize how, to, and from where files are served, instead of just\n *              sending a list of strings, you can use an object with these properties.\n * @property {string} route   The route the controller will use for the file.\n * @property {string} path    The path for the file, relative to the root of the app.\n * @property {Object} headers A dictionary of custom headers to send on the file response.\n */\n\n/**\n * @typedef {Object} StaticsControllerPathsOptions\n * @description They are like \"master paths\" that get prepended to all the file paths and routes\n *              the controller use.\n * @property {string} route  A custom route to prefix all the file routes.\n * @property {string} source A custom path to prefix all the file paths.\n */\n\n/**\n * @typdef {Object} StaticsControllerOptions\n * @description These are the options that allow you to customize the controller, how, to and from\n *              where the files are served.\n * @property {Array}                         files   A list of filenames or\n *                                                   {@link StaticsControllerFile} definitions.\n * @property {Object}                        methods A dictionary of all the HTTP methods the\n *                                                   controller will use in order to serve the\n *                                                   files. If `all` is set to true, all the other\n *                                                   flags will be ignored.\n * @property {StaticsControllerPathsOptions} paths   The \"master paths\" the controller uses to\n *                                                   prefix all file routes and paths.\n */\n\n/**\n * This controller allows you to serve specific files from any folder to any route without the\n * need of mounting directories as \"static\".\n */\nclass StaticsController {\n  /**\n   * @param {SendFile}                 sendFile To send the responses for the files.\n   * @param {StaticsControllerOptions} options  The options to customize the controller.\n   */\n  constructor(sendFile, options = {}) {\n    /**\n     * A local reference for the `sendFile` service.\n     * @type {SendFile}\n     * @access protected\n     * @ignore\n     */\n    this._sendFile = sendFile;\n    /**\n     * The controller configuration options.\n     * @type {StaticsControllerOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = this._normalizeOptions(ObjectUtils.merge(\n      {\n        files: options.files || ['favicon.ico', 'index.html'],\n        methods: {\n          all: false,\n          get: true,\n        },\n        paths: {\n          route: '',\n          source: './',\n        },\n      },\n      options\n    ));\n    /**\n     * A dictionary of all the formatted files ({@link StaticsControllerFile}). It uses the files\n     * routes as keys.\n     * @access protected\n     * @ignore\n     */\n    this._files = this._createFiles();\n  }\n  /**\n   * Defines all the needed routes to serve the files.\n   * @param {ExpressRouter} router           To generate the routes.\n   * @param {Array}         [middlewares=[]] A list of custom middlewares that will be added\n   *                                         before the one that serves a file.\n   * @return {ExpressRouter}\n   */\n  addRoutes(router, middlewares = []) {\n    const { methods } = this._options;\n    const use = methods.all ?\n      ['all'] :\n      Object.keys(methods).reduce((acc, name) => (methods[name] ? [...acc, name] : acc), []);\n\n    Object.keys(this._files).forEach((route) => {\n      const file = this._files[route];\n      const fileMiddleware = this._getMiddleware(file);\n      use.forEach((method) => this._addRoute(\n        router,\n        method,\n        file,\n        fileMiddleware,\n        middlewares\n      ));\n    });\n\n    return router;\n  }\n  /**\n   * The controller configuration options.\n   * @type {StaticsControllerOptions}\n   */\n  get options() {\n    return Object.freeze(this._options);\n  }\n  /**\n   * Helper method that validates and normalizes the options received by the controller.\n   * @param {StaticsControllerOptions} options The options to validate.\n   * @return {StaticsControllerOptions}\n   * @throws {Error} If no files are specified.\n   * @throws {Error} If methods is not defined.\n   * @throws {Error} If no methods are enabled.\n   * @throws {Error} If there's an invalid HTTP method.\n   * @access protected\n   * @ignore\n   */\n  _normalizeOptions(options) {\n    if (!options.files || !options.files.length) {\n      throw new Error('You need to specify a list of files');\n    } else if (!options.methods) {\n      throw new Error('You need to specify which HTTP methods are allowed for the files');\n    }\n\n    const methods = Object.keys(options.methods);\n\n    const atLeastOne = methods.some((method) => options.methods[method]);\n    if (!atLeastOne) {\n      throw new Error('You need to enable at least one HTTP method to serve the files');\n    }\n\n    const allowedMethods = [\n      'all',\n      'get',\n      'head',\n      'post',\n      'put',\n      'delete',\n      'connect',\n      'options',\n      'trace',\n    ];\n\n    const invalid = methods.find((method) => !allowedMethods.includes(method.toLowerCase()));\n    if (invalid) {\n      throw new Error(`${invalid} is not a valid HTTP method`);\n    }\n\n\n    const newMethods = methods.reduce(\n      (acc, method) => Object.assign({}, acc, {\n        [method.toLowerCase()]: options.methods[method],\n      }),\n      {}\n    );\n\n    return Object.assign({}, options, {\n      methods: newMethods,\n    });\n  }\n  /**\n   * Parses each of the received files in order to create a {@link StaticsControllerFile}.\n   * @return {Object} A dictionary with the definitions as values and the routes as keys.\n   * @access protected\n   * @ignore\n   */\n  _createFiles() {\n    const { files, paths } = this._options;\n    const routePath = removeSlashes(paths.route, false, true);\n    return files.reduce(\n      (formatted, file) => {\n        let source;\n        let route;\n        let headers;\n        if (typeof file === 'object') {\n          ({ route, source, headers } = file);\n        } else {\n          source = file;\n          route = file;\n        }\n\n        source = path.join(paths.source, source);\n        route = removeSlashes(route, true, false);\n        route = `${routePath}/${route}`;\n\n        return Object.assign({}, formatted, {\n          [route]: {\n            source,\n            route,\n            headers: headers || {},\n          },\n        });\n      },\n      {}\n    );\n  }\n  /**\n   * Generates a route for an specific file.\n   * @param {ExpressRouter}         router         To create the actual route.\n   * @param {string}                method         The HTTP method for the route.\n   * @param {StaticsControllerFile} file           The file information.\n   * @param {ExpressMiddleware}     fileMiddleware The middleware that serves the file.\n   * @param {Array}                 middlewares    A list of custom middlewares to add before the\n   *                                               one that serves the file.\n   * @return {ExpressRouter}\n   * @access protected\n   * @ignore\n   */\n  _addRoute(router, method, file, fileMiddleware, middlewares) {\n    return router[method](file.route, [...middlewares, fileMiddleware]);\n  }\n  /**\n   * Generates the middleware to serve a specific file.\n   * @param {StaticsControllerFile} file The file information.\n   * @return {ExpressMiddleware}\n   * @access protected\n   * @ignore\n   */\n  _getMiddleware(file) {\n    return (req, res, next) => {\n      const extension = path.parse(file.source).ext.substr(1);\n      const headers = ObjectUtils.merge(\n        { 'Content-Type': mime.getType(extension) },\n        file.headers\n      );\n\n      Object.keys(headers).forEach((headerName) => {\n        res.setHeader(headerName, headers[headerName]);\n      });\n\n      this._sendFile(res, file.source, next);\n    };\n  }\n}\n/**\n * This controller allows you to serve specific files from any folder to any route without the\n * need of mounting directories as \"static\".\n * @type {ControllerCreator}\n * @param {StaticsControllerOptions} [options]     The options to customize the controller.\n * @param {Function():Array}         [middlewares] This function can be used to add custom\n *                                                 middlewares on the file routes. If implemented,\n *                                                 it must return a list of middlewares when\n *                                                 executed.\n */\nconst staticsController = controllerCreator((options, middlewares) => (app) => {\n  const router = app.get('router');\n  const ctrl = new StaticsController(app.get('sendFile'), options);\n  let useMiddlewares;\n  if (middlewares) {\n    useMiddlewares = middlewares(app).map((middleware) => (\n      middleware.connect ?\n        middleware.connect(app) :\n        middleware\n    ));\n  }\n\n  return ctrl.addRoutes(router, useMiddlewares);\n});\n\nmodule.exports = {\n  StaticsController,\n  staticsController,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/controllers/common/statics.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "typedef",
    "name": "StaticsControllerPathsOptions",
    "memberof": "src/controllers/common/statics.js",
    "static": true,
    "longname": "src/controllers/common/statics.js~StaticsControllerPathsOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "They are like \"master paths\" that get prepended to all the file paths and routes\n             the controller use."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "A custom route to prefix all the file routes."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "A custom path to prefix all the file paths."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "StaticsControllerPathsOptions"
    }
  },
  {
    "__docId__": 109,
    "kind": "class",
    "name": "StaticsController",
    "memberof": "src/controllers/common/statics.js",
    "static": true,
    "longname": "src/controllers/common/statics.js~StaticsController",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/controllers/common/statics.js",
    "importStyle": "{StaticsController}",
    "description": "This controller allows you to serve specific files from any folder to any route without the\nneed of mounting directories as \"static\".",
    "lineNumber": 42,
    "interface": false
  },
  {
    "__docId__": 110,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/controllers/common/statics.js~StaticsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/statics.js~StaticsController#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "SendFile"
        ],
        "spread": false,
        "optional": false,
        "name": "sendFile",
        "description": "To send the responses for the files."
      },
      {
        "nullable": null,
        "types": [
          "StaticsControllerOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to customize the controller."
      }
    ]
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "_sendFile",
    "memberof": "src/controllers/common/statics.js~StaticsController",
    "static": false,
    "longname": "src/controllers/common/statics.js~StaticsController#_sendFile",
    "access": "protected",
    "description": "A local reference for the `sendFile` service.",
    "lineNumber": 54,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "SendFile"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "_options",
    "memberof": "src/controllers/common/statics.js~StaticsController",
    "static": false,
    "longname": "src/controllers/common/statics.js~StaticsController#_options",
    "access": "protected",
    "description": "The controller configuration options.",
    "lineNumber": 61,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "StaticsControllerOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "_files",
    "memberof": "src/controllers/common/statics.js~StaticsController",
    "static": false,
    "longname": "src/controllers/common/statics.js~StaticsController#_files",
    "access": "protected",
    "description": "A dictionary of all the formatted files ({@link StaticsControllerFile}). It uses the files\nroutes as keys.",
    "lineNumber": 81,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "addRoutes",
    "memberof": "src/controllers/common/statics.js~StaticsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/statics.js~StaticsController#addRoutes",
    "access": "public",
    "description": "Defines all the needed routes to serve the files.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressRouter"
        ],
        "spread": false,
        "optional": false,
        "name": "router",
        "description": "To generate the routes."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "middlewares",
        "description": "A list of custom middlewares that will be added\n                                        before the one that serves a file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExpressRouter"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 115,
    "kind": "get",
    "name": "options",
    "memberof": "src/controllers/common/statics.js~StaticsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/statics.js~StaticsController#options",
    "access": "public",
    "description": "The controller configuration options.",
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "StaticsControllerOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "_normalizeOptions",
    "memberof": "src/controllers/common/statics.js~StaticsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/statics.js~StaticsController#_normalizeOptions",
    "access": "protected",
    "description": "Helper method that validates and normalizes the options received by the controller.",
    "lineNumber": 128,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "StaticsControllerOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StaticsControllerOptions"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If no files are specified."
      },
      {
        "types": [
          "Error"
        ],
        "description": "If methods is not defined."
      },
      {
        "types": [
          "Error"
        ],
        "description": "If no methods are enabled."
      },
      {
        "types": [
          "Error"
        ],
        "description": "If there's an invalid HTTP method."
      }
    ]
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "_createFiles",
    "memberof": "src/controllers/common/statics.js~StaticsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/statics.js~StaticsController#_createFiles",
    "access": "protected",
    "description": "Parses each of the received files in order to create a {@link StaticsControllerFile}.",
    "lineNumber": 177,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A dictionary with the definitions as values and the routes as keys."
    },
    "params": []
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "_addRoute",
    "memberof": "src/controllers/common/statics.js~StaticsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/statics.js~StaticsController#_addRoute",
    "access": "protected",
    "description": "Generates a route for an specific file.",
    "lineNumber": 219,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressRouter"
        ],
        "spread": false,
        "optional": false,
        "name": "router",
        "description": "To create the actual route."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The HTTP method for the route."
      },
      {
        "nullable": null,
        "types": [
          "StaticsControllerFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressMiddleware"
        ],
        "spread": false,
        "optional": false,
        "name": "fileMiddleware",
        "description": "The middleware that serves the file."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "middlewares",
        "description": "A list of custom middlewares to add before the\n                                              one that serves the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExpressRouter"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "_getMiddleware",
    "memberof": "src/controllers/common/statics.js~StaticsController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/common/statics.js~StaticsController#_getMiddleware",
    "access": "protected",
    "description": "Generates the middleware to serve a specific file.",
    "lineNumber": 229,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "StaticsControllerFile"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "staticsController",
    "memberof": "src/controllers/common/statics.js",
    "static": true,
    "longname": "src/controllers/common/statics.js~staticsController",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/controllers/common/statics.js",
    "importStyle": "{staticsController}",
    "description": "This controller allows you to serve specific files from any folder to any route without the\nneed of mounting directories as \"static\".",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "StaticsControllerOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to customize the controller."
      },
      {
        "nullable": null,
        "types": [
          "Function():Array"
        ],
        "spread": false,
        "optional": true,
        "name": "middlewares",
        "description": "This function can be used to add custom\n                                                middlewares on the file routes. If implemented,\n                                                it must return a list of middlewares when\n                                                executed."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "ControllerCreator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "src/controllers/index.js",
    "content": "const common = require('./common');\nconst utils = require('./utils');\n\nmodule.exports = {\n  common,\n  utils,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/controllers/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/controllers/utils/gateway.js",
    "content": "const ObjectUtils = require('wootils/shared/objectUtils');\nconst { removeSlashes, createRouteExpression } = require('../../utils/functions');\nconst { controllerCreator } = require('../../utils/wrappers');\n\n/**\n * @typedef {Object} GatewayControllerRouteMethod\n * @description This object represets an HTTP method for a route the controller will mount.\n * @property {string}                               method   The name of the HTTP method.\n * @property {GatewayControllerEndpointInformation} endpoint The information for the endpoint\n *                                                           responsible from creating the route.\n * @ignore\n */\n\n/**\n * @typedef {Object} GatewayControllerRoute\n * @description This object contains the information for an specific route the controller will\n *              mount.\n * @property {string}                              path    The path to the endpoint relative to\n *                                                         the entry point.\n * @property {string}                              route   The path the route will have. This is\n *                                                         different from `path` as it's possible\n *                                                         for the gateway to be implemented using\n *                                                         the `root` option.\n * @property {Array<GatewayControllerRouteMethod>} methods A list with all the methods the\n *                                                         controller will use to mount the route.\n * @ignore\n */\n\n/**\n * @typedef {Object} GatewayConfigurationEndpoint\n * @description Normally, you would define an endpoint with just a string path, but you can use\n *              this type of object to add extra settings.\n * @property {string} path   The path to the endpoint relative to the entry point. It can include\n *                           placeholders for parameters like `/:parameter/`.\n * @property {string} method The HTTP method for the endpoint. This will tell the gateway the\n *                           type of route it should mount. If is not specified, it will use\n *                           `all`.\n */\n\n/**\n * @typedef {Object} GatewayConfigurationEndpoints\n * @description A dictionary of endpoints or sub endpoints the gateway will use in order to mount\n *              routes.\n * @property {string|GatewayConfigurationEndpoints|GatewayConfigurationEndpoint} [endpointName]\n * It can be the path to an actual endpoint, a dictionary of sub endpoints, or a definition of\n * an endpoint with settings ({@link GatewayConfigurationEndpoint}).\n */\n\n/**\n * @typedef {Object} GatewayConfiguration\n * @description This is a configuration object very similar to the one {@link APIClient} uses in\n *              order to configure the endpoints; the controller uses it to create the routes and\n *              to validate the HTTP methods.\n * @property {string}                        url     The entry point to the API the controller\n *                                                   will make the requests to.\n * @property {GatewayConfigurationEndpoints} gateway A dictionary with the endpoints the gateway\n *                                                   will make available.\n */\n\n/**\n * @typedef {Object} GatewayControllerHeadersOptions\n * @description The options for how the gateway will handle the headers from the requests and the\n *              responses.\n * @property {boolean} [useXForwardedFor=true]\n * Whether or not to include the header with the request's IP address.\n * @property {boolean} [copyCustomHeaders=true]\n * Whether or not to copy all custom headers from the request. By custom header, it means all the\n * headers which names start with `x-`.\n * @property {Array} [copy=['authorization','content-type', 'referer', 'user-agent']]\n * A list of \"known\" headers the gateway will try to copy from the incoming request.\n * @property {Array} [remove=['server', 'x-powered-by']]\n * A list of \"known\" headers the gateway will try to remove the response.\n */\n\n/**\n * @typedef {Object} GatewayControllerOptions\n * @description The options to configure how the gateway will manage the requests and the\n *              responses.\n * @property {string} [root='']\n * This is really a helper for when the gateway is used with an API client. The idea is that,\n * by default, the routes are mounted on the controller route, but with this option, you can\n * specify another sub path. For example: The controller is mounted on `/routes`, if you set\n * `root` to `gateway`, all the routes will be on `/routes/gateway`.\n * This become important (and useful) when you get the API client configuration (with\n * `endpointsForAPIClient`): The `url` will be the controller route, but all the endpoints will\n * be modified and prefixed with the `root`.\n * @property {string} [configurationSetting='api']\n * This is another option for when the gateway is used with an API client. When calling\n * `endpointsForAPIClient`, all the endpoints will be wrapped inside an object named after this\n * option. For example: `{ url: '...', endpoints: { api: { ... } } }`\n * @property {GatewayControllerHeadersOptions} [headers]\n * The options for how the gateway will handle the headers from the requests and the responses.\n */\n\n/**\n * @typedef {Object} GatewayControllerCreatorOptions\n * @description This are the options sent to the controller creator that instantiates\n *              {@link GatewayController}. They're basically the same as\n *              {@link GatewayControllerOptions} but with a couple of extra ones.\n * @param {string} [serviceName='apiGeteway']             The name of the creator will use to\n *                                                        register the controller in the container.\n *                                                        No, this is not a typo. The creator will\n *                                                        register the controller so other\n *                                                        services can access the\n *                                                        `endpointsForAPIClient` getter. The\n *                                                        service will be available after the app\n *                                                        routes are mounted.\n *                                                        If this is overwritten, the creator will\n *                                                        ensure that the name ends with `Gateway`;\n *                                                        and if overwritten, but it doesn't\n *                                                        include `Gateway` at the end, and no\n *                                                        `configurationSetting` was defined, the\n *                                                        creator will use the custom name\n *                                                        (without `Gatway`) for\n *                                                        `configurationSetting`.\n * @param {string} [helperServiceName='apiGatewayHelper'] The name of the helper service the\n *                                                        creator will try to obtain from the\n *                                                        container. If `serviceName` is\n *                                                        overwritten, the default for this will\n *                                                        be `${serviceName}Helper`.\n * @param {string} [configurationSetting='api']           The name of the configuration setting\n *                                                        where the gateway configuration is\n *                                                        stored. If not overwritten, check the\n *                                                        description of `serviceName` to\n *                                                        understand which will be its default\n *                                                        value.\n * @param {Class}  [gatewayClass=GatewayController]       The class the creator will instantiate.\n *                                                        Similar to {@link APIClient}, this\n *                                                        allows for extra customization in cases\n *                                                        you may need multiple gateways.\n */\n\n/**\n * @typedef {Object} GatewayControllerRequest\n * @description This is the information for a request the controller will make.\n * @property {string}           url     The URL for the request.\n * @property {HTTPFetchOptions} options The request options.\n */\n\n/**\n * @typedef {Object} GatewayControllerEndpointInformation\n * @description This is the information for an specific endpoint that the gateway may use to\n *              send to a helper method in order to give it context.\n * @property {string}                              name     The name of the endpoint, which is\n *                                                          actually the path inside the gateway\n *                                                          configuration's `gateway` property.\n * @property {string|GatewayConfigurationEndpoint} settings The path for the endpoint, or the\n *                                                          dictionary of settings.\n */\n\n/**\n * @typedef {function} GatewayHelperServiceRequestReducer\n * @description This is called in order to allow the helper to modify the information of a\n *              request that is about the fired.\n * @param {GatewayControllerRequest}             request  The information for a request the\n *                                                        controller will make.\n * @param {GatewayControllerEndpointInformation} endpoint The information for the endpoint\n *                                                        responsible of creating the route.\n * @param {ExpressRequest}                       req      The server's incoming request\n *                                                        information.\n * @param {ExpressResponse}                      res      The server's response information.\n * @param {ExpressNext}                          next     The function to call the next\n *                                                        middleware.\n * @return {GatewayControllerRequest}\n */\n\n/**\n * @typedef {function} GatewayHelperServiceResponseReducer\n * @description This is called in order to allow the helper to modify the information of a\n *              response the gateway made.\n * @param {Object}                               response The response generated by the fetch\n *                                                        request.\n * @param {GatewayControllerEndpointInformation} endpoint The information for the endpoint\n *                                                        responsible of creating the route.\n * @param {ExpressRequest}                       req      The server's incoming request\n *                                                        information.\n * @param {ExpressResponse}                      res      The server's response information.\n * @param {ExpressNext}                          next     The function to call the next\n *                                                        middleware.\n * @return {Object}\n */\n\n/**\n * @typedef {function} GatewayHelperServiceStreamVerification\n * @description This is called in order to allow the helper to decide whether a fetch request\n *              response should be added to the server's response stream. This will only be\n *              called if the helper also implements `handleEndpointResponse`.\n * @param {Object}                               response The response generated by the fetch\n *                                                        request.\n * @param {GatewayControllerEndpointInformation} endpoint The information for the endpoint\n *                                                        responsible of creating the route.\n * @param {ExpressRequest}                       req      The server's incoming request\n *                                                        information.\n * @param {ExpressResponse}                      res      The server's response information.\n * @param {ExpressNext}                          next     The function to call the next\n *                                                        middleware.\n * @return {boolean}\n */\n\n/**\n * @typedef {function} GatewayHelperServiceResponseHandler\n * @description This is called in order for the helper to handle a response. This is only\n *              called if `shouldStreamEndpointResponse` returned `false`.\n * @param {Object}                               response The response generated by the fetch\n *                                                        request.\n * @param {GatewayControllerEndpointInformation} endpoint The information for the endpoint\n *                                                        responsible of creating the route.\n * @param {ExpressRequest}                       req      The server's incoming request\n *                                                        information.\n * @param {ExpressResponse}                      res      The server's response information.\n * @param {ExpressNext}                          next     The function to call the next\n *                                                        middleware.\n */\n\n/**\n * @typedef {function} GatewayHelperServiceErrorHandler\n * @description This is called in order for the helper to handle a fetch request error.\n * @param {Error}                                error    The fetch request error.\n * @param {GatewayControllerEndpointInformation} endpoint The information for the endpoint\n *                                                        responsible of creating the route.\n * @param {ExpressRequest}                       req      The server's incoming request\n *                                                        information.\n * @param {ExpressResponse}                      res      The server's response information.\n * @param {ExpressNext}                          next     The function to call the next\n *                                                        middleware.\n */\n\n/**\n * @typedef {Object} GatewayHelperService\n * @description A service that can have specific methods the gateway will call in order to\n *              modify requests, responses, handle errors, etc.\n * @property {?GatewayHelperServiceRequestReducer} reduceEndpointRequest\n * This is called in order to allow the helper to modify the information of a request that is\n * about the fired.\n * @property {?GatewayHelperServiceResponseReducer} reduceEndpointResponse\n * This is called in order to allow the helper to modify the information of a response the\n * gateway made.\n * @property {?GatewayHelperServiceStreamVerification} shouldStreamEndpointResponse\n * This is called in order to allow the helper to decide whether a fetch request response should\n * be added to the server's response stream. This will only be called if the helper also\n * implements `handleEndpointResponse`.\n * @property {?GatewayHelperServiceResponseHandler} handleEndpointResponse\n * This is called in order for the helper to handle a response. This is only called if\n * `shouldStreamEndpointResponse` returned `false`.\n * @property {?GatewayHelperServiceErrorHandler} handleEndpointError\n * This is called in order for the helper to handle a fetch request error.\n */\n\n/**\n * Geneters routes that will act as a gateway to an specific set of endpoints.\n * @param {GatewayConfiguration}     gatewayConfig This is a configuration object very similar to\n *                                                 the one {@link APIClient} uses in order to\n *                                                 configure the endpoints; the controller uses it\n *                                                 to create the routes and to validate the HTTP\n *                                                 methods.\n * @param {string}                   route         The route where the controller will be mounted.\n * @param {HTTP}                     http          To make the fetch requests on the routes.\n * @param {GatewayControllerOptions} [options={}]  The options to configure how the gateway will\n *                                                 manage the requests and the responses.\n * @param {?GatewayHelperService}    [helper=null] A service that can have specific methods the\n *                                                 gateway will call in order to modify requests,\n *                                                 responses, handle errors, etc.\n */\nclass GatewayController {\n  constructor(gatewayConfig, route, http, options = {}, helperService = null) {\n    /**\n     * The options to configure how the gateway will manage the requests and the responses.\n     * @type {GatewayControllerOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = this._normalizeOptions(ObjectUtils.merge(\n      {\n        root: '',\n        configurationSetting: 'api',\n        headers: {\n          useXForwardedFor: true,\n          copyCustomHeaders: true,\n          copy: options.headers && options.headers.copy ? options.headers.copy : [\n            'authorization',\n            'content-type',\n            'referer',\n            'user-agent',\n          ],\n          remove: options.headers && options.headers.remove ? options.headers.remove : [\n            'server',\n            'x-powered-by',\n            'content-encoding',\n          ],\n        },\n      },\n      options\n    ));\n    /**\n     * The configuration for the API the controller will make requests to.\n     * @type {GatewayConfiguration}\n     * @access protected\n     * @ignore\n     */\n    this._gatewayConfig = Object.assign({}, gatewayConfig, {\n      url: removeSlashes(gatewayConfig.url, false, true),\n    });\n    /**\n     * A local reference for the `http` service.\n     * @type {HTTP}\n     * @access protected\n     * @ignore\n     */\n    this._http = http;\n    /**\n     * A list of the allowed HTTP methods an endpoint can have.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._allowedHTTPMethods = [\n      'get',\n      'head',\n      'post',\n      'put',\n      'delete',\n      'connect',\n      'options',\n      'trace',\n    ];\n    /**\n     * A flat dictionary of the gateway endpoints. The key is the path on the original\n     * dictionary (`this._gatewayConfig.gateway`) and the value is either the path (`string`)\n     * or the endpoint settings ({@link GatewayConfigurationEndpoint}).\n     * @type {Object}\n     * @access protected\n     * @ignore\n     */\n    this._endpoints = this._getNormalizedEndpoints();\n    /**\n     * The route where the controller is mounted.\n     * @type {string}\n     * @access protected\n     * @ignore\n     */\n    this._route = removeSlashes(route);\n    /**\n     * A regular expression that will be used to remove the controller route from a request\n     * path. This will allow the main middleware to extract the path to where the request should\n     * be made.\n     * @type {RegExp}\n     * @access protected\n     * @ignore\n     */\n    this._routeExpression = this._createRouteExpression();\n    /**\n     * This is the list of routes the controller will define.\n     * @type {Array<GatewayControllerRoute>}\n     * @access protected\n     * @ignore\n     */\n    this._routes = this._createEndpointRoutes();\n    /**\n     * An {@link APIClient} configuration based on the controller routes.\n     * @type {APIClientConfiguration}\n     * @access protected\n     * @Ignore\n     */\n    this._apiClientConfiguration = this._createAPIClientConfiguration();\n    /**\n     * A service that can have specific methods the gateway will call in order to modify\n     * requests, responses, handle errors, etc.\n     * @type {?GatewayHelperService}\n     * @access protected\n     */\n    this._helperService = helperService;\n    /**\n     * A dictionary of boolean flags that specify if a helper service has method. This is to\n     * avoid checking if the helper is defined and if \"x method\" is a function. If no helper\n     * was specified, the object will have all the flags set to `false`.\n     * @type {Object}\n     * @access protected\n     * @ignore\n     */\n    this._helperServiceInfo = this._createHelperServiceInfo();\n  }\n  /**\n   * Defines all the routes on a given router.\n   * @param {ExpressRouter} router           The router where all the routes will be added.\n   * @param {Array}         [middlewares=[]] A list of custom middlewares that will be added before\n   *                                         the one that makes the request.\n   * @return {ExpressRouter}\n   */\n  addRoutes(router, middlewares = []) {\n    this._routes.forEach((route) => route.methods.forEach((info) => this._addRoute(\n      router,\n      info.method,\n      route.route,\n      this._getMiddleware(info.endpoint),\n      middlewares\n    )));\n\n    return router;\n  }\n  /**\n   * An {@link APIClient} configuration based on the controller routes.\n     * @type {APIClientConfiguration}\n   */\n  get endpointsForAPIClient() {\n    return this._apiClientConfiguration;\n  }\n  /**\n   * The configuration for the API the controller will make requests to.\n   * @type {GatewayConfiguration}\n   */\n  get gatewayConfig() {\n    return this._gatewayConfig;\n  }\n  /**\n   * The options to configure how the gateway will manage the requests and the responses.\n   * @type {GatewayControllerOptions}\n   */\n  get options() {\n    return this._options;\n  }\n  /**\n   * Normalizes the options recevied by the controller:\n   * - Removes any trailing and leading slashes from the `root` path, if defined.\n   * @param {GatewayControllerOptions} options The options to normalize.\n   * @return {GatewayControllerOptions}\n   * @access protected\n   * @ignore\n   */\n  _normalizeOptions(options) {\n    let newOptions;\n    if (options.root) {\n      const root = removeSlashes(options.root).trim();\n      newOptions = Object.assign({}, options, { root });\n    } else {\n      newOptions = options;\n    }\n\n    return newOptions;\n  }\n  /**\n   * Flattens all the endpoints from gateway configuration into a one level dictionary, where the\n   * key are the paths they used to have on the original configuration, and the values are the\n   * endpoints definitions.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getNormalizedEndpoints() {\n    return ObjectUtils.flat(\n      this._gatewayConfig.gateway,\n      '.',\n      '',\n      (ignore, value) => typeof value.path === 'undefined'\n    );\n  }\n  /**\n   * Creates a regular expression the main middleware will later use in order to remove the\n   * controller route from the request url. That's needed in order to build the URL where the\n   * request will be made.\n   * @return {RegExp}\n   * @access protected\n   * @ignore\n   */\n  _createRouteExpression() {\n    return createRouteExpression(\n      this._options.root ? `${this._route}/${this._options.root}` : this._route,\n      true,\n      true\n    );\n  }\n  /**\n   * This is a helper method used in order to validate if an HTTP method can be used in order to\n   * define a route in the router. If the given method is not on the list of allowed methods,\n   * it will be \"normalized\" to `all`. It also transforms the method into lower case.\n   * @param {string} method The method to validate.\n   * @return {string}\n   * @access protected\n   * @ignore\n   */\n  _normalizeHTTPMethod(method) {\n    const newMethod = method.toLowerCase();\n    return this._allowedHTTPMethods.includes(newMethod) ? newMethod : 'all';\n  }\n  /**\n   * Based on the information from the endpoints, this method will create the routes the\n   * controller will later add on a router.\n   * @return {Array<GatewayControllerRoute>}\n   * @throws {Error} If there's more than one endpoint using the same path with the same HTTP\n   *                 method.\n   * @access protected\n   * @ignore\n   */\n  _createEndpointRoutes() {\n    const routePrefixes = this._options.root ?\n      `/${this._options.root}/` :\n      '/';\n    const routes = {};\n    Object.keys(this._endpoints).forEach((name) => {\n      const endpoint = this._endpoints[name];\n      let endpointPath;\n      let endpointMethod;\n      if (typeof endpoint === 'string') {\n        endpointPath = endpoint;\n        endpointMethod = 'all';\n      } else {\n        endpointPath = endpoint.path;\n        endpointMethod = endpoint.method ?\n          this._normalizeHTTPMethod(endpoint.method) :\n          'all';\n      }\n\n      endpointPath = removeSlashes(endpointPath);\n      if (!routes[endpointPath]) {\n        routes[endpointPath] = {\n          path: endpointPath,\n          methods: {},\n        };\n      }\n\n      if (routes[endpointPath].methods[endpointMethod]) {\n        const repeatedEndpoint = routes[endpointPath].methods[endpointMethod];\n        throw new Error(\n          'You can\\'t have two gateway endpoints to the same path and with the same ' +\n          `HTTP method: '${repeatedEndpoint}' and '${name}'`\n        );\n      }\n\n      routes[endpointPath].methods[endpointMethod] = name;\n    });\n\n    return Object.keys(routes)\n    .map((endpointPath) => {\n      const info = routes[endpointPath];\n      return {\n        path: info.path,\n        route: `${routePrefixes}${info.path}`,\n        methods: Object.keys(info.methods).map((methodName) => ({\n          method: methodName,\n          endpoint: {\n            name: info.methods[methodName],\n            settings: this._endpoints[info.methods[methodName]],\n          },\n        })),\n      };\n    });\n  }\n  /**\n   * Based on the controller options and the gateway endpoints, this method will create an API\n   * client configuration that can be used to make requests to this controller.\n   * @return {APIClientConfiguration}\n   * @access protected\n   * @ignore\n   */\n  _createAPIClientConfiguration() {\n    let endpoints;\n    const { root } = this._options;\n    if (root) {\n      endpoints = Object.keys(this._endpoints).reduce(\n        (acc, name) => {\n          const endpoint = this._endpoints[name];\n          let newEndpoint;\n          if (typeof endpoint === 'string') {\n            newEndpoint = removeSlashes(endpoint);\n            newEndpoint = `${root}/${newEndpoint}`;\n          } else {\n            const endpointPath = removeSlashes(endpoint.path);\n            newEndpoint = Object.assign({}, endpoint, {\n              path: `${root}/${endpointPath}`,\n            });\n          }\n\n          return Object.assign({}, acc, {\n            [name]: newEndpoint,\n          });\n        },\n        {}\n      );\n    } else {\n      endpoints = this._endpoints;\n    }\n    return {\n      url: `/${this._route}`,\n      endpoints: {\n        [this._options.configurationSetting]: ObjectUtils.unflat(endpoints),\n      },\n    };\n  }\n  /**\n   * Validates if a server helper exists and creates a dictionary with flags for all the methods\n   * a helper can have; this will allow other methods to check if the \"helper method X\" is\n   * available without having to check if the helper is defined and if \"method X\" is a function.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _createHelperServiceInfo() {\n    const methods = [\n      'reduceEndpointRequest',\n      'reduceEndpointResponse',\n      'shouldStreamEndpointResponse',\n      'handleEndpointResponse',\n      'handleEndpointError',\n    ];\n    let result;\n    if (this._helperService) {\n      result = methods.reduce(\n        (methodsDict, name) => Object.assign({}, methodsDict, {\n          [name]: typeof this._helperService[name] === 'function',\n        }),\n        {}\n      );\n    } else {\n      result = methods.reduce(\n        (methodsDict, name) => Object.assign({}, methodsDict, { [name]: false }),\n        {}\n      );\n    }\n\n    return result;\n  }\n  /**\n   * Adds a route on a given router.\n   * @param {ExpressRouter}     router              The router where the route will be added.\n   * @param {string}            method              The HTTP method for the route.\n   * @param {string}            route               The path for the route.\n   * @param {ExpressMiddleware} endpointMiddleware  The middleware that makes the request.\n   * @param {Array}             middlewares         Extra middlewares to add before the main one.\n   *\n   * @return {ExpressRouter}\n   * @access protected\n   * @ignore\n   */\n  _addRoute(router, method, route, endpointMiddleware, middlewares) {\n    return router[method](route, [...middlewares, endpointMiddleware]);\n  }\n  /**\n   * Generates a middleware that will make a request and stream back the response.\n   * @param {GatewayControllerEndpointInformation} endpoint The information for the enpdoint for\n   *                                                        which the middleware is being created.\n   * @return {ExpressMiddleware}\n   * @access protected\n   * @ignore\n   */\n  _getMiddleware(endpoint) {\n    return (req, res, next) => {\n      // Remove the controller route from the requested URL.\n      const reqPath = req.originalUrl.replace(this._routeExpression, '');\n      // Define the request options.\n      const options = {\n        method: req.method.toUpperCase(),\n        headers: {},\n      };\n      // Copy the specified headers from the incoming request.\n      this._options.headers.copy.forEach((name) => {\n        if (req.headers[name]) {\n          options.headers[name] = req.headers[name];\n        }\n      });\n      // If enabled, copy the custom headers.\n      if (this._options.headers.copyCustomHeaders) {\n        options.headers = ObjectUtils.merge(\n          options.headers,\n          this._http.getCustomHeadersFromRequest(req)\n        );\n      }\n      // If enabled, add the header with the request's IP.\n      if (this._options.headers.useXForwardedFor) {\n        options.headers['x-forwarded-for'] = this._http.getIPFromRequest(req);\n      }\n      /**\n       * If the request has a body and the method is not `GET`, stringify it and addit to\n       * the options.\n       */\n      if (options.method !== 'GET' && typeof req.body === 'object') {\n        options.body = JSON.stringify(req.body);\n        // If there's no `content-type`, let's assume it's JSON.\n        if (!options.headers['content-type']) {\n          options.headers['content-type'] = 'application/json';\n        }\n      }\n      // Reduce the request information.\n      const request = this._reduceEndpointRequest(\n        {\n          url: `${this._gatewayConfig.url}/${reqPath}`,\n          options,\n        },\n        endpoint,\n        req,\n        res,\n        next\n      );\n      // Make the fetch request.\n      return this._http.fetch(request.url, request.options)\n      .then((response) => {\n        // Reduce the response.\n        const newResponse = this._reduceEndpointResponse(response, endpoint, req, res, next);\n        // If the response should be sent down on the stream...\n        if (this._shouldStreamEndpointResponse(newResponse, endpoint, req, res, next)) {\n          // Update the server's response status.\n          res.status(newResponse.status);\n          // Copy the headers.\n          newResponse.headers.forEach((value, name) => {\n            if (!this._options.headers.remove.includes(name)) {\n              res.setHeader(name, value);\n            }\n          });\n          // Pipe the server's response into the fetch response stream.\n          newResponse.body\n          .pipe(res)\n          .on('error', (error) => {\n            next(error);\n          });\n        } else {\n          // Otherwise, let the helper handle the response.\n          this._handleEndpointResponse(newResponse, endpoint, req, res, next);\n        }\n      })\n      .catch((error) => this._handleEndpointError(error, endpoint, req, res, next));\n    };\n  }\n  /**\n   * This method is called in order to reduce a fetch request information. It will check if a\n   * helper is defined and allow it to do it, or fallback and return the given information.\n   * @param {GatewayControllerRequest}             request  The information for a request the\n   *                                                        controller will make.\n   * @param {GatewayControllerEndpointInformation} endpoint The information for the endpoint\n   *                                                        responsible of creating the route.\n   * @param {ExpressRequest}                       req      The server's incoming request\n   *                                                        information.\n   * @param {ExpressResponse}                      res      The server's response information.\n   * @param {ExpressNext}                          next     The function to call the next\n   *                                                        middleware.\n   * @return {GatewayControllerRequest}\n   * @access protected\n   * @ignore\n   */\n  _reduceEndpointRequest(request, endpoint, req, res, next) {\n    return this._helperServiceInfo.reduceEndpointRequest ?\n      this._helperService.reduceEndpointRequest(request, endpoint, req, res, next) :\n      request;\n  }\n  /**\n   * This method is called in order to reduce a fetch response information. It will check if a\n   * helper is defined and allow it to do it, or fallback and return the given information.\n   * @param {Object}                               response The response generated by the fetch\n   *                                                        request.\n   * @param {GatewayControllerEndpointInformation} endpoint The information for the endpoint\n   *                                                        responsible of creating the route.\n   * @param {ExpressRequest}                       req      The server's incoming request\n   *                                                        information.\n   * @param {ExpressResponse}                      res      The server's response information.\n   * @param {ExpressNext}                          next     The function to call the next\n   *                                                        middleware.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n\n  _reduceEndpointResponse(response, endpoint, req, res, next) {\n    return this._helperServiceInfo.reduceEndpointResponse ?\n      this._helperService.reduceEndpointResponse(response, endpoint, req, res, next) :\n      response;\n  }\n  /**\n   * This method is called in order to validate if the main middleware should pipe the fetch\n   * response stream into the server's response or if the helper will handle the response.\n   * This method will only call the helper if it implements both `shouldStreamEndpointResponse`\n   * and `handleEndpointResponse`\n   * @param {Object}                               response The response generated by the fetch\n   *                                                        request.\n   * @param {GatewayControllerEndpointInformation} endpoint The information for the endpoint\n   *                                                        responsible of creating the route.\n   * @param {ExpressRequest}                       req      The server's incoming request\n   *                                                        information.\n   * @param {ExpressResponse}                      res      The server's response information.\n   * @param {ExpressNext}                          next     The function to call the next\n   *                                                        middleware.\n   * @return {boolean}\n   * @access protected\n   * @ignore\n   */\n  _shouldStreamEndpointResponse(response, endpoint, req, res, next) {\n    return (\n      this._helperServiceInfo.shouldStreamEndpointResponse &&\n      this._helperServiceInfo.handleEndpointResponse\n    ) ?\n      this._helperService.shouldStreamEndpointResponse(response, endpoint, req, res, next) :\n      true;\n  }\n  /**\n   * This is called when the helper say that a fetch response shouldn't be sent, so the controller\n   * will allow it to handle the response by itself.\n   * @param {Object}                               response The response generated by the fetch\n   *                                                        request.\n   * @param {GatewayControllerEndpointInformation} endpoint The information for the endpoint\n   *                                                        responsible of creating the route.\n   * @param {ExpressRequest}                       req      The server's incoming request\n   *                                                        information.\n   * @param {ExpressResponse}                      res      The server's response information.\n   * @param {ExpressNext}                          next     The function to call the next\n   *                                                        middleware.\n   * @return {*}\n   * @access protected\n   * @ignore\n   */\n  _handleEndpointResponse(response, endpoint, req, res, next) {\n    return this._helperService.handleEndpointResponse(response, endpoint, req, res, next);\n  }\n  /**\n   * This method is called in order to handle a fetch request error. It will check if a\n   * helper is defined and allow it to do it, or fallback and call the next middleware.\n   * @param {Error}                                error    The fetch request error.\n   * @param {GatewayControllerEndpointInformation} endpoint The information for the endpoint\n   *                                                        responsible of creating the route.\n   * @param {ExpressRequest}                       req      The server's incoming request\n   *                                                        information.\n   * @param {ExpressResponse}                      res      The server's response information.\n   * @param {ExpressNext}                          next     The function to call the next\n   *                                                        middleware.\n   * @return {*}\n   * @access protected\n   * @ignore\n   */\n  _handleEndpointError(error, endpoint, req, res, next) {\n    return this._helperServiceInfo.handleEndpointError ?\n      this._helperService.handleEndpointError(error, endpoint, req, res, next) :\n      next(error);\n  }\n}\n/**\n * This controller allows you to have gateway routes that actually make requests and respond with\n * the contents from an specified API.\n * @type {ControllerCreator}\n * @param {GatewayControllerCreatorOptions} [options]     The options to customize the controller.\n * @param {Function():Array}                [middlewares] This function can be used to add custom\n *                                                        middlewares on the gateway routes. If\n *                                                        implemented, it must return a list of\n *                                                        middlewares when executed.\n */\nconst gatewayController = controllerCreator((\n  options = {},\n  middlewares = null\n) => (app, route) => {\n  /**\n   * Formats the name in order to keep consistency with the helper service and the configuration\n   * setting: If the `serviceName` is different from the default, make sure it ends with\n   * `Gateway`, set the default helper service name to `${serviceName}Helper` and the default\n   * configuration setting to the same as the service name (without the `Gateway`).\n   * This way, if you just use `myApi`, the service name will be `myApiGateway`, the helper name\n   * will be `myApiGatewayHelper` and the configuration setting `myApi`.\n   */\n  const defaultServiceName = 'apiGateway';\n  let defaultHelperServiceName = 'apiGatewayHelper';\n  let defaultConfigurationSetting = 'api';\n  let { serviceName = defaultServiceName } = options;\n  if (serviceName !== defaultServiceName) {\n    defaultConfigurationSetting = serviceName;\n    if (!serviceName.match(/gateway$/i)) {\n      serviceName = `${serviceName}Gateway`;\n    }\n    defaultHelperServiceName = `${serviceName}Helper`;\n  }\n  /**\n   * Get the settings the controller needs in order to use with the container before creating\n   * the instance.\n   */\n  const {\n    helperServiceName = defaultHelperServiceName,\n    configurationSetting = defaultConfigurationSetting,\n    GatewayClass = GatewayController,\n  } = options;\n  /**\n   * Update the options with the resolved configuration setting name, because the class will\n   * needed when generating API Client endpoints.\n   */\n  const newOptions = Object.assign({}, options, {\n    configurationSetting,\n  });\n  // Get the gateway configuration.\n  const gatewayConfig = app.get('appConfiguration').get(configurationSetting);\n  // Generate the controller\n  const ctrl = new GatewayClass(\n    gatewayConfig,\n    route,\n    app.get('http'),\n    newOptions,\n    helperServiceName ? app.try(helperServiceName) : null\n  );\n  /**\n   * Register a service for the controller so other services can ask for the endpoints formatted\n   * for an API Client.\n   */\n  app.set(serviceName, () => ctrl);\n  /**\n   * Check if there are actual middlewares to be included, and in case there are Jimpex\n   * middlewares, connect them\n   */\n  let useMiddlewares;\n  if (middlewares) {\n    useMiddlewares = middlewares(app).map((middleware) => (\n      middleware.connect ?\n        middleware.connect(app) :\n        middleware\n    ));\n  }\n  // Add the routes to the router and return it.\n  return ctrl.addRoutes(app.get('router'), useMiddlewares);\n});\n\nmodule.exports = {\n  GatewayController,\n  gatewayController,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/controllers/utils/gateway.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "typedef",
    "name": "GatewayControllerRouteMethod",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayControllerRouteMethod",
    "access": "public",
    "description": "",
    "ignore": true,
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This object represets an HTTP method for a route the controller will mount."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The name of the HTTP method."
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerEndpointInformation"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "The information for the endpoint\n                                                          responsible from creating the route."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GatewayControllerRouteMethod"
    }
  },
  {
    "__docId__": 124,
    "kind": "typedef",
    "name": "GatewayControllerRoute",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayControllerRoute",
    "access": "public",
    "description": "",
    "ignore": true,
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This object contains the information for an specific route the controller will\n             mount."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to the endpoint relative to\n                                                        the entry point."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The path the route will have. This is\n                                                        different from `path` as it's possible\n                                                        for the gateway to be implemented using\n                                                        the `root` option."
      },
      {
        "nullable": null,
        "types": [
          "Array<GatewayControllerRouteMethod>"
        ],
        "spread": false,
        "optional": false,
        "name": "methods",
        "description": "A list with all the methods the\n                                                        controller will use to mount the route."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GatewayControllerRoute"
    }
  },
  {
    "__docId__": 125,
    "kind": "typedef",
    "name": "GatewayConfigurationEndpoint",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayConfigurationEndpoint",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "Normally, you would define an endpoint with just a string path, but you can use\n             this type of object to add extra settings."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to the endpoint relative to the entry point. It can include\n                          placeholders for parameters like `/:parameter/`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The HTTP method for the endpoint. This will tell the gateway the\n                          type of route it should mount. If is not specified, it will use\n                          `all`."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GatewayConfigurationEndpoint"
    }
  },
  {
    "__docId__": 126,
    "kind": "typedef",
    "name": "GatewayConfigurationEndpoints",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayConfigurationEndpoints",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "A dictionary of endpoints or sub endpoints the gateway will use in order to mount\n             routes."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string",
          "GatewayConfigurationEndpoints",
          "GatewayConfigurationEndpoint"
        ],
        "spread": false,
        "optional": true,
        "name": "endpointName",
        "description": "It can be the path to an actual endpoint, a dictionary of sub endpoints, or a definition of\nan endpoint with settings ({@link GatewayConfigurationEndpoint})."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GatewayConfigurationEndpoints"
    }
  },
  {
    "__docId__": 127,
    "kind": "typedef",
    "name": "GatewayConfiguration",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayConfiguration",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This is a configuration object very similar to the one {@link APIClient} uses in\n             order to configure the endpoints; the controller uses it to create the routes and\n             to validate the HTTP methods."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The entry point to the API the controller\n                                                  will make the requests to."
      },
      {
        "nullable": null,
        "types": [
          "GatewayConfigurationEndpoints"
        ],
        "spread": false,
        "optional": false,
        "name": "gateway",
        "description": "A dictionary with the endpoints the gateway\n                                                  will make available."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GatewayConfiguration"
    }
  },
  {
    "__docId__": 128,
    "kind": "typedef",
    "name": "GatewayControllerHeadersOptions",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayControllerHeadersOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "The options for how the gateway will handle the headers from the requests and the\n             responses."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "useXForwardedFor",
        "description": "Whether or not to include the header with the request's IP address."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "copyCustomHeaders",
        "description": "Whether or not to copy all custom headers from the request. By custom header, it means all the\nheaders which names start with `x-`."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "['authorization','content-type', 'referer', 'user-agent']",
        "defaultRaw": "['authorization','content-type', 'referer', 'user-agent']",
        "name": "copy",
        "description": "A list of \"known\" headers the gateway will try to copy from the incoming request."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "['server', 'x-powered-by']",
        "defaultRaw": "['server', 'x-powered-by']",
        "name": "remove",
        "description": "A list of \"known\" headers the gateway will try to remove the response."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GatewayControllerHeadersOptions"
    }
  },
  {
    "__docId__": 129,
    "kind": "typedef",
    "name": "GatewayControllerOptions",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayControllerOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "The options to configure how the gateway will manage the requests and the\n             responses."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "root",
        "description": "This is really a helper for when the gateway is used with an API client. The idea is that,\nby default, the routes are mounted on the controller route, but with this option, you can\nspecify another sub path. For example: The controller is mounted on `/routes`, if you set\n`root` to `gateway`, all the routes will be on `/routes/gateway`.\nThis become important (and useful) when you get the API client configuration (with\n`endpointsForAPIClient`): The `url` will be the controller route, but all the endpoints will\nbe modified and prefixed with the `root`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'api'",
        "defaultRaw": "'api'",
        "name": "configurationSetting",
        "description": "This is another option for when the gateway is used with an API client. When calling\n`endpointsForAPIClient`, all the endpoints will be wrapped inside an object named after this\noption. For example: `{ url: '...', endpoints: { api: { ... } } }`"
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerHeadersOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "headers",
        "description": "The options for how the gateway will handle the headers from the requests and the responses."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GatewayControllerOptions"
    }
  },
  {
    "__docId__": 130,
    "kind": "typedef",
    "name": "GatewayControllerCreatorOptions",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayControllerCreatorOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This are the options sent to the controller creator that instantiates\n             {@link GatewayController}. They're basically the same as\n             {@link GatewayControllerOptions} but with a couple of extra ones."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'apiGeteway'",
        "defaultRaw": "'apiGeteway'",
        "name": "serviceName",
        "description": "The name of the creator will use to\n                                                       register the controller in the container.\n                                                       No, this is not a typo. The creator will\n                                                       register the controller so other\n                                                       services can access the\n                                                       `endpointsForAPIClient` getter. The\n                                                       service will be available after the app\n                                                       routes are mounted.\n                                                       If this is overwritten, the creator will\n                                                       ensure that the name ends with `Gateway`;\n                                                       and if overwritten, but it doesn't\n                                                       include `Gateway` at the end, and no\n                                                       `configurationSetting` was defined, the\n                                                       creator will use the custom name\n                                                       (without `Gatway`) for\n                                                       `configurationSetting`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'apiGatewayHelper'",
        "defaultRaw": "'apiGatewayHelper'",
        "name": "helperServiceName",
        "description": "The name of the helper service the\n                                                       creator will try to obtain from the\n                                                       container. If `serviceName` is\n                                                       overwritten, the default for this will\n                                                       be `${serviceName}Helper`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'api'",
        "defaultRaw": "'api'",
        "name": "configurationSetting",
        "description": "The name of the configuration setting\n                                                       where the gateway configuration is\n                                                       stored. If not overwritten, check the\n                                                       description of `serviceName` to\n                                                       understand which will be its default\n                                                       value."
      },
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "GatewayController",
        "defaultRaw": "GatewayController",
        "name": "gatewayClass",
        "description": "The class the creator will instantiate.\n                                                       Similar to {@link APIClient}, this\n                                                       allows for extra customization in cases\n                                                       you may need multiple gateways."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GatewayControllerCreatorOptions"
    }
  },
  {
    "__docId__": 131,
    "kind": "typedef",
    "name": "GatewayControllerRequest",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayControllerRequest",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This is the information for a request the controller will make."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL for the request."
      },
      {
        "nullable": null,
        "types": [
          "HTTPFetchOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The request options."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GatewayControllerRequest"
    }
  },
  {
    "__docId__": 132,
    "kind": "typedef",
    "name": "GatewayControllerEndpointInformation",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayControllerEndpointInformation",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This is the information for an specific endpoint that the gateway may use to\n             send to a helper method in order to give it context."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the endpoint, which is\n                                                         actually the path inside the gateway\n                                                         configuration's `gateway` property."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "GatewayConfigurationEndpoint"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "The path for the endpoint, or the\n                                                         dictionary of settings."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GatewayControllerEndpointInformation"
    }
  },
  {
    "__docId__": 133,
    "kind": "typedef",
    "name": "GatewayHelperServiceRequestReducer",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayHelperServiceRequestReducer",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This is called in order to allow the helper to modify the information of a\n             request that is about the fired."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "GatewayControllerRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "The information for a request the\n                                                       controller will make."
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerEndpointInformation"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "The information for the endpoint\n                                                       responsible of creating the route."
      },
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The server's incoming request\n                                                       information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server's response information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The function to call the next\n                                                       middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GatewayControllerRequest"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "GatewayHelperServiceRequestReducer"
    }
  },
  {
    "__docId__": 134,
    "kind": "typedef",
    "name": "GatewayHelperServiceResponseReducer",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayHelperServiceResponseReducer",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This is called in order to allow the helper to modify the information of a\n             response the gateway made."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "The response generated by the fetch\n                                                       request."
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerEndpointInformation"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "The information for the endpoint\n                                                       responsible of creating the route."
      },
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The server's incoming request\n                                                       information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server's response information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The function to call the next\n                                                       middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "GatewayHelperServiceResponseReducer"
    }
  },
  {
    "__docId__": 135,
    "kind": "typedef",
    "name": "GatewayHelperServiceStreamVerification",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayHelperServiceStreamVerification",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This is called in order to allow the helper to decide whether a fetch request\n             response should be added to the server's response stream. This will only be\n             called if the helper also implements `handleEndpointResponse`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "The response generated by the fetch\n                                                       request."
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerEndpointInformation"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "The information for the endpoint\n                                                       responsible of creating the route."
      },
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The server's incoming request\n                                                       information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server's response information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The function to call the next\n                                                       middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "GatewayHelperServiceStreamVerification"
    }
  },
  {
    "__docId__": 136,
    "kind": "typedef",
    "name": "GatewayHelperServiceResponseHandler",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayHelperServiceResponseHandler",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This is called in order for the helper to handle a response. This is only\n             called if `shouldStreamEndpointResponse` returned `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "The response generated by the fetch\n                                                       request."
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerEndpointInformation"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "The information for the endpoint\n                                                       responsible of creating the route."
      },
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The server's incoming request\n                                                       information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server's response information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The function to call the next\n                                                       middleware."
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "GatewayHelperServiceResponseHandler"
    }
  },
  {
    "__docId__": 137,
    "kind": "typedef",
    "name": "GatewayHelperServiceErrorHandler",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayHelperServiceErrorHandler",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This is called in order for the helper to handle a fetch request error."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "The fetch request error."
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerEndpointInformation"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "The information for the endpoint\n                                                       responsible of creating the route."
      },
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The server's incoming request\n                                                       information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server's response information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The function to call the next\n                                                       middleware."
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "GatewayHelperServiceErrorHandler"
    }
  },
  {
    "__docId__": 138,
    "kind": "typedef",
    "name": "GatewayHelperService",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayHelperService",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "A service that can have specific methods the gateway will call in order to\n             modify requests, responses, handle errors, etc."
      }
    ],
    "properties": [
      {
        "nullable": true,
        "types": [
          "GatewayHelperServiceRequestReducer"
        ],
        "spread": false,
        "optional": false,
        "name": "reduceEndpointRequest",
        "description": "This is called in order to allow the helper to modify the information of a request that is\nabout the fired."
      },
      {
        "nullable": true,
        "types": [
          "GatewayHelperServiceResponseReducer"
        ],
        "spread": false,
        "optional": false,
        "name": "reduceEndpointResponse",
        "description": "This is called in order to allow the helper to modify the information of a response the\ngateway made."
      },
      {
        "nullable": true,
        "types": [
          "GatewayHelperServiceStreamVerification"
        ],
        "spread": false,
        "optional": false,
        "name": "shouldStreamEndpointResponse",
        "description": "This is called in order to allow the helper to decide whether a fetch request response should\nbe added to the server's response stream. This will only be called if the helper also\nimplements `handleEndpointResponse`."
      },
      {
        "nullable": true,
        "types": [
          "GatewayHelperServiceResponseHandler"
        ],
        "spread": false,
        "optional": false,
        "name": "handleEndpointResponse",
        "description": "This is called in order for the helper to handle a response. This is only called if\n`shouldStreamEndpointResponse` returned `false`."
      },
      {
        "nullable": true,
        "types": [
          "GatewayHelperServiceErrorHandler"
        ],
        "spread": false,
        "optional": false,
        "name": "handleEndpointError",
        "description": "This is called in order for the helper to handle a fetch request error."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "GatewayHelperService"
    }
  },
  {
    "__docId__": 139,
    "kind": "class",
    "name": "GatewayController",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~GatewayController",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/controllers/utils/gateway.js",
    "importStyle": "{GatewayController}",
    "description": "Geneters routes that will act as a gateway to an specific set of endpoints.",
    "lineNumber": 264,
    "params": [
      {
        "nullable": null,
        "types": [
          "GatewayConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "gatewayConfig",
        "description": "This is a configuration object very similar to\n                                                the one {@link APIClient} uses in order to\n                                                configure the endpoints; the controller uses it\n                                                to create the routes and to validate the HTTP\n                                                methods."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The route where the controller will be mounted."
      },
      {
        "nullable": null,
        "types": [
          "HTTP"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "To make the fetch requests on the routes."
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to configure how the gateway will\n                                                manage the requests and the responses."
      },
      {
        "nullable": true,
        "types": [
          "GatewayHelperService"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "helper",
        "description": "A service that can have specific methods the\n                                                gateway will call in order to modify requests,\n                                                responses, handle errors, etc."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 140,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 265,
    "undocument": true
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "_options",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_options",
    "access": "protected",
    "description": "The options to configure how the gateway will manage the requests and the responses.",
    "lineNumber": 272,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "GatewayControllerOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "_gatewayConfig",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_gatewayConfig",
    "access": "protected",
    "description": "The configuration for the API the controller will make requests to.",
    "lineNumber": 300,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "GatewayConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "_http",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_http",
    "access": "protected",
    "description": "A local reference for the `http` service.",
    "lineNumber": 309,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "HTTP"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "_allowedHTTPMethods",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_allowedHTTPMethods",
    "access": "protected",
    "description": "A list of the allowed HTTP methods an endpoint can have.",
    "lineNumber": 316,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "_endpoints",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_endpoints",
    "access": "protected",
    "description": "A flat dictionary of the gateway endpoints. The key is the path on the original\ndictionary (`this._gatewayConfig.gateway`) and the value is either the path (`string`)\nor the endpoint settings ({@link GatewayConfigurationEndpoint}).",
    "lineNumber": 334,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "_route",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_route",
    "access": "protected",
    "description": "The route where the controller is mounted.",
    "lineNumber": 341,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "_routeExpression",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_routeExpression",
    "access": "protected",
    "description": "A regular expression that will be used to remove the controller route from a request\npath. This will allow the main middleware to extract the path to where the request should\nbe made.",
    "lineNumber": 350,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "_routes",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_routes",
    "access": "protected",
    "description": "This is the list of routes the controller will define.",
    "lineNumber": 357,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array<GatewayControllerRoute>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "_apiClientConfiguration",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_apiClientConfiguration",
    "access": "protected",
    "description": "An {@link APIClient} configuration based on the controller routes.",
    "lineNumber": 364,
    "unknown": [
      {
        "tagName": "@Ignore",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "APIClientConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "_helperService",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_helperService",
    "access": "protected",
    "description": "A service that can have specific methods the gateway will call in order to modify\nrequests, responses, handle errors, etc.",
    "lineNumber": 371,
    "type": {
      "nullable": true,
      "types": [
        "GatewayHelperService"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "_helperServiceInfo",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_helperServiceInfo",
    "access": "protected",
    "description": "A dictionary of boolean flags that specify if a helper service has method. This is to\navoid checking if the helper is defined and if \"x method\" is a function. If no helper\nwas specified, the object will have all the flags set to `false`.",
    "lineNumber": 380,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "addRoutes",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#addRoutes",
    "access": "public",
    "description": "Defines all the routes on a given router.",
    "lineNumber": 389,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressRouter"
        ],
        "spread": false,
        "optional": false,
        "name": "router",
        "description": "The router where all the routes will be added."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "middlewares",
        "description": "A list of custom middlewares that will be added before\n                                        the one that makes the request."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExpressRouter"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 153,
    "kind": "get",
    "name": "endpointsForAPIClient",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#endpointsForAPIClient",
    "access": "public",
    "description": "An {@link APIClient} configuration based on the controller routes.",
    "lineNumber": 404,
    "type": {
      "nullable": null,
      "types": [
        "APIClientConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 154,
    "kind": "get",
    "name": "gatewayConfig",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#gatewayConfig",
    "access": "public",
    "description": "The configuration for the API the controller will make requests to.",
    "lineNumber": 411,
    "type": {
      "nullable": null,
      "types": [
        "GatewayConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 155,
    "kind": "get",
    "name": "options",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#options",
    "access": "public",
    "description": "The options to configure how the gateway will manage the requests and the responses.",
    "lineNumber": 418,
    "type": {
      "nullable": null,
      "types": [
        "GatewayControllerOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "_normalizeOptions",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_normalizeOptions",
    "access": "protected",
    "description": "Normalizes the options recevied by the controller:\n- Removes any trailing and leading slashes from the `root` path, if defined.",
    "lineNumber": 429,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "GatewayControllerOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to normalize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GatewayControllerOptions"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "_getNormalizedEndpoints",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_getNormalizedEndpoints",
    "access": "protected",
    "description": "Flattens all the endpoints from gateway configuration into a one level dictionary, where the\nkey are the paths they used to have on the original configuration, and the values are the\nendpoints definitions.",
    "lineNumber": 448,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "_createRouteExpression",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_createRouteExpression",
    "access": "protected",
    "description": "Creates a regular expression the main middleware will later use in order to remove the\ncontroller route from the request url. That's needed in order to build the URL where the\nrequest will be made.",
    "lineNumber": 464,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "_normalizeHTTPMethod",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_normalizeHTTPMethod",
    "access": "protected",
    "description": "This is a helper method used in order to validate if an HTTP method can be used in order to\ndefine a route in the router. If the given method is not on the list of allowed methods,\nit will be \"normalized\" to `all`. It also transforms the method into lower case.",
    "lineNumber": 480,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The method to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "_createEndpointRoutes",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_createEndpointRoutes",
    "access": "protected",
    "description": "Based on the information from the endpoints, this method will create the routes the\ncontroller will later add on a router.",
    "lineNumber": 493,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "Array<GatewayControllerRoute>"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If there's more than one endpoint using the same path with the same HTTP\n                method."
      }
    ],
    "params": []
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "_createAPIClientConfiguration",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_createAPIClientConfiguration",
    "access": "protected",
    "description": "Based on the controller options and the gateway endpoints, this method will create an API\nclient configuration that can be used to make requests to this controller.",
    "lineNumber": 554,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "APIClientConfiguration"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "_createHelperServiceInfo",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_createHelperServiceInfo",
    "access": "protected",
    "description": "Validates if a server helper exists and creates a dictionary with flags for all the methods\na helper can have; this will allow other methods to check if the \"helper method X\" is\navailable without having to check if the helper is defined and if \"method X\" is a function.",
    "lineNumber": 596,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "_addRoute",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_addRoute",
    "access": "protected",
    "description": "Adds a route on a given router.",
    "lineNumber": 633,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressRouter"
        ],
        "spread": false,
        "optional": false,
        "name": "router",
        "description": "The router where the route will be added."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The HTTP method for the route."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The path for the route."
      },
      {
        "nullable": null,
        "types": [
          "ExpressMiddleware"
        ],
        "spread": false,
        "optional": false,
        "name": "endpointMiddleware",
        "description": "The middleware that makes the request."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "middlewares",
        "description": "Extra middlewares to add before the main one."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExpressRouter"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "_getMiddleware",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_getMiddleware",
    "access": "protected",
    "description": "Generates a middleware that will make a request and stream back the response.",
    "lineNumber": 644,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "GatewayControllerEndpointInformation"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "The information for the enpdoint for\n                                                       which the middleware is being created."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "_reduceEndpointRequest",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_reduceEndpointRequest",
    "access": "protected",
    "description": "This method is called in order to reduce a fetch request information. It will check if a\nhelper is defined and allow it to do it, or fallback and return the given information.",
    "lineNumber": 737,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "GatewayControllerRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "The information for a request the\n                                                       controller will make."
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerEndpointInformation"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "The information for the endpoint\n                                                       responsible of creating the route."
      },
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The server's incoming request\n                                                       information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server's response information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The function to call the next\n                                                       middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GatewayControllerRequest"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "_reduceEndpointResponse",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_reduceEndpointResponse",
    "access": "protected",
    "description": "This method is called in order to reduce a fetch response information. It will check if a\nhelper is defined and allow it to do it, or fallback and return the given information.",
    "lineNumber": 759,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "The response generated by the fetch\n                                                       request."
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerEndpointInformation"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "The information for the endpoint\n                                                       responsible of creating the route."
      },
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The server's incoming request\n                                                       information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server's response information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The function to call the next\n                                                       middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "_shouldStreamEndpointResponse",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_shouldStreamEndpointResponse",
    "access": "protected",
    "description": "This method is called in order to validate if the main middleware should pipe the fetch\nresponse stream into the server's response or if the helper will handle the response.\nThis method will only call the helper if it implements both `shouldStreamEndpointResponse`\nand `handleEndpointResponse`",
    "lineNumber": 782,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "The response generated by the fetch\n                                                       request."
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerEndpointInformation"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "The information for the endpoint\n                                                       responsible of creating the route."
      },
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The server's incoming request\n                                                       information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server's response information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The function to call the next\n                                                       middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "_handleEndpointResponse",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_handleEndpointResponse",
    "access": "protected",
    "description": "This is called when the helper say that a fetch response shouldn't be sent, so the controller\nwill allow it to handle the response by itself.",
    "lineNumber": 806,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "The response generated by the fetch\n                                                       request."
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerEndpointInformation"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "The information for the endpoint\n                                                       responsible of creating the route."
      },
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The server's incoming request\n                                                       information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server's response information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The function to call the next\n                                                       middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "_handleEndpointError",
    "memberof": "src/controllers/utils/gateway.js~GatewayController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/controllers/utils/gateway.js~GatewayController#_handleEndpointError",
    "access": "protected",
    "description": "This method is called in order to handle a fetch request error. It will check if a\nhelper is defined and allow it to do it, or fallback and call the next middleware.",
    "lineNumber": 824,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "The fetch request error."
      },
      {
        "nullable": null,
        "types": [
          "GatewayControllerEndpointInformation"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint",
        "description": "The information for the endpoint\n                                                       responsible of creating the route."
      },
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The server's incoming request\n                                                       information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server's response information."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The function to call the next\n                                                       middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "gatewayController",
    "memberof": "src/controllers/utils/gateway.js",
    "static": true,
    "longname": "src/controllers/utils/gateway.js~gatewayController",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/controllers/utils/gateway.js",
    "importStyle": "{gatewayController}",
    "description": "This controller allows you to have gateway routes that actually make requests and respond with\nthe contents from an specified API.",
    "lineNumber": 840,
    "params": [
      {
        "nullable": null,
        "types": [
          "GatewayControllerCreatorOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to customize the controller."
      },
      {
        "nullable": null,
        "types": [
          "Function():Array"
        ],
        "spread": false,
        "optional": true,
        "name": "middlewares",
        "description": "This function can be used to add custom\n                                                       middlewares on the gateway routes. If\n                                                       implemented, it must return a list of\n                                                       middlewares when executed."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "ControllerCreator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/controllers/utils/index.js",
    "content": "const { gatewayController } = require('./gateway');\n\nmodule.exports = {\n  gatewayController,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/controllers/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/index.js",
    "content": "const Jimpex = require('./app');\nconst controllers = require('./controllers');\nconst middlewares = require('./middlewares');\nconst services = require('./services');\nconst { eventNames } = require('./constants');\nconst {\n  provider,\n  providerCreator,\n  providers,\n  controller,\n  controllerCreator,\n  middleware,\n  middlewareCreator,\n} = require('./utils/wrappers');\nconst utils = require('./utils/functions');\n\nmodule.exports = {\n  controller,\n  controllerCreator,\n  controllers,\n  middleware,\n  middlewareCreator,\n  middlewares,\n  provider,\n  providerCreator,\n  providers,\n  services,\n  eventNames,\n  utils,\n  Jimpex,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "file",
    "name": "src/middlewares/common/errorHandler.js",
    "content": "const ObjectUtils = require('wootils/shared/objectUtils');\nconst statuses = require('statuses');\nconst { middlewareCreator } = require('../../utils/wrappers');\n\n/**\n * @typedef {Object} ErrorHandlerDefaultOptions\n * @description Before reading the recevied information, these will be the settings for the\n *              response.\n * @property {string} [message='Oops! Something went wrong, please try again']\n * The error message the response will show.\n * @property {number} [status=500]\n * The HTTP status code for the response.\n */\n\n/**\n * @typedef {Object} ErrorHandlerOptions\n * @description The options for how to build the middleware responses.\n * @property {ErrorHandlerDefaultOptions} default The options to build the default response,\n *                                                before the middleware analyzes the recevied\n *                                                error.\n */\n\n/**\n * Provides the middleware to handle error responses for the app.\n */\nclass ErrorHandler {\n  /**\n   * Class constructor.\n   * @param {Logger}              appLogger        To log the received errors.\n   * @param {ResponsesBuilder}    responsesBuilder To generate the JSON response.\n   * @param {Boolean}             showErrors       If `false`, unknown errors will show a generic\n   *                                               message instead of real message. And if `true`,\n   *                                               it will not only show all kind of errors but it\n   *                                               will also show the error stack.\n   * @param {Class}               AppError         To validate if the received errors are known or\n   *                                               not.\n   * @param {ErrorHandlerOptions} [options={}]     Custom options to modify the middleware\n   *                                               behavior.\n   */\n  constructor(\n    appLogger,\n    responsesBuilder,\n    showErrors,\n    AppError,\n    options = {}\n  ) {\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {Logger}\n     * @access protected\n     * @ignore\n     */\n    this._appLogger = appLogger;\n    /**\n     * A local reference for the `responsesBuilder` service.\n     * @type {ResponsesBuilder}\n     * @access protected\n     * @ignore\n     */\n    this._responsesBuilder = responsesBuilder;\n    /**\n     * Whether or not to show unknown errors real messages.\n     * @type {Boolean}\n     * @access protected\n     * @ignore\n     */\n    this._showErrors = showErrors;\n    /**\n     * A local reference for the class the app uses to generate errors.\n     * @type {Class}\n     * @access protected\n     * @ignore\n     */\n    this._AppError = AppError;\n    /**\n     * These are the \"settings\" the middleware will use in order to display the errors.\n     * @type {ErrorHandlerOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = ObjectUtils.merge(\n      {\n        default: {\n          message: 'Oops! Something went wrong, please try again',\n          status: statuses['internal server error'],\n        },\n      },\n      options\n    );\n  }\n  /**\n   * Returns the Express middleware that shows the errors.\n   * @return {ExpressMiddleware}\n   */\n  middleware() {\n    return (err, req, res, next) => {\n      // If the middleware received an error...\n      if (err) {\n        // Define the error response basic template.\n        let data = {\n          error: true,\n          message: this._options.default.message,\n        };\n        // Define the error response default status.\n        let { status } = this._options.default;\n        // Validate if the error is known or not.\n        const knownError = err instanceof this._AppError;\n        // If the `showErrors` flag is enabled or the error is a known error...\n        if (this._showErrors || knownError) {\n          // ...set the error real message on the response.\n          data.message = err.message;\n          // If the error type is known...\n          if (knownError) {\n            // Try to get any extra information that should be included on the response.\n            data = Object.assign(data, err.response);\n            // Try to obtain the response status from the error\n            status = err.status || statuses['Bad Request'];\n          }\n          // If the `showErrors` flag is enabled...\n          if (this._showErrors) {\n            // Get the error stack and format it into an `Array`.\n            const stack = err.stack.split('\\n').map((line) => line.trim());\n            //  Add the stack to the response.\n            data.stack = stack;\n            // Remove the first item of the stack, since it's the same as the message.\n            stack.splice(0, 1);\n            // Log the error.\n            this._appLogger.error(`ERROR: ${err.message}`);\n            this._appLogger.info(stack);\n          }\n        }\n        // Send the response.\n        this._responsesBuilder.json(res, data, status);\n      } else {\n        // ...otherwise, move to the next middleware.\n        next();\n      }\n    };\n  }\n  /**\n   * The options used to customize the middleware behavior.\n   * @return {ErrorHandlerOptions}\n   */\n  get options() {\n    return this._options;\n  }\n}\n/**\n * Generates a middleware that show responses for unhandled errors thrown by the app.\n * @type {MiddlewareCreator}\n * @param {ErrorHandlerOptions} [options] Custom options to modify the middleware behavior.\n */\nconst errorHandler = middlewareCreator((options) => (app) => {\n  const showErrors = app.get('appConfiguration').get('debug.showErrors') === true;\n  return new ErrorHandler(\n    app.get('appLogger'),\n    app.get('responsesBuilder'),\n    showErrors,\n    app.get('AppError'),\n    options\n  )\n  .middleware();\n});\n\nmodule.exports = {\n  ErrorHandler,\n  errorHandler,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/middlewares/common/errorHandler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 174,
    "kind": "typedef",
    "name": "ErrorHandlerDefaultOptions",
    "memberof": "src/middlewares/common/errorHandler.js",
    "static": true,
    "longname": "src/middlewares/common/errorHandler.js~ErrorHandlerDefaultOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "Before reading the recevied information, these will be the settings for the\n             response."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'Oops! Something went wrong, please try again'",
        "defaultRaw": "'Oops! Something went wrong, please try again'",
        "name": "message",
        "description": "The error message the response will show."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "500",
        "defaultRaw": 500,
        "name": "status",
        "description": "The HTTP status code for the response."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ErrorHandlerDefaultOptions"
    }
  },
  {
    "__docId__": 175,
    "kind": "typedef",
    "name": "ErrorHandlerOptions",
    "memberof": "src/middlewares/common/errorHandler.js",
    "static": true,
    "longname": "src/middlewares/common/errorHandler.js~ErrorHandlerOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "The options for how to build the middleware responses."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "ErrorHandlerDefaultOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "default",
        "description": "The options to build the default response,\n                                               before the middleware analyzes the recevied\n                                               error."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ErrorHandlerOptions"
    }
  },
  {
    "__docId__": 176,
    "kind": "class",
    "name": "ErrorHandler",
    "memberof": "src/middlewares/common/errorHandler.js",
    "static": true,
    "longname": "src/middlewares/common/errorHandler.js~ErrorHandler",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/middlewares/common/errorHandler.js",
    "importStyle": "{ErrorHandler}",
    "description": "Provides the middleware to handle error responses for the app.",
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 177,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/middlewares/common/errorHandler.js~ErrorHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/common/errorHandler.js~ErrorHandler#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "To log the received errors."
      },
      {
        "nullable": null,
        "types": [
          "ResponsesBuilder"
        ],
        "spread": false,
        "optional": false,
        "name": "responsesBuilder",
        "description": "To generate the JSON response."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "showErrors",
        "description": "If `false`, unknown errors will show a generic\n                                              message instead of real message. And if `true`,\n                                              it will not only show all kind of errors but it\n                                              will also show the error stack."
      },
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "AppError",
        "description": "To validate if the received errors are known or\n                                              not."
      },
      {
        "nullable": null,
        "types": [
          "ErrorHandlerOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Custom options to modify the middleware\n                                              behavior."
      }
    ]
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "_appLogger",
    "memberof": "src/middlewares/common/errorHandler.js~ErrorHandler",
    "static": false,
    "longname": "src/middlewares/common/errorHandler.js~ErrorHandler#_appLogger",
    "access": "protected",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 53,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "_responsesBuilder",
    "memberof": "src/middlewares/common/errorHandler.js~ErrorHandler",
    "static": false,
    "longname": "src/middlewares/common/errorHandler.js~ErrorHandler#_responsesBuilder",
    "access": "protected",
    "description": "A local reference for the `responsesBuilder` service.",
    "lineNumber": 60,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ResponsesBuilder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "_showErrors",
    "memberof": "src/middlewares/common/errorHandler.js~ErrorHandler",
    "static": false,
    "longname": "src/middlewares/common/errorHandler.js~ErrorHandler#_showErrors",
    "access": "protected",
    "description": "Whether or not to show unknown errors real messages.",
    "lineNumber": 67,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "_AppError",
    "memberof": "src/middlewares/common/errorHandler.js~ErrorHandler",
    "static": false,
    "longname": "src/middlewares/common/errorHandler.js~ErrorHandler#_AppError",
    "access": "protected",
    "description": "A local reference for the class the app uses to generate errors.",
    "lineNumber": 74,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "_options",
    "memberof": "src/middlewares/common/errorHandler.js~ErrorHandler",
    "static": false,
    "longname": "src/middlewares/common/errorHandler.js~ErrorHandler#_options",
    "access": "protected",
    "description": "These are the \"settings\" the middleware will use in order to display the errors.",
    "lineNumber": 81,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ErrorHandlerOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "middleware",
    "memberof": "src/middlewares/common/errorHandler.js~ErrorHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/common/errorHandler.js~ErrorHandler#middleware",
    "access": "public",
    "description": "Returns the Express middleware that shows the errors.",
    "lineNumber": 95,
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 184,
    "kind": "get",
    "name": "options",
    "memberof": "src/middlewares/common/errorHandler.js~ErrorHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/common/errorHandler.js~ErrorHandler#options",
    "access": "public",
    "description": "The options used to customize the middleware behavior.",
    "lineNumber": 144,
    "return": {
      "nullable": null,
      "types": [
        "ErrorHandlerOptions"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "errorHandler",
    "memberof": "src/middlewares/common/errorHandler.js",
    "static": true,
    "longname": "src/middlewares/common/errorHandler.js~errorHandler",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/middlewares/common/errorHandler.js",
    "importStyle": "{errorHandler}",
    "description": "Generates a middleware that show responses for unhandled errors thrown by the app.",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "ErrorHandlerOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Custom options to modify the middleware behavior."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "MiddlewareCreator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/middlewares/common/forceHTTPS.js",
    "content": "const { middlewareCreator } = require('../../utils/wrappers');\n/**\n * Force all the app traffice to be through HTTPS.\n */\nclass ForceHTTPS {\n  /**\n   * Class constructor.\n   * @param {Array} [ignoredRoutes=[/^\\/service\\//]] A list of regular expressions to match routes\n   *                                                 that should be ignored.\n   */\n  constructor(ignoredRoutes = [/^\\/service\\//]) {\n    /**\n     * A list of regular expressions to match routes that should be ignored.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._ignoredRoutes = ignoredRoutes;\n  }\n  /**\n   * Returns the Express middleware that forces the redirection to HTTPS.\n   * @return {ExpressMiddleware}\n   */\n  middleware() {\n    return (req, res, next) => {\n      if (\n        !req.secure &&\n        req.get('X-Forwarded-Proto') !== 'https' &&\n        !this._ignoredRoutes.some((expression) => expression.test(req.originalUrl))\n      ) {\n        const host = req.get('Host');\n        res.redirect(`https://${host}${req.url}`);\n      } else {\n        next();\n      }\n    };\n  }\n  /**\n   * A list of regular expressions to match routes that should be ignored.\n   * @type {Array}\n   */\n  get ignoredRoutes() {\n    return this._ignoredRoutes.slice();\n  }\n}\n/**\n * A middleware to force HTTPS redirections to all the routes.\n * @type {MiddlewareCreator}\n * @param {Array} ignoredRoutes A list of regular expressions to match routes that should be\n *                              ignored.\n */\nconst forceHTTPS = middlewareCreator((ignoredRoutes) => (app) => (\n  app.get('appConfiguration').get('forceHTTPS') ?\n    new ForceHTTPS(ignoredRoutes).middleware() :\n    null\n));\n\nmodule.exports = {\n  ForceHTTPS,\n  forceHTTPS,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/middlewares/common/forceHTTPS.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "class",
    "name": "ForceHTTPS",
    "memberof": "src/middlewares/common/forceHTTPS.js",
    "static": true,
    "longname": "src/middlewares/common/forceHTTPS.js~ForceHTTPS",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/middlewares/common/forceHTTPS.js",
    "importStyle": "{ForceHTTPS}",
    "description": "Force all the app traffice to be through HTTPS.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 188,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/middlewares/common/forceHTTPS.js~ForceHTTPS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/common/forceHTTPS.js~ForceHTTPS#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[/^\\/service\\//]",
        "defaultRaw": "[/^\\/service\\//]",
        "name": "ignoredRoutes",
        "description": "A list of regular expressions to match routes\n                                                that should be ignored."
      }
    ]
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "_ignoredRoutes",
    "memberof": "src/middlewares/common/forceHTTPS.js~ForceHTTPS",
    "static": false,
    "longname": "src/middlewares/common/forceHTTPS.js~ForceHTTPS#_ignoredRoutes",
    "access": "protected",
    "description": "A list of regular expressions to match routes that should be ignored.",
    "lineNumber": 18,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "middleware",
    "memberof": "src/middlewares/common/forceHTTPS.js~ForceHTTPS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/common/forceHTTPS.js~ForceHTTPS#middleware",
    "access": "public",
    "description": "Returns the Express middleware that forces the redirection to HTTPS.",
    "lineNumber": 24,
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 191,
    "kind": "get",
    "name": "ignoredRoutes",
    "memberof": "src/middlewares/common/forceHTTPS.js~ForceHTTPS",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/common/forceHTTPS.js~ForceHTTPS#ignoredRoutes",
    "access": "public",
    "description": "A list of regular expressions to match routes that should be ignored.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "forceHTTPS",
    "memberof": "src/middlewares/common/forceHTTPS.js",
    "static": true,
    "longname": "src/middlewares/common/forceHTTPS.js~forceHTTPS",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/middlewares/common/forceHTTPS.js",
    "importStyle": "{forceHTTPS}",
    "description": "A middleware to force HTTPS redirections to all the routes.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "ignoredRoutes",
        "description": "A list of regular expressions to match routes that should be\n                             ignored."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "MiddlewareCreator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "src/middlewares/common/index.js",
    "content": "const { errorHandler } = require('./errorHandler');\nconst { forceHTTPS } = require('./forceHTTPS');\n\nmodule.exports = {\n  errorHandler,\n  forceHTTPS,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/middlewares/common/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/middlewares/html/fastHTML.js",
    "content": "const mime = require('mime');\nconst ObjectUtils = require('wootils/shared/objectUtils');\nconst { eventNames } = require('../../constants');\nconst { middlewareCreator } = require('../../utils/wrappers');\nconst { createRouteExpression, removeSlashes } = require('../../utils/functions');\n\n/**\n * @typedef {Object} FastHTMLOptions\n * @description The options to customize the behavior of the middleware.\n * @property {string}  [file='index.html'] The name of the file the middleware will serve. It can\n *                                         get overwritten if {@link FastHTML} receives an\n *                                         {@link HTMLGenerator}, in that case, the file will be\n *                                         obtained from that service.\n * @property {Array}   [ignore]            A list of regular expressions to match requests paths\n *                                         that should be ignored.\n * @property {boolean} [useAppRoutes=true] If `true`, {@link FastHTML} will get the list of all\n *                                         routes controlled by {@link Jimpex} and will use them\n *                                         to validate the incoming requests (in addition to\n *                                         `ignore`): If a request URL doesn't match with any of\n *                                         the controlled routes, it will show the HTML file.\n */\n\n/**\n * @typedef {Object} FastHTMLMiddlewareOptions\n * @extends {FastHTMLOptions}\n * @description The only difference with {@link FastHTMLOptions} is that in this options, you can\n *              specify an {@link HTMLGenerator} service name.\n * @property {string} [htmlGenerator='htmlGenerator'] The name of a {@link HTMLGenerator} service\n *                                                    for the middleware to use.\n */\n\n/**\n * It's common for an app to show an HTML view when no route was able to handle a request, so the\n * idea behind this middleware is to avoid going to every middleware and controller and just\n * specify that if the request is not for a route handled by a controller, just serve the HTML\n * and avoid processing unnecessary data.\n *\n * A simple example: The app has a route `/backend` that a frontend uses to get information.\n * This middleware can be used to only allow the execution of middlewares and controllers when\n * the request route is for `/backend`.\n *\n * **Disclaimer**: Managing statics files with Express is not a best practice, but there are\n * scenarios where there is not other choice.\n */\nclass FastHTML {\n  /**\n   * @param {EventsHub}       events               To listen for the {@link Jimpex} event\n   *                                               triggered after the app starts. The event is\n   *                                               used to get all the controlled routes, in case\n   *                                               the `useAppRoutes` option is set to true.\n   * @param {SendFile}        sendFile             To send the HTML file response.\n   * @param {FastHTMLOptions} [options={}]         To customize the middleware behavior.\n   * @param {?HTMLGenerator}  [htmlGenerator=null] If used, the file to serve will be the one\n   *                                               generated by that service.\n   */\n  constructor(events, sendFile, options = {}, htmlGenerator = null) {\n    /**\n     * A local reference for the `events` service.\n     * @type {EventsHub}\n     * @access protected\n     * @ignore\n     */\n    this._events = events;\n    /**\n     * A local reference for the `sendFile` service.\n     * @type {SendFile}\n     * @access protected\n     * @ignore\n     */\n    this._sendFile = sendFile;\n    /**\n     * If specified, a reference for a service that generates HTML files.\n     * @type {?HTMLGenerator}\n     * @access protected\n     * @ignore\n     */\n    this._htmlGenerator = htmlGenerator;\n    /**\n     * The options that tell the middleware which routes should be ignored and which is the file\n     * to serve.\n     * @type {FastHTMLOptions}\n     */\n    this._options = this._normalizeOptions(ObjectUtils.merge(\n      {\n        file: 'index.html',\n        ignore: options.ignore || [/\\.ico$/i],\n        useAppRoutes: true,\n      },\n      options\n    ));\n    /**\n     * Whether or not the file is ready to be served, in case there's an\n     * {@link HTMLGenerator}. If the service is used, the HTML is generated after the app starts,\n     * so the middleware will have to wait for it to be ready before being able to serve it.\n     * @type {boolean}\n     * @access protected\n     * @ignore\n     */\n    this._ready = !this._htmlGenerator;\n    /**\n     * A list of regular expression that match the routes controlled by the app. This is in case\n     * the `useAppRoutes` option is set to `true`; when the app gets started, an event listener\n     * will obtain all the top controlled routes, create regular expressions and save them on\n     * this property.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._routeExpressions = [];\n    /**\n     * If the option to use the controlled routes is set to `true`, setup the event listener that\n     * gets all the routes when the app is started.\n     */\n    if (this._options.useAppRoutes) {\n      this._setupEvents();\n    }\n  }\n  /**\n   * Returns the Express middleware that validates the routes and serves the HTML file if necessary.\n   * @return {ExpressMiddleware}\n   */\n  middleware() {\n    return (req, res, next) => {\n      if (this._shouldIgnore(req.originalUrl)) {\n        // If the route should be ignored, move to the next middleware.\n        next();\n      } else if (!this._ready) {\n        // If there's an HTMLGenerator and is not ready, wait for it...\n        this._htmlGenerator.whenReady()\n        .then(() => {\n          // Change the flag to prevent the next execution to enter here.\n          this._ready = true;\n          // Serve the file.\n          this._sendHTML(res, next);\n        })\n        .catch((error) => {\n          // Something went wrong while generating the file, send the error to the error handler.\n          next(error);\n        });\n      } else {\n        // The route is not ignored and the file is ready to be served, so do it.\n        this._sendHTML(res, next);\n      }\n    };\n  }\n  /**\n   * The options that tell the middleware which routes should be ignored and which is the file\n   * to serve.\n   * @type {FastHTMLOptions}\n   */\n  get options() {\n    return Object.freeze(this._options);\n  }\n  /**\n   * Normalizes and validates the options recevied on the constructor.\n   * If the class is using a {@link HTMLGenerator} service, the method will overwrite the `file`\n   * option with the result of the service's `getFile()` method.\n   * @param {FastHTMLOptions} options The received options.\n   * @return {FastHTMLOptions}\n   * @throws {Error} If no file and no {@link HTMLGenerator} service are specified.\n   * @throws {Error} If no routes to ignore are specified and `useAppRoutes` is set to `false`.\n   * @access protected\n   * @ignore\n   */\n  _normalizeOptions(options) {\n    if (!options.file && !this._htmlGenerator) {\n      throw new Error('You need to either define an HTMLGenerator service or a file');\n    } else if (!options.ignore.length && !options.useAppRoutes) {\n      throw new Error(\n        'You need to either define a list of routes to ignore or use `useAppRoutes`'\n      );\n    }\n\n    return this._htmlGenerator ?\n      Object.assign({}, options, { file: this._htmlGenerator.getFile() }) :\n      options;\n  }\n  /**\n   * Adds the event listener that obtains the controlled routes when `useAppRoutes` is set to\n   * `true`.\n   * @access protected\n   * @ignore\n   */\n  _setupEvents() {\n    this._events.once(eventNames.afterStart, ({ routes }) => {\n      // Re generate the list of expressions...\n      this._routeExpressions = routes\n      // Remove leading and trailing slashes.\n      .map((route) => removeSlashes(route).trim())\n      // Filter empty routes (in case they were for `/`).\n      .filter((route) => route !== '')\n      // Remove repeated routes.\n      .reduce((unique, route) => (unique.includes(route) ? unique : [...unique, route]), [])\n      // Generate regular expressions for each route.\n      .map((route) => createRouteExpression(route));\n    });\n  }\n  /**\n   * Checks whether a route should be ignored or not. The method checks first against the `ignore`\n   * option, and then against the controlled routes (if `useAppRoutes` is `false`, the list\n   * will be empty).\n   * @param {string} route The route to validate.\n   * @return {boolean}\n   * @access protected\n   * @ignore\n   */\n  _shouldIgnore(route) {\n    return this._options.ignore.some((expression) => expression.test(route)) ||\n      this._routeExpressions.some((expression) => expression.test(route));\n  }\n  /**\n   * Serves the file on the response.\n   * @param {ExpressResponse} res  The server response.\n   * @param {ExpressNext}     next The function to call the next middleware.\n   * @access protected\n   * @ignore\n   */\n  _sendHTML(res, next) {\n    res.setHeader('Content-Type', mime.getType('html'));\n    this._sendFile(res, this._options.file, next);\n  }\n}\n/**\n * A middleware for filtering routes so you can serve an HTML before the app gets to evaluate\n * whether there's a controller for the requested route or not. For more information about the\n * reason of this middleware, please read the description of {@link FastHTML}.\n * @type {MiddlewareCreator}\n * @param {FastHTMLOptions|FastHTMLMiddlewareOptions} [options={}] The options to customize the\n *                                                                 middleware behavior.\n */\nconst fastHTML = middlewareCreator((options = {}) => (app) => {\n  const htmlGeneratorServiceName = typeof options.htmlGenerator === 'undefined' ?\n    'htmlGenerator' :\n    options.htmlGenerator;\n  return (\n    new FastHTML(\n      app.get('events'),\n      app.get('sendFile'),\n      options,\n      htmlGeneratorServiceName ? app.try(htmlGeneratorServiceName) : null\n    )\n  ).middleware();\n});\n\nmodule.exports = {\n  FastHTML,\n  fastHTML,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/middlewares/html/fastHTML.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "typedef",
    "name": "FastHTMLOptions",
    "memberof": "src/middlewares/html/fastHTML.js",
    "static": true,
    "longname": "src/middlewares/html/fastHTML.js~FastHTMLOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "The options to customize the behavior of the middleware."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'index.html'",
        "defaultRaw": "'index.html'",
        "name": "file",
        "description": "The name of the file the middleware will serve. It can\n                                        get overwritten if {@link FastHTML} receives an\n                                        {@link HTMLGenerator}, in that case, the file will be\n                                        obtained from that service."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "ignore",
        "description": "A list of regular expressions to match requests paths\n                                        that should be ignored."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "useAppRoutes",
        "description": "If `true`, {@link FastHTML} will get the list of all\n                                        routes controlled by {@link Jimpex} and will use them\n                                        to validate the incoming requests (in addition to\n                                        `ignore`): If a request URL doesn't match with any of\n                                        the controlled routes, it will show the HTML file."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "FastHTMLOptions"
    }
  },
  {
    "__docId__": 196,
    "kind": "typedef",
    "name": "FastHTMLMiddlewareOptions",
    "memberof": "src/middlewares/html/fastHTML.js",
    "static": true,
    "longname": "src/middlewares/html/fastHTML.js~FastHTMLMiddlewareOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "{FastHTMLOptions}"
      },
      {
        "tagName": "@description",
        "tagValue": "The only difference with {@link FastHTMLOptions} is that in this options, you can\n             specify an {@link HTMLGenerator} service name."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'htmlGenerator'",
        "defaultRaw": "'htmlGenerator'",
        "name": "htmlGenerator",
        "description": "The name of a {@link HTMLGenerator} service\n                                                   for the middleware to use."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "FastHTMLMiddlewareOptions"
    }
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "FastHTML",
    "memberof": "src/middlewares/html/fastHTML.js",
    "static": true,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/middlewares/html/fastHTML.js",
    "importStyle": "{FastHTML}",
    "description": "It's common for an app to show an HTML view when no route was able to handle a request, so the\nidea behind this middleware is to avoid going to every middleware and controller and just\nspecify that if the request is not for a route handled by a controller, just serve the HTML\nand avoid processing unnecessary data.\n\nA simple example: The app has a route `/backend` that a frontend uses to get information.\nThis middleware can be used to only allow the execution of middlewares and controllers when\nthe request route is for `/backend`.\n\n**Disclaimer**: Managing statics files with Express is not a best practice, but there are\nscenarios where there is not other choice.",
    "lineNumber": 45,
    "interface": false
  },
  {
    "__docId__": 198,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventsHub"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To listen for the {@link Jimpex} event\n                                              triggered after the app starts. The event is\n                                              used to get all the controlled routes, in case\n                                              the `useAppRoutes` option is set to true."
      },
      {
        "nullable": null,
        "types": [
          "SendFile"
        ],
        "spread": false,
        "optional": false,
        "name": "sendFile",
        "description": "To send the HTML file response."
      },
      {
        "nullable": null,
        "types": [
          "FastHTMLOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "To customize the middleware behavior."
      },
      {
        "nullable": true,
        "types": [
          "HTMLGenerator"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "htmlGenerator",
        "description": "If used, the file to serve will be the one\n                                              generated by that service."
      }
    ]
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "_events",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#_events",
    "access": "protected",
    "description": "A local reference for the `events` service.",
    "lineNumber": 63,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "EventsHub"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "_sendFile",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#_sendFile",
    "access": "protected",
    "description": "A local reference for the `sendFile` service.",
    "lineNumber": 70,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "SendFile"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "_htmlGenerator",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#_htmlGenerator",
    "access": "protected",
    "description": "If specified, a reference for a service that generates HTML files.",
    "lineNumber": 77,
    "ignore": true,
    "type": {
      "nullable": true,
      "types": [
        "HTMLGenerator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "_options",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#_options",
    "access": "private",
    "description": "The options that tell the middleware which routes should be ignored and which is the file\nto serve.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "FastHTMLOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "_ready",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#_ready",
    "access": "protected",
    "description": "Whether or not the file is ready to be served, in case there's an\n{@link HTMLGenerator}. If the service is used, the HTML is generated after the app starts,\nso the middleware will have to wait for it to be ready before being able to serve it.",
    "lineNumber": 99,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "_routeExpressions",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#_routeExpressions",
    "access": "protected",
    "description": "A list of regular expression that match the routes controlled by the app. This is in case\nthe `useAppRoutes` option is set to `true`; when the app gets started, an event listener\nwill obtain all the top controlled routes, create regular expressions and save them on\nthis property.",
    "lineNumber": 109,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "middleware",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#middleware",
    "access": "public",
    "description": "Returns the Express middleware that validates the routes and serves the HTML file if necessary.",
    "lineNumber": 122,
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "get",
    "name": "options",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#options",
    "access": "public",
    "description": "The options that tell the middleware which routes should be ignored and which is the file\nto serve.",
    "lineNumber": 151,
    "type": {
      "nullable": null,
      "types": [
        "FastHTMLOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "_normalizeOptions",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#_normalizeOptions",
    "access": "protected",
    "description": "Normalizes and validates the options recevied on the constructor.\nIf the class is using a {@link HTMLGenerator} service, the method will overwrite the `file`\noption with the result of the service's `getFile()` method.",
    "lineNumber": 165,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "FastHTMLOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The received options."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FastHTMLOptions"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If no file and no {@link HTMLGenerator} service are specified."
      },
      {
        "types": [
          "Error"
        ],
        "description": "If no routes to ignore are specified and `useAppRoutes` is set to `false`."
      }
    ]
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "_setupEvents",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#_setupEvents",
    "access": "protected",
    "description": "Adds the event listener that obtains the controlled routes when `useAppRoutes` is set to\n`true`.",
    "lineNumber": 184,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "_shouldIgnore",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#_shouldIgnore",
    "access": "protected",
    "description": "Checks whether a route should be ignored or not. The method checks first against the `ignore`\noption, and then against the controlled routes (if `useAppRoutes` is `false`, the list\nwill be empty).",
    "lineNumber": 207,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The route to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "_sendHTML",
    "memberof": "src/middlewares/html/fastHTML.js~FastHTML",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/html/fastHTML.js~FastHTML#_sendHTML",
    "access": "protected",
    "description": "Serves the file on the response.",
    "lineNumber": 218,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The function to call the next middleware."
      }
    ],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "fastHTML",
    "memberof": "src/middlewares/html/fastHTML.js",
    "static": true,
    "longname": "src/middlewares/html/fastHTML.js~fastHTML",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/middlewares/html/fastHTML.js",
    "importStyle": "{fastHTML}",
    "description": "A middleware for filtering routes so you can serve an HTML before the app gets to evaluate\nwhether there's a controller for the requested route or not. For more information about the\nreason of this middleware, please read the description of {@link FastHTML}.",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "FastHTMLOptions",
          "FastHTMLMiddlewareOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to customize the\n                                                                middleware behavior."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "MiddlewareCreator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "src/middlewares/html/index.js",
    "content": "const { fastHTML } = require('./fastHTML');\nconst { showHTML } = require('./showHTML');\n\nmodule.exports = {\n  fastHTML,\n  showHTML,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/middlewares/html/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "src/middlewares/html/showHTML.js",
    "content": "const mime = require('mime');\nconst { middlewareCreator } = require('../../utils/wrappers');\n/**\n * @typedef {Object} ShowHTMLMiddlewareOptions\n * @description A set options to customize the middleware behavior.\n * @param {string} [file='index.html']             The name of the file the middleware will serve.\n * @param {string} [htmlGenerator='htmlGenerator'] The name of a {@link HTMLGenerator} service for\n *                                                 the middleware to use. If the service is\n *                                                 available, the value of `file` will be\n *                                                 overwritten for the file generated by the\n *                                                 service.\n */\n\n/**\n * A very simple middleware service to send an HTML on a server response. The special _'feature'_ of\n * this service is that it can be hooked up to an `HTMLGenerator` service and it will automatically\n * server the file generated by it.\n */\nclass ShowHTML {\n  /**\n   * Class constructor.\n   * @param {SendFile}      sendFile             Necessary to server the HTML file.\n   * @param {string}        [file='index.html']  The name of the file it will serve. If\n   *                                             `htmlGenerator` is specified, this will be\n   *                                             overwritten with the name of the file generated by\n   *                                             that service.\n   * @param {HTMLGenerator} [htmlGenerator=null] If used, the file to server will be the one\n   *                                             generated by that service.\n   */\n  constructor(sendFile, file = 'index.html', htmlGenerator = null) {\n    /**\n     * A local reference for the `sendFile` service.\n     * @type {SendFile}\n     * @access protected\n     * @ignore\n     */\n    this._sendFile = sendFile;\n    /**\n     * The name of the file to serve.\n     * @type {string}\n     * @access protected\n     * @ignore\n     */\n    this._file = file;\n    /**\n     * If specified, a reference for a service that generates HTML files.\n     * @type {HTMLGenerator}\n     * @access protected\n     * @ignore\n     */\n    this._htmlGenerator = htmlGenerator;\n    /**\n     * Whether or not the file is ready to be served.\n     * @type {Boolean}\n     * @access protected\n     * @ignore\n     */\n    this._ready = true;\n    // If an `HTMLGenerator` service was specified...\n    if (this._htmlGenerator) {\n      // ...get the name of the file from that service.\n      this._file = this._htmlGenerator.getFile();\n      /**\n       * Mark the `_ready` flag as `false` as this service needs to wait for the generator to\n       * create the file.\n       */\n      this._ready = false;\n    }\n  }\n  /**\n   * Returns the Express middleware that serves the HTML file.\n   * @return {ExpressMiddleware}\n   */\n  middleware() {\n    return (req, res, next) => {\n      // If `_ready` is `false`\n      if (!this._ready) {\n        /**\n         * It means that it's using the `HTMLGenerator` service, so it\n         * calls the method that will notify this service when the file has been created and is\n         * ready to be loaded.\n         */\n        this._htmlGenerator.whenReady()\n        .then(() => {\n          // The file is ready to use, so mark the `_ready` flag as `true`.\n          this._ready = true;\n          // Serve the file.\n          this._sendHTML(res, next);\n        })\n        .catch((error) => {\n          // Something happened while generating the file, send the error the next middlware.\n          next(error);\n        });\n      } else {\n        /**\n         * If `_ready` is `true` it means that the `HTMLGenerator` has already created the file on\n         * a previous request or it was never specified, so just serve the file.\n         */\n        this._sendHTML(res, next);\n      }\n    };\n  }\n  /**\n   * The name of the file to serve.\n   * @type {string}\n   */\n  get file() {\n    return this._file;\n  }\n  /**\n   * Serves the file on the response.\n   * @param {ExpressResponse} res  The server response.\n   * @param {ExpressNext}     next The functino to call the next middleware.\n   * @ignore\n   * @access protected\n   */\n  _sendHTML(res, next) {\n    res.setHeader('Content-Type', mime.getType('html'));\n    return this._sendFile(res, this._file, next);\n  }\n}\n/**\n * A middleware for showing an `index.html` file.\n * @type {MiddlewareCreator}\n * @param {ShowHTMLMiddlewareOptions} [options] The options to customize the middleware behavior.\n */\nconst showHTML = middlewareCreator((options = {}) => (app) => {\n  const htmlGeneratorServiceName = typeof options.htmlGenerator === 'undefined' ?\n    'htmlGenerator' :\n    options.htmlGenerator;\n\n  return (\n    new ShowHTML(\n      app.get('sendFile'),\n      options.file,\n      htmlGeneratorServiceName ? app.try(htmlGeneratorServiceName) : null\n    )\n  ).middleware();\n});\n\nmodule.exports = {\n  ShowHTML,\n  showHTML,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/middlewares/html/showHTML.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "typedef",
    "name": "ShowHTMLMiddlewareOptions",
    "memberof": "src/middlewares/html/showHTML.js",
    "static": true,
    "longname": "src/middlewares/html/showHTML.js~ShowHTMLMiddlewareOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "A set options to customize the middleware behavior."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'index.html'",
        "defaultRaw": "'index.html'",
        "name": "file",
        "description": "The name of the file the middleware will serve."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'htmlGenerator'",
        "defaultRaw": "'htmlGenerator'",
        "name": "htmlGenerator",
        "description": "The name of a {@link HTMLGenerator} service for\n                                                the middleware to use. If the service is\n                                                available, the value of `file` will be\n                                                overwritten for the file generated by the\n                                                service."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ShowHTMLMiddlewareOptions"
    }
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "ShowHTML",
    "memberof": "src/middlewares/html/showHTML.js",
    "static": true,
    "longname": "src/middlewares/html/showHTML.js~ShowHTML",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/middlewares/html/showHTML.js",
    "importStyle": "{ShowHTML}",
    "description": "A very simple middleware service to send an HTML on a server response. The special _'feature'_ of\nthis service is that it can be hooked up to an `HTMLGenerator` service and it will automatically\nserver the file generated by it.",
    "lineNumber": 19,
    "interface": false
  },
  {
    "__docId__": 218,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/middlewares/html/showHTML.js~ShowHTML",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/html/showHTML.js~ShowHTML#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "SendFile"
        ],
        "spread": false,
        "optional": false,
        "name": "sendFile",
        "description": "Necessary to server the HTML file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'index.html'",
        "defaultRaw": "'index.html'",
        "name": "file",
        "description": "The name of the file it will serve. If\n                                            `htmlGenerator` is specified, this will be\n                                            overwritten with the name of the file generated by\n                                            that service."
      },
      {
        "nullable": null,
        "types": [
          "HTMLGenerator"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "htmlGenerator",
        "description": "If used, the file to server will be the one\n                                            generated by that service."
      }
    ]
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "_sendFile",
    "memberof": "src/middlewares/html/showHTML.js~ShowHTML",
    "static": false,
    "longname": "src/middlewares/html/showHTML.js~ShowHTML#_sendFile",
    "access": "protected",
    "description": "A local reference for the `sendFile` service.",
    "lineNumber": 37,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "SendFile"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "_file",
    "memberof": "src/middlewares/html/showHTML.js~ShowHTML",
    "static": false,
    "longname": "src/middlewares/html/showHTML.js~ShowHTML#_file",
    "access": "protected",
    "description": "The name of the file to serve.",
    "lineNumber": 44,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "_htmlGenerator",
    "memberof": "src/middlewares/html/showHTML.js~ShowHTML",
    "static": false,
    "longname": "src/middlewares/html/showHTML.js~ShowHTML#_htmlGenerator",
    "access": "protected",
    "description": "If specified, a reference for a service that generates HTML files.",
    "lineNumber": 51,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "HTMLGenerator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "_ready",
    "memberof": "src/middlewares/html/showHTML.js~ShowHTML",
    "static": false,
    "longname": "src/middlewares/html/showHTML.js~ShowHTML#_ready",
    "access": "protected",
    "description": "Whether or not the file is ready to be served.",
    "lineNumber": 58,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "middleware",
    "memberof": "src/middlewares/html/showHTML.js~ShowHTML",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/html/showHTML.js~ShowHTML#middleware",
    "access": "public",
    "description": "Returns the Express middleware that serves the HTML file.",
    "lineNumber": 74,
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 227,
    "kind": "get",
    "name": "file",
    "memberof": "src/middlewares/html/showHTML.js~ShowHTML",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/html/showHTML.js~ShowHTML#file",
    "access": "public",
    "description": "The name of the file to serve.",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "_sendHTML",
    "memberof": "src/middlewares/html/showHTML.js~ShowHTML",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/html/showHTML.js~ShowHTML#_sendHTML",
    "access": "protected",
    "description": "Serves the file on the response.",
    "lineNumber": 117,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The server response."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The functino to call the next middleware."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "showHTML",
    "memberof": "src/middlewares/html/showHTML.js",
    "static": true,
    "longname": "src/middlewares/html/showHTML.js~showHTML",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/middlewares/html/showHTML.js",
    "importStyle": "{showHTML}",
    "description": "A middleware for showing an `index.html` file.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "ShowHTMLMiddlewareOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to customize the middleware behavior."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "MiddlewareCreator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "src/middlewares/index.js",
    "content": "const common = require('./common');\nconst html = require('./html');\nconst utils = require('./utils');\n\nmodule.exports = {\n  common,\n  html,\n  utils,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/middlewares/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "src/middlewares/utils/index.js",
    "content": "const { versionValidator } = require('./versionValidator');\n\nmodule.exports = {\n  versionValidator,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/middlewares/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "src/middlewares/utils/versionValidator.js",
    "content": "const ObjectUtils = require('wootils/shared/objectUtils');\nconst statuses = require('statuses');\nconst { middlewareCreator } = require('../../utils/wrappers');\n\n/**\n * @typdef {Object} VersionValidatorLatestOptions\n * @description The options for how the middleware should behave if the requested version is\n *              `latest`.\n * @property {boolean} [allow=true]    Whether or not the middleware should validate the _\"latest\n *                                     version\"_.\n * @property {string}  [name='latest'] The name of the _\"latest version\"_. Basically,\n *                                     `req.params.version` must match with this property in order\n *                                     to be consider \"latest\".\n */\n\n/**\n * @typdef {Object} VersionValidatorPopupOptions\n * @description The options for how to detect if the request comes from a popup and how to compose\n *              the post message the middleware will use to respond.\n * @property {string} [variable='popup']          The name of the query string variable the\n *                                                middleware will check in order to indentify\n *                                                whether the request comes from a popup or not.\n *                                                The variable must have `'true'` as its value.\n * @property {string} [title='Conflict']          The title of the page that will be generated to\n *                                                respond in case the versions don't match.\n * @property {string} [message='vesion:conflict'] The contents of the post message the generated\n *                                                page will send if the versions don't match.\n */\n\n/**\n * @typedef {Object} VersionValidatorOptions\n * @description The options used to customize a {@link VersionValidator} instance.\n * @property {string}                        [error]   The error message to show when the version\n *                                                     is invalid.\n * @property {VersionValidatorLatestOptions} [latest]  The options for how the middleware should\n *                                                     behave if the requested version is\n *                                                     `latest`.\n * @property {VersionValidatorPopupOptions}  [popup]   The options for how to detect if the request\n *                                                     comes from a popup and how to compose the\n *                                                     post message the middleware will use to\n *                                                     respond.\n * @property {string|number}                 [version] The version used to validate the requests.\n *                                                     On the {@link VersionValidator}\n *                                                     constructor, if specified via parameter,\n *                                                     the class will take care of automatically\n *                                                     add it to the options.\n */\n\n/**\n * This is the handler for the middleware/controller that validates the app version.\n * This is useful in cases where you want to restrict the access to the app to specific versions,\n * for example: you have a frontend app which needs to be aligned with the \"current\" version of\n * the app, since the frontend won't realize a new version was released, the validator can be\n * used to let the frontend know.\n * Also, it can be configured to handle requests from popups, in which case, instead of generating\n * an error message, it will send a post message.\n */\nclass VersionValidator {\n  /**\n   * @param {?string|?number}         version          The current version of the app. The reason\n   *                                                   this is nullable is because this comes\n   *                                                   directly from the app configuration, but\n   *                                                   you may want to re use this to validate\n   *                                                   \"another version\", so you can use the\n   *                                                   custom shorthand and send the version using\n   *                                                   the `options` parameter.\n   * @param {ResponsesBuilder}        responsesBuilder To generate post message responses for\n   *                                                   popups.\n   * @param {Class}                   AppError         To generate the error in case the version is\n   *                                                   invalid.\n   * @param {VersionValidatorOptions} [options={}]     Custom options to modify the middleware\n   *                                                   behavior.\n   * @throws {Error} If the version is `null` and the `options` don't include one either.\n   */\n  constructor(\n    version,\n    responsesBuilder,\n    AppError,\n    options = {}\n  ) {\n    /**\n     * A local reference for the `responsesBuilder` service.\n     * @type {ResponsesBuilder}\n     * @access protected\n     * @ignore\n     */\n    this._responsesBuilder = responsesBuilder;\n    /**\n     * A local reference for the class the app uses to generate errors.\n     * @type {Class}\n     * @access protected\n     * @ignore\n     */\n    this._AppError = AppError;\n    /**\n     * These are the \"settings\" the middleware will use in order to validate the requests.\n     * @type {VersionValidatorOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = ObjectUtils.merge(\n      {\n        error: 'The application version doesn\\'t match',\n        latest: {\n          allow: true,\n          name: 'latest',\n        },\n        popup: {\n          variable: 'popup',\n          title: 'Conflict',\n          message: 'vesion:conflict',\n        },\n        version,\n      },\n      options\n    );\n\n    if (!this._options.version) {\n      throw new Error('You need to supply a version');\n    }\n  }\n  /**\n   * Returns the Express middleware that will validate the `version` parameter.\n   * @return {ExpressMiddleware}\n   */\n  middleware() {\n    return (req, res, next) => {\n      // Get the `version` parameter from the request.\n      const { version } = req.params;\n      if (!version) {\n        // If no version is present, move on to the next middleware.\n        next();\n      } else if (version === this._options.version || this._validateLatest(version)) {\n        /**\n         * If the version matches the one on the options, or the requested version is \"latest\"\n         * (and the option is enabled), move on to the next middleware.\n         */\n        next();\n      } else if (this._isPopup(req)) {\n        /**\n         * If it doesn't match and the request is comming from a popup, send a response with a\n         * post message.\n         */\n        this._responsesBuilder.htmlPostMessage(\n          res,\n          this._options.popup.title,\n          this._options.popup.message,\n          statuses.conflict\n        );\n      } else {\n        // Finally, if it doesn't match and is not from a popup, move to the error handler.\n        next(new this._AppError(\n          this._options.error,\n          {\n            status: statuses.conflict,\n            response: {\n              validation: true,\n            },\n          }\n        ));\n      }\n    };\n  }\n  /**\n   * The options used to customize the middleware behavior.\n   * @return {VersionValidatorOptions}\n   */\n  get options() {\n    return this._options;\n  }\n  /**\n   * Helper method that checks if the incoming request is from a popup.\n   * @param {ExpressRequest} req The request information.\n   * @return {Boolean}\n   * @access protected\n   * @ignore\n   */\n  _isPopup(req) {\n    const popup = req.query[this._options.popup.variable];\n    return !!(popup && popup.toLowerCase() === 'true');\n  }\n  /**\n   * Helper method that checks if the \"latest version\" is enabled and if the given version is\n   * \"the latest\" (comparing it with the option name).\n   * @param {string|number} version The version to validate.\n   * @return {Boolean}\n   * @access protected\n   * @ignore\n   */\n  _validateLatest(version) {\n    return this._options.latest.allow && version === this._options.latest.name;\n  }\n}\n/**\n * A middleware that will validate a `version` request parameter against the app version and\n * generate an error if they don't match.\n * This is a \"middleware/controller\" is because the wrappers for both are the same, the\n * difference is that, for controllers, Jimpex sends a second parameter with the route where they\n * are mounted.\n * By validating the route parameter, the function can know whether the implementation is going\n * to use the middleware by itself or as a route middleware.\n * If used as middleware, it will just return the result of {@link VersionValidator#middleware};\n * but if used as controller, it will mount it on `[route]/:version/*`.\n * @type {MiddlewareCreator}\n * @param {VersionValidatorOptions} [options] Custom options to modify the middleware behavior.\n */\nconst versionValidator = middlewareCreator((options) => (app, route) => {\n  // Get the middleware function.\n  const middlewareValidator = (new VersionValidator(\n    app.get('appConfiguration').get('version'),\n    app.get('responsesBuilder'),\n    app.get('AppError'),\n    options\n  )).middleware();\n  // Set the variable to be returned.\n  let result;\n  if (route) {\n    // If the implementation will use it as a router, get the `router` service and mount it.\n    const router = app.get('router');\n    // Set the array of \"routes\" as the return value.\n    result = [\n      router.all('/:version/*', middlewareValidator),\n    ];\n  } else {\n    // If the implementation will use it stand alone, just set the function to be returned.\n    result = middlewareValidator;\n  }\n\n  // Return the route or the middleware.\n  return result;\n});\n\nmodule.exports = {\n  VersionValidator,\n  versionValidator,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/middlewares/utils/versionValidator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "typedef",
    "name": "VersionValidatorOptions",
    "memberof": "src/middlewares/utils/versionValidator.js",
    "static": true,
    "longname": "src/middlewares/utils/versionValidator.js~VersionValidatorOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "The options used to customize a {@link VersionValidator} instance."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "error",
        "description": "The error message to show when the version\n                                                    is invalid."
      },
      {
        "nullable": null,
        "types": [
          "VersionValidatorLatestOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "latest",
        "description": "The options for how the middleware should\n                                                    behave if the requested version is\n                                                    `latest`."
      },
      {
        "nullable": null,
        "types": [
          "VersionValidatorPopupOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "popup",
        "description": "The options for how to detect if the request\n                                                    comes from a popup and how to compose the\n                                                    post message the middleware will use to\n                                                    respond."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "version",
        "description": "The version used to validate the requests.\n                                                    On the {@link VersionValidator}\n                                                    constructor, if specified via parameter,\n                                                    the class will take care of automatically\n                                                    add it to the options."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "VersionValidatorOptions"
    }
  },
  {
    "__docId__": 234,
    "kind": "class",
    "name": "VersionValidator",
    "memberof": "src/middlewares/utils/versionValidator.js",
    "static": true,
    "longname": "src/middlewares/utils/versionValidator.js~VersionValidator",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/middlewares/utils/versionValidator.js",
    "importStyle": "{VersionValidator}",
    "description": "This is the handler for the middleware/controller that validates the app version.\nThis is useful in cases where you want to restrict the access to the app to specific versions,\nfor example: you have a frontend app which needs to be aligned with the \"current\" version of\nthe app, since the frontend won't realize a new version was released, the validator can be\nused to let the frontend know.\nAlso, it can be configured to handle requests from popups, in which case, instead of generating\nan error message, it will send a post message.",
    "lineNumber": 58,
    "interface": false
  },
  {
    "__docId__": 235,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/middlewares/utils/versionValidator.js~VersionValidator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/utils/versionValidator.js~VersionValidator#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 75,
    "params": [
      {
        "nullable": true,
        "types": [
          "string",
          "?number"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": "The current version of the app. The reason\n                                                  this is nullable is because this comes\n                                                  directly from the app configuration, but\n                                                  you may want to re use this to validate\n                                                  \"another version\", so you can use the\n                                                  custom shorthand and send the version using\n                                                  the `options` parameter."
      },
      {
        "nullable": null,
        "types": [
          "ResponsesBuilder"
        ],
        "spread": false,
        "optional": false,
        "name": "responsesBuilder",
        "description": "To generate post message responses for\n                                                  popups."
      },
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "AppError",
        "description": "To generate the error in case the version is\n                                                  invalid."
      },
      {
        "nullable": null,
        "types": [
          "VersionValidatorOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Custom options to modify the middleware\n                                                  behavior."
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the version is `null` and the `options` don't include one either."
      }
    ]
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "_responsesBuilder",
    "memberof": "src/middlewares/utils/versionValidator.js~VersionValidator",
    "static": false,
    "longname": "src/middlewares/utils/versionValidator.js~VersionValidator#_responsesBuilder",
    "access": "protected",
    "description": "A local reference for the `responsesBuilder` service.",
    "lineNumber": 87,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ResponsesBuilder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "_AppError",
    "memberof": "src/middlewares/utils/versionValidator.js~VersionValidator",
    "static": false,
    "longname": "src/middlewares/utils/versionValidator.js~VersionValidator#_AppError",
    "access": "protected",
    "description": "A local reference for the class the app uses to generate errors.",
    "lineNumber": 94,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "_options",
    "memberof": "src/middlewares/utils/versionValidator.js~VersionValidator",
    "static": false,
    "longname": "src/middlewares/utils/versionValidator.js~VersionValidator#_options",
    "access": "protected",
    "description": "These are the \"settings\" the middleware will use in order to validate the requests.",
    "lineNumber": 101,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "VersionValidatorOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "middleware",
    "memberof": "src/middlewares/utils/versionValidator.js~VersionValidator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/utils/versionValidator.js~VersionValidator#middleware",
    "access": "public",
    "description": "Returns the Express middleware that will validate the `version` parameter.",
    "lineNumber": 126,
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 240,
    "kind": "get",
    "name": "options",
    "memberof": "src/middlewares/utils/versionValidator.js~VersionValidator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/utils/versionValidator.js~VersionValidator#options",
    "access": "public",
    "description": "The options used to customize the middleware behavior.",
    "lineNumber": 168,
    "return": {
      "nullable": null,
      "types": [
        "VersionValidatorOptions"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "_isPopup",
    "memberof": "src/middlewares/utils/versionValidator.js~VersionValidator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/utils/versionValidator.js~VersionValidator#_isPopup",
    "access": "protected",
    "description": "Helper method that checks if the incoming request is from a popup.",
    "lineNumber": 178,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The request information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "_validateLatest",
    "memberof": "src/middlewares/utils/versionValidator.js~VersionValidator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/middlewares/utils/versionValidator.js~VersionValidator#_validateLatest",
    "access": "protected",
    "description": "Helper method that checks if the \"latest version\" is enabled and if the given version is\n\"the latest\" (comparing it with the option name).",
    "lineNumber": 190,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": "The version to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "versionValidator",
    "memberof": "src/middlewares/utils/versionValidator.js",
    "static": true,
    "longname": "src/middlewares/utils/versionValidator.js~versionValidator",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/middlewares/utils/versionValidator.js",
    "importStyle": "{versionValidator}",
    "description": "A middleware that will validate a `version` request parameter against the app version and\ngenerate an error if they don't match.\nThis is a \"middleware/controller\" is because the wrappers for both are the same, the\ndifference is that, for controllers, Jimpex sends a second parameter with the route where they\nare mounted.\nBy validating the route parameter, the function can know whether the implementation is going\nto use the middleware by itself or as a route middleware.\nIf used as middleware, it will just return the result of {@link VersionValidator#middleware};\nbut if used as controller, it will mount it on `[route]/:version/*`.",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "VersionValidatorOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Custom options to modify the middleware behavior."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "MiddlewareCreator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "src/services/common/appError.js",
    "content": "const { provider } = require('../../utils/wrappers');\n/**\n * A simple subclass of `Error` but with support for context information.\n * @extends {Error}\n */\nclass AppError extends Error {\n  /**\n   * @param {string}  message      The error message.\n   * @param {Object}  [context={}] Context information related to the error.\n   */\n  constructor(message, context = {}) {\n    super(message);\n\n    // Limit the stack trace if possible.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n    /**\n     * Context information related to the error.\n     * @type {Object}\n     * @access protected\n     */\n    this._context = Object.freeze(context);\n    /**\n     * The date of when the error was generated.\n     * @type {Date}\n     * @access protected\n     */\n    this._date = new Date();\n    /**\n     * Overwrite the name of the `Error` with the one from the class.\n     * @ignore\n     */\n    this.name = this.constructor.name;\n  }\n  /**\n   * Context information related to the error.\n   * @return {Object}\n   */\n  get context() {\n    return this._context;\n  }\n  /**\n   * The date of when the error was generated.\n   * @return {Date}\n   */\n  get date() {\n    return this._date;\n  }\n  /**\n   * Information about the error that can be shown on an app response. This is set using the\n   * `response` key on the `context`. The idea is that the error handler will read it and use it\n   * on the response.\n   * @return {Object}\n   */\n  get response() {\n    return this._context.response || {};\n  }\n  /**\n   * An HTTP status code related to the error. This is set using the `status` key on the\n   * `context`. If the error handler finds it, it will use it as the response status.\n   * and use it if necessary.\n   * @return {?number}\n   */\n  get status() {\n    return this._context.status || null;\n  }\n}\n/**\n * A generator function to create {@link AppError} instances.\n * @param {string} message   The error message.\n * @param {Object} [context] Context information related to the error.\n */\nconst appErrorGenerator = (message, context) => new AppError(message, context);\n/**\n * A service provider that will register both the {@link AppError} and a generator function on\n * the container. `AppError` will be the key for class, and `appError` will be for the\n * generator function.\n * @example\n * // Register it on the container\n * container.register(appError);\n * // Getting access to the class.\n * const AppError = container.get('AppError');\n * // Getting access to the function.\n * const appError = container.get('appError');\n * @type {Provider}\n */\nconst appError = provider((app) => {\n  app.set('AppError', () => AppError);\n  app.set('appError', () => appErrorGenerator);\n});\n\nmodule.exports = {\n  AppError,\n  appError,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/common/appError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "appErrorGenerator",
    "memberof": "src/services/common/appError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/common/appError.js~appErrorGenerator",
    "access": "public",
    "export": false,
    "importPath": "jimpex/src/services/common/appError.js",
    "importStyle": null,
    "description": "A generator function to create {@link AppError} instances.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The error message."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "Context information related to the error."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "class",
    "name": "AppError",
    "memberof": "src/services/common/appError.js",
    "static": true,
    "longname": "src/services/common/appError.js~AppError",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/common/appError.js",
    "importStyle": "{AppError}",
    "description": "A simple subclass of `Error` but with support for context information.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 247,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/common/appError.js~AppError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/appError.js~AppError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The error message."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "context",
        "description": "Context information related to the error."
      }
    ]
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "_context",
    "memberof": "src/services/common/appError.js~AppError",
    "static": false,
    "longname": "src/services/common/appError.js~AppError#_context",
    "access": "protected",
    "description": "Context information related to the error.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "_date",
    "memberof": "src/services/common/appError.js~AppError",
    "static": false,
    "longname": "src/services/common/appError.js~AppError#_date",
    "access": "protected",
    "description": "The date of when the error was generated.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "name",
    "memberof": "src/services/common/appError.js~AppError",
    "static": false,
    "longname": "src/services/common/appError.js~AppError#name",
    "access": "public",
    "description": "Overwrite the name of the `Error` with the one from the class.",
    "lineNumber": 34,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "get",
    "name": "context",
    "memberof": "src/services/common/appError.js~AppError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/appError.js~AppError#context",
    "access": "public",
    "description": "Context information related to the error.",
    "lineNumber": 40,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "get",
    "name": "date",
    "memberof": "src/services/common/appError.js~AppError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/appError.js~AppError#date",
    "access": "public",
    "description": "The date of when the error was generated.",
    "lineNumber": 47,
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "get",
    "name": "response",
    "memberof": "src/services/common/appError.js~AppError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/appError.js~AppError#response",
    "access": "public",
    "description": "Information about the error that can be shown on an app response. This is set using the\n`response` key on the `context`. The idea is that the error handler will read it and use it\non the response.",
    "lineNumber": 56,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "get",
    "name": "status",
    "memberof": "src/services/common/appError.js~AppError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/appError.js~AppError#status",
    "access": "public",
    "description": "An HTTP status code related to the error. This is set using the `status` key on the\n`context`. If the error handler finds it, it will use it as the response status.\nand use it if necessary.",
    "lineNumber": 65,
    "return": {
      "nullable": true,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "name": "appError",
    "memberof": "src/services/common/appError.js",
    "static": true,
    "longname": "src/services/common/appError.js~appError",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/common/appError.js",
    "importStyle": "{appError}",
    "description": "A service provider that will register both the {@link AppError} and a generator function on\nthe container. `AppError` will be the key for class, and `appError` will be for the\ngenerator function.",
    "examples": [
      "// Register it on the container\ncontainer.register(appError);\n// Getting access to the class.\nconst AppError = container.get('AppError');\n// Getting access to the function.\nconst appError = container.get('appError');"
    ],
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 256,
    "kind": "file",
    "name": "src/services/common/httpError.js",
    "content": "const statuses = require('statuses');\nconst ObjectUtils = require('wootils/shared/objectUtils');\nconst { provider } = require('../../utils/wrappers');\nconst { AppError } = require('./appError');\n/**\n * A type of error to be used on HTTP requests.\n * @extends {AppError}\n */\nclass HTTPError extends AppError {\n  /**\n   * @param {string} message      The error message.\n   * @param {number} status       The HTTP status code of the request response.\n   * @param {Object} [context={}] Context information related to the error.\n   */\n  constructor(message, status = statuses.ok, context = {}) {\n    super(message, ObjectUtils.merge({ status }, context));\n  }\n}\n/**\n * A generator function to create {@link HTTPError} instances.\n * @param {string} message   The error message.\n * @param {number} status    The HTTP status code of the request response.\n * @param {Object} [context] Context information related to the error.\n */\nconst httpErrorGenerator = (message, status, context) => new HTTPError(\n  message,\n  status,\n  context\n);\n/**\n * A service provider that will register both the {@link HTTPError} and a generator function on\n * the container. `HTTPError` will be the key for class, and `httpError` will be for the\n * generator function.\n * @example\n * // Register it on the container\n * container.register(httpError);\n * // Getting access to the class.\n * const HTTPError = container.get('HTTPError');\n * // Getting access to the function.\n * const httpError = container.get('httpError');\n * @type {Provider}\n */\nconst httpError = provider((app) => {\n  app.set('HTTPError', () => HTTPError);\n  app.set('httpError', () => httpErrorGenerator);\n});\n\nmodule.exports = {\n  HTTPError,\n  httpError,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/common/httpError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "httpErrorGenerator",
    "memberof": "src/services/common/httpError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/common/httpError.js~httpErrorGenerator",
    "access": "public",
    "export": false,
    "importPath": "jimpex/src/services/common/httpError.js",
    "importStyle": null,
    "description": "A generator function to create {@link HTTPError} instances.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The error message."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "The HTTP status code of the request response."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "Context information related to the error."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 258,
    "kind": "class",
    "name": "HTTPError",
    "memberof": "src/services/common/httpError.js",
    "static": true,
    "longname": "src/services/common/httpError.js~HTTPError",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/common/httpError.js",
    "importStyle": "{HTTPError}",
    "description": "A type of error to be used on HTTP requests.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "AppError"
    ]
  },
  {
    "__docId__": 259,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/common/httpError.js~HTTPError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/httpError.js~HTTPError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The error message."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "The HTTP status code of the request response."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "context",
        "description": "Context information related to the error."
      }
    ]
  },
  {
    "__docId__": 260,
    "kind": "variable",
    "name": "httpError",
    "memberof": "src/services/common/httpError.js",
    "static": true,
    "longname": "src/services/common/httpError.js~httpError",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/common/httpError.js",
    "importStyle": "{httpError}",
    "description": "A service provider that will register both the {@link HTTPError} and a generator function on\nthe container. `HTTPError` will be the key for class, and `httpError` will be for the\ngenerator function.",
    "examples": [
      "// Register it on the container\ncontainer.register(httpError);\n// Getting access to the class.\nconst HTTPError = container.get('HTTPError');\n// Getting access to the function.\nconst httpError = container.get('httpError');"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 261,
    "kind": "file",
    "name": "src/services/common/index.js",
    "content": "const { appError } = require('./appError');\nconst { httpError } = require('./httpError');\nconst { sendFileProvider } = require('./sendFile');\nconst { providers } = require('../../utils/wrappers');\n/**\n * The providers collection for the common services.\n * @type {Provider}\n * @property {Provider} appError  The provider for {@link AppError}.\n * @property {Provider} httpError The provider for {@link HTTPError}.\n * @property {Provider} sendFile  The provider for {@link SendFile}.\n */\nconst commonServices = providers({\n  appError,\n  httpError,\n  sendFile: sendFileProvider,\n});\n\nmodule.exports = commonServices;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/common/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 262,
    "kind": "variable",
    "name": "commonServices",
    "memberof": "src/services/common/index.js",
    "static": true,
    "longname": "src/services/common/index.js~commonServices",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/common/index.js",
    "importStyle": "commonServices",
    "description": "The providers collection for the common services.",
    "lineNumber": 12,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Provider"
        ],
        "spread": false,
        "optional": false,
        "name": "appError",
        "description": "The provider for {@link AppError}."
      },
      {
        "nullable": null,
        "types": [
          "Provider"
        ],
        "spread": false,
        "optional": false,
        "name": "httpError",
        "description": "The provider for {@link HTTPError}."
      },
      {
        "nullable": null,
        "types": [
          "Provider"
        ],
        "spread": false,
        "optional": false,
        "name": "sendFile",
        "description": "The provider for {@link SendFile}."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "file",
    "name": "src/services/common/sendFile.js",
    "content": "const { provider } = require('../../utils/wrappers');\n\n/**\n * @typedef {function} SendFile\n * @param {ExpressResponse} res          Necessary to write the file.\n * @param {String}          filepath     The path to the file relative to where the app executable\n *                                       is located.\n * @param {ExpressNext}     next         To call the send out the error if anything happens.\n * @param {String}          [from='app'] The location it uses to build the relative path. It can be\n *                                       `app` for the directory where the app executable is\n *                                       located, or `home` for the project root directory.\n */\n\n/**\n * Generates a function to send files with path relatives to the app executable file is located.\n * @example\n * // Let's say this is inside an Express middleware.\n * // Get the function\n * const send = sendFile(pathUtils);\n * send(res, 'some-file.html', next);\n * // If your app is on `/app/index.js`, this will send `/app/some-file.html`.\n *\n * @param  {PathUtils} pathUtils To generate the relative paths.\n * @return {SendFile}\n */\nconst sendFile = (pathUtils) => (res, filepath, next = () => {}, from = 'app') => {\n  res.sendFile(pathUtils.joinFrom(from, filepath), (error) => {\n    if (error) {\n      next(error);\n    } else {\n      res.end();\n    }\n  });\n};\n/**\n * The service provider that once registered on the app container will set the result of\n * `sendFile(pathUtils)` as the `sendFile` service.\n * @example\n * // Register it on the container\n * container.register(sendFileProvider);\n * // Getting access to the service instance\n * const sendFile = container.get('sendFile');\n * @type {Provider}\n */\nconst sendFileProvider = provider((app) => {\n  app.set('sendFile', () => sendFile(app.get('pathUtils')));\n});\n\nmodule.exports = {\n  sendFile,\n  sendFileProvider,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/common/sendFile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 264,
    "kind": "typedef",
    "name": "SendFile",
    "memberof": "src/services/common/sendFile.js",
    "static": true,
    "longname": "src/services/common/sendFile.js~SendFile",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Necessary to write the file."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file relative to where the app executable\n                                      is located."
      },
      {
        "nullable": null,
        "types": [
          "ExpressNext"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "To call the send out the error if anything happens."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'app'",
        "defaultRaw": "'app'",
        "name": "from",
        "description": "The location it uses to build the relative path. It can be\n                                      `app` for the directory where the app executable is\n                                      located, or `home` for the project root directory."
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "SendFile"
    }
  },
  {
    "__docId__": 265,
    "kind": "function",
    "name": "sendFile",
    "memberof": "src/services/common/sendFile.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/common/sendFile.js~sendFile",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/common/sendFile.js",
    "importStyle": "{sendFile}",
    "description": "Generates a function to send files with path relatives to the app executable file is located.",
    "examples": [
      "// Let's say this is inside an Express middleware.\n// Get the function\nconst send = sendFile(pathUtils);\nsend(res, 'some-file.html', next);\n// If your app is on `/app/index.js`, this will send `/app/some-file.html`."
    ],
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "To generate the relative paths."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SendFile"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 266,
    "kind": "variable",
    "name": "sendFileProvider",
    "memberof": "src/services/common/sendFile.js",
    "static": true,
    "longname": "src/services/common/sendFile.js~sendFileProvider",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/common/sendFile.js",
    "importStyle": "{sendFileProvider}",
    "description": "The service provider that once registered on the app container will set the result of\n`sendFile(pathUtils)` as the `sendFile` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(sendFileProvider);\n// Getting access to the service instance\nconst sendFile = container.get('sendFile');"
    ],
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "src/services/frontend/frontendFs.js",
    "content": "const fs = require('fs-extra');\nconst { provider } = require('../../utils/wrappers');\n/**\n * This service allows the app to easily read static files. The idea behind centralizing this\n * functionalities into a service is that is pretty common to have bundling tools to generate the\n * frontend, and on that process files can have different paths or not even be generated all, that's\n * why this service exists. The service can be extended/overwritten to accommodate any\n * requirements and avoid having to update or add `if`s to every `fs` call the app does.\n * Another _'feature'_ of this service is that all the paths are relative to the directory where\n * the app executable is located, so you don't have to remember the relative path from the place\n * you are accessing a file to the place where it's located.\n */\nclass FrontendFs {\n  /**\n   * Class constructor.\n   * @param {PathUtils} pathUtils To generate the relative paths.\n   */\n  constructor(pathUtils) {\n    /**\n     * A local reference for the `pathUtils` service.\n     * @type {PathUtils}\n     * @access protected\n     * @ignore\n     */\n    this._pathUtils = pathUtils;\n  }\n  /**\n   * Read a file from the file system.\n   * @param {string} filepath           The path to the file.\n   * @param {string} [encoding='utf-8'] The text encoding in which the file should be read.\n   * @return {Promise<string,Error>}\n   */\n  read(filepath, encoding = 'utf-8') {\n    return fs.readFile(this._pathUtils.joinFrom('app', filepath), encoding);\n  }\n  /**\n   * Write a file on the file system.\n   * @param {string} filepath The path to the file.\n   * @param {string} data     The contents of the file.\n   * @return {Promise<undefined,Error>}\n   */\n  write(filepath, data) {\n    return fs.writeFile(this._pathUtils.joinFrom('app', filepath), data);\n  }\n  /**\n   * Delete a file from the file system.\n   * @param {string} filepath The path to the file.\n   * @return {Promise<undefined,Error>}\n   */\n  delete(filepath) {\n    return fs.unlink(this._pathUtils.joinFrom('app', filepath));\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `FrontendFs` as the `frontendFs` service.\n * @example\n * // Register it on the container\n * container.register(frontendFs);\n * // Getting access to the service instance\n * const frontendFs = container.get('frontendFs');\n * @type {Provider}\n */\nconst frontendFs = provider((app) => {\n  app.set('frontendFs', () => new FrontendFs(app.get('pathUtils')));\n});\n\nmodule.exports = {\n  FrontendFs,\n  frontendFs,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/frontend/frontendFs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "class",
    "name": "FrontendFs",
    "memberof": "src/services/frontend/frontendFs.js",
    "static": true,
    "longname": "src/services/frontend/frontendFs.js~FrontendFs",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/frontend/frontendFs.js",
    "importStyle": "{FrontendFs}",
    "description": "This service allows the app to easily read static files. The idea behind centralizing this\nfunctionalities into a service is that is pretty common to have bundling tools to generate the\nfrontend, and on that process files can have different paths or not even be generated all, that's\nwhy this service exists. The service can be extended/overwritten to accommodate any\nrequirements and avoid having to update or add `if`s to every `fs` call the app does.\nAnother _'feature'_ of this service is that all the paths are relative to the directory where\nthe app executable is located, so you don't have to remember the relative path from the place\nyou are accessing a file to the place where it's located.",
    "lineNumber": 13,
    "interface": false
  },
  {
    "__docId__": 269,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/frontend/frontendFs.js~FrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/frontend/frontendFs.js~FrontendFs#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "To generate the relative paths."
      }
    ]
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "_pathUtils",
    "memberof": "src/services/frontend/frontendFs.js~FrontendFs",
    "static": false,
    "longname": "src/services/frontend/frontendFs.js~FrontendFs#_pathUtils",
    "access": "protected",
    "description": "A local reference for the `pathUtils` service.",
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "PathUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "read",
    "memberof": "src/services/frontend/frontendFs.js~FrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/frontend/frontendFs.js~FrontendFs#read",
    "access": "public",
    "description": "Read a file from the file system.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'utf-8'",
        "defaultRaw": "'utf-8'",
        "name": "encoding",
        "description": "The text encoding in which the file should be read."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "write",
    "memberof": "src/services/frontend/frontendFs.js~FrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/frontend/frontendFs.js~FrontendFs#write",
    "access": "public",
    "description": "Write a file on the file system.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The contents of the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "delete",
    "memberof": "src/services/frontend/frontendFs.js~FrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/frontend/frontendFs.js~FrontendFs#delete",
    "access": "public",
    "description": "Delete a file from the file system.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 274,
    "kind": "variable",
    "name": "frontendFs",
    "memberof": "src/services/frontend/frontendFs.js",
    "static": true,
    "longname": "src/services/frontend/frontendFs.js~frontendFs",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/frontend/frontendFs.js",
    "importStyle": "{frontendFs}",
    "description": "The service provider that once registered on the app container will set an instance of\n`FrontendFs` as the `frontendFs` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(frontendFs);\n// Getting access to the service instance\nconst frontendFs = container.get('frontendFs');"
    ],
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 275,
    "kind": "file",
    "name": "src/services/frontend/index.js",
    "content": "const { frontendFs } = require('./frontendFs');\n\nmodule.exports = {\n  frontendFs,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/frontend/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 276,
    "kind": "file",
    "name": "src/services/html/htmlGenerator.js",
    "content": "const ObjectUtils = require('wootils/shared/objectUtils');\nconst { deferred } = require('wootils/shared');\nconst { eventNames } = require('../../constants');\nconst { providerCreator } = require('../../utils/wrappers');\n/**\n * @typedef {Object} HTMLGeneratorOptions\n * @description The options to customize the an `HTMLGenerator` service.\n * @property {string}  [template='index.tpl.html']                 The name of the file it should\n *                                                                 use as template.\n * @property {string}  [file='index.html']                         The name of the generated file.\n * @property {Boolean} [deleteTemplateAfter=true]                  Whether or not to delete the\n *                                                                 tempalte after generating the\n *                                                                 file.\n * @property {string}  [replacePlaceholder='{{appConfiguration}}'] The placeholder string where the\n *                                                                 information will be written.\n * @property {RegExp}  [valuesExpression='{{(.*?)}}']              A regular expression for dynamic\n *                                                                 placeholders that will be\n *                                                                 replaced by values when the file\n *                                                                 is generated.\n * @property {string}  [variable='appConfiguration']               The name of the variable that\n *                                                                 will have the information on\n *                                                                 the file.\n * @property {Array} [configurationKeys=['features', 'version', 'postMessagesPrefix']] A list of\n * settings from the app configuration that will be used as the information to inject on\n * the file.\n */\n\n/**\n * @typedef {Object} HTMLGeneratorProviderOptions\n * @extends {HTMLGeneratorOptions}\n * @description These are the options specific for the service provider that registers\n *              {@link HTMLGenerator}. It's the same as {@link HTMLGeneratorOptions} but with a\n *              couple extras settings.\n * @property {string}  [serviceName='htmlGenerator'] The name that will be used to register the\n * service on the app container. This is to allow multiple \"instances\" of the service to be\n * created.\n * @property {?string} [valuesService='htmlGeneratorValues']\n * The name of a service that the generator will use in order to read the values that will be\n * injected on the template. If the service is available, the values from `configurationKeys`\n * will be ignored.\n */\n/**\n * @typedef {Object} HTMLGeneratorValuesService A service to provide the information value to an\n *                                              `HTMLGenerator` service to use on the generated\n *                                              file.\n * @property {function():Promise<Object,Error>} getValues This is the method an `HTMLGenerator`\n *                                                        service will call in order to retrieve\n *                                                        the values that should be injected on\n *                                                        the generated file.\n */\n\n/**\n * This is a utility sever that generates an HTML file with custom information when the app server\n * is started.\n */\nclass HTMLGenerator {\n  /**\n   * Class constructor.\n   * @param {AppConfiguration}            appConfiguration     To read the values of the settings\n   *                                                           that are going to be send to the\n   *                                                           file.\n   * @param {Logger}                      appLogger            To log messages when the file is\n   *                                                           generated, when the template is\n   *                                                           removed, and if it happens, when\n   *                                                           an error is thrown.\n   * @param {FrontendFs}                  frontendFs           To read the contents of the template.\n   * @param {HTMLGeneratorOptions}        [options]            To customize the service.\n   * @param {?HTMLGeneratorValuesService} [valuesService=null] If specified, instead of getting\n   *                                                           the values from the app\n   *                                                           configuration, they'll be retrieved\n   *                                                           from this service `getValues` method.\n   * @throws {Error} if `valuesService` is specified but it doesn't have a `getValues` method.\n   */\n  constructor(\n    appConfiguration,\n    appLogger,\n    frontendFs,\n    options,\n    valuesService = null\n  ) {\n    /**\n     * The service options.\n     * @type {HTMLGeneratorOptions}\n     */\n    this._options = ObjectUtils.merge({\n      template: 'index.tpl.html',\n      file: 'index.html',\n      deleteTemplateAfter: true,\n      replacePlaceholder: '{{appConfiguration}}',\n      valuesExpression: /\\{\\{(.*?)\\}\\}/ig,\n      variable: 'appConfiguration',\n      configurationKeys: ['features', 'version', 'postMessagesPrefix'],\n    }, options);\n    /**\n     * This check is to completely overwrite the `configurationKeys` if they were specified on\n     * the received `options` parameters. The reason it's being made after the `extend` it's because\n     * `extend` mergers the array, so if you have `['a', 'b', 'c']` and merge it with `['d', 'e']`\n     * you end up with `['d', 'e', 'c']`, and in this case, that's not very useful.\n     */\n    if (options.configurationKeys) {\n      this._options.configurationKeys = options.configurationKeys.slice();\n    }\n    // If `valuesService` was specified, check if it has a `getValues` method.\n    if (valuesService && typeof valuesService.getValues !== 'function') {\n      throw new Error('The HTMLGenerator values service must have a `getValues` method');\n    }\n    /**\n     * A local reference for the `appConfiguration` service.\n     * @type {AppConfiguration}\n     * @access protected\n     * @ignore\n     */\n    this._appConfiguration = appConfiguration;\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {Logger}\n     * @access protected\n     * @ignore\n     */\n    this._appLogger = appLogger;\n    /**\n     * A local reference for the `frontendFs` service.\n     * @type {FrontendFs}\n     * @access protected\n     * @ignore\n     */\n    this._frontendFs = frontendFs;\n    /**\n     * A local reference for the recieved `valuesService` service.\n     * @type {?HTMLGeneratorValuesService}\n     * @access protected\n     * @ignore\n     */\n    this._valuesService = valuesService;\n    /**\n     * Whether or not the file has been generated.\n     * @type {Boolean}\n     * @access protected\n     * @ignore\n     */\n    this._fileReady = false;\n    /**\n     * A deferred promise to return when another service asks if the file has been generated. Once\n     * this sevice finishes generating the file, the promise will be resolved.\n     * @type {Object}\n     * @access protected\n     * @ignore\n     */\n    this._fileDeferred = deferred();\n  }\n  /**\n   * Returns a promise that will be resolved when the file has been generated.\n   * @return {Promise<undefined,undefined>}\n   */\n  whenReady() {\n    return this._fileReady ?\n      Promise.resolve() :\n      this._fileDeferred.promise;\n  }\n  /**\n   * Get the name of the file the service generates.\n   * @return {string}\n   */\n  getFile() {\n    return this._options.file;\n  }\n  /**\n   * Get the values that are going to be injected on the file.\n   * @return {Promise<Object,?Error>}\n   */\n  getValues() {\n    let valuesPromise;\n    // If an `HTMLGeneratorValuesService` was specified...\n    if (this._valuesService) {\n      // ...get the values from there.\n      valuesPromise = this._valuesService.getValues();\n    } else if (this._options.configurationKeys.length) {\n      /**\n       * ...if there are configuration keys to be copied, set to return an already resolved\n       * promise with the settings from the configuration.\n       */\n      valuesPromise = Promise.resolve(\n        this._appConfiguration.get(this._options.configurationKeys)\n      );\n    } else {\n      // ...otherwsie, return an already resolved promise with an empty object.\n      valuesPromise = Promise.resolve({});\n    }\n\n    return valuesPromise;\n  }\n  /**\n   * Generate the HTML file.\n   * @return {Promise<undefined,Error>}\n   */\n  generateHTML() {\n    // Get the service options.\n    const {\n      template,\n      deleteTemplateAfter,\n      file,\n    } = this._options;\n    // Define the variable where the template contents will be saved.\n    let templateContents = '';\n    // Read the template file.\n    return this._frontendFs.read(`./${template}`)\n    .then((contents) => {\n      // Save the template contents.\n      templateContents = contents;\n      // Get the values to inject.\n      return this.getValues();\n    })\n    .then((values) => {\n      // Get the HTML code for the file.\n      const html = this._processHTML(templateContents, values);\n      // Write the generated file.\n      return this._frontendFs.write(file, html);\n    })\n    .then(() => {\n      this._appLogger.success(`The HTML was successfully generated (${file})`);\n      /**\n       * If the template needs to be deleted, return the call to the `delete` method, otherwise,\n       * just an empty object to continue the promise chain.\n       */\n      return deleteTemplateAfter && this._frontendFs.delete(`./${template}`);\n    })\n    .then(() => {\n      // If the template was deleted, log a message informing it.\n      if (deleteTemplateAfter) {\n        this._appLogger.info(`The HTML template was successfully removed (${template})`);\n      }\n      /**\n       * Mark the `_fileReady` flag as `true` so the next calls to `whenReady` won't get the\n       * deferred promise.\n       */\n      this._fileReady = true;\n      // Resolve the deferred promise.\n      this._fileDeferred.resolve();\n    })\n    .catch((error) => {\n      this._appLogger.error('There was an error while generating the HTML');\n      return Promise.reject(error);\n    });\n  }\n  /**\n   * The service options.\n   * @type {HTMLGeneratorOptions}\n   */\n  get options() {\n    return Object.freeze(this._options);\n  }\n  /**\n   * Creates the code for the HTML file.\n   * @param {string} template The template code where the values are going to be injected.\n   * @param {Object} values   The dictionary of values to inject.\n   * @return {string}\n   * @ignore\n   * @access protected\n   */\n  _processHTML(template, values) {\n    const {\n      replacePlaceholder,\n      valuesExpression,\n      variable,\n    } = this._options;\n    const htmlObject = JSON.stringify(values);\n    let code = template\n    .replace(\n      replacePlaceholder,\n      `window.${variable} = ${htmlObject}`\n    );\n    const matches = [];\n    let match = valuesExpression.exec(code);\n    while (match) {\n      const [string, value] = match;\n      matches.push({\n        string,\n        value,\n      });\n\n      match = valuesExpression.exec(code);\n    }\n\n    matches.forEach((info) => {\n      code = code.replace(info.string, this._getFromValues(values, info.value));\n    });\n\n    return code;\n  }\n  /**\n   * Get a value from an object dictionary using a string _\"object path\"_ (`prop.sub.otherProp`).\n   * If the property doesn't exist or the path is invalid, it will return `null`.\n   * @param {Object} values    The dictionary from where the value will be read.\n   * @param {string} valuePath The path to the value.\n   * @return {*}\n   * @ignore\n   * @access protected\n   */\n  _getFromValues(values, valuePath) {\n    const pathParts = valuePath.split('.');\n    const first = pathParts.shift();\n    let currentElement = values[first];\n    if (typeof currentElement === 'undefined') {\n      currentElement = null;\n    } else if (pathParts.length) {\n      pathParts.some((currentPart) => {\n        currentElement = currentElement[currentPart];\n        let shouldBreak = false;\n        if (typeof currentElement === 'undefined') {\n          currentElement = null;\n          shouldBreak = true;\n        }\n\n        return shouldBreak;\n      });\n    }\n\n    return currentElement;\n  }\n}\n/**\n * A service that hooks itself to the `after-start` event of the app server in order to trigger\n * the generation an the html file when the server starts.\n * @type {ProviderCreator}\n * @param {HTMLGeneratorProviderOptions|HTMLGeneratorOptions} [options] The options to customize\n *                                                                      the service behavior.\n */\nconst htmlGenerator = providerCreator((options = {}) => (app) => {\n  const { serviceName = 'htmlGenerator' } = options;\n  app.set(serviceName, () => {\n    const { valuesService = 'htmlGeneratorValues' } = options;\n    return new HTMLGenerator(\n      app.get('appConfiguration'),\n      app.get('appLogger'),\n      app.get('frontendFs'),\n      options,\n      valuesService ? app.try(valuesService) : null\n    );\n  });\n\n  app.get('events').once(eventNames.afterStart, () => app.get(serviceName).generateHTML());\n});\n\nmodule.exports = {\n  HTMLGenerator,\n  htmlGenerator,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/html/htmlGenerator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 277,
    "kind": "typedef",
    "name": "HTMLGeneratorOptions",
    "memberof": "src/services/html/htmlGenerator.js",
    "static": true,
    "longname": "src/services/html/htmlGenerator.js~HTMLGeneratorOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "The options to customize the an `HTMLGenerator` service."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'index.tpl.html'",
        "defaultRaw": "'index.tpl.html'",
        "name": "template",
        "description": "The name of the file it should\n                                                                use as template."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'index.html'",
        "defaultRaw": "'index.html'",
        "name": "file",
        "description": "The name of the generated file."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "deleteTemplateAfter",
        "description": "Whether or not to delete the\n                                                                tempalte after generating the\n                                                                file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'{{appConfiguration}}'",
        "defaultRaw": "'{{appConfiguration}}'",
        "name": "replacePlaceholder",
        "description": "The placeholder string where the\n                                                                information will be written."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'{{(.*?)}}'",
        "defaultRaw": "'{{(.*?)}}'",
        "name": "valuesExpression",
        "description": "A regular expression for dynamic\n                                                                placeholders that will be\n                                                                replaced by values when the file\n                                                                is generated."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'appConfiguration'",
        "defaultRaw": "'appConfiguration'",
        "name": "variable",
        "description": "The name of the variable that\n                                                                will have the information on\n                                                                the file."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "['features', 'version', 'postMessagesPrefix']",
        "defaultRaw": "['features', 'version', 'postMessagesPrefix']",
        "name": "configurationKeys",
        "description": "A list of\nsettings from the app configuration that will be used as the information to inject on\nthe file."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "HTMLGeneratorOptions"
    }
  },
  {
    "__docId__": 278,
    "kind": "typedef",
    "name": "HTMLGeneratorProviderOptions",
    "memberof": "src/services/html/htmlGenerator.js",
    "static": true,
    "longname": "src/services/html/htmlGenerator.js~HTMLGeneratorProviderOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@extends",
        "tagValue": "{HTMLGeneratorOptions}"
      },
      {
        "tagName": "@description",
        "tagValue": "These are the options specific for the service provider that registers\n             {@link HTMLGenerator}. It's the same as {@link HTMLGeneratorOptions} but with a\n             couple extras settings."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'htmlGenerator'",
        "defaultRaw": "'htmlGenerator'",
        "name": "serviceName",
        "description": "The name that will be used to register the\nservice on the app container. This is to allow multiple \"instances\" of the service to be\ncreated."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'htmlGeneratorValues'",
        "defaultRaw": "'htmlGeneratorValues'",
        "name": "valuesService",
        "description": "The name of a service that the generator will use in order to read the values that will be\ninjected on the template. If the service is available, the values from `configurationKeys`\nwill be ignored."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "HTMLGeneratorProviderOptions"
    }
  },
  {
    "__docId__": 279,
    "kind": "typedef",
    "name": "HTMLGeneratorValuesService",
    "memberof": "src/services/html/htmlGenerator.js",
    "static": true,
    "longname": "src/services/html/htmlGenerator.js~HTMLGeneratorValuesService",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "function():Promise<Object,Error>"
        ],
        "spread": false,
        "optional": false,
        "name": "getValues",
        "description": "This is the method an `HTMLGenerator`\n                                                       service will call in order to retrieve\n                                                       the values that should be injected on\n                                                       the generated file."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "HTMLGeneratorValuesService"
    }
  },
  {
    "__docId__": 280,
    "kind": "class",
    "name": "HTMLGenerator",
    "memberof": "src/services/html/htmlGenerator.js",
    "static": true,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/html/htmlGenerator.js",
    "importStyle": "{HTMLGenerator}",
    "description": "This is a utility sever that generates an HTML file with custom information when the app server\nis started.",
    "lineNumber": 56,
    "interface": false
  },
  {
    "__docId__": 281,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "AppConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "appConfiguration",
        "description": "To read the values of the settings\n                                                          that are going to be send to the\n                                                          file."
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "To log messages when the file is\n                                                          generated, when the template is\n                                                          removed, and if it happens, when\n                                                          an error is thrown."
      },
      {
        "nullable": null,
        "types": [
          "FrontendFs"
        ],
        "spread": false,
        "optional": false,
        "name": "frontendFs",
        "description": "To read the contents of the template."
      },
      {
        "nullable": null,
        "types": [
          "HTMLGeneratorOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "To customize the service."
      },
      {
        "nullable": true,
        "types": [
          "HTMLGeneratorValuesService"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "valuesService",
        "description": "If specified, instead of getting\n                                                          the values from the app\n                                                          configuration, they'll be retrieved\n                                                          from this service `getValues` method."
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if `valuesService` is specified but it doesn't have a `getValues` method."
      }
    ]
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "_options",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#_options",
    "access": "private",
    "description": "The service options.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "HTMLGeneratorOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "_appConfiguration",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#_appConfiguration",
    "access": "protected",
    "description": "A local reference for the `appConfiguration` service.",
    "lineNumber": 113,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "AppConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "_appLogger",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#_appLogger",
    "access": "protected",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 120,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "_frontendFs",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#_frontendFs",
    "access": "protected",
    "description": "A local reference for the `frontendFs` service.",
    "lineNumber": 127,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "FrontendFs"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "_valuesService",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#_valuesService",
    "access": "protected",
    "description": "A local reference for the recieved `valuesService` service.",
    "lineNumber": 134,
    "ignore": true,
    "type": {
      "nullable": true,
      "types": [
        "HTMLGeneratorValuesService"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "_fileReady",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#_fileReady",
    "access": "protected",
    "description": "Whether or not the file has been generated.",
    "lineNumber": 141,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "_fileDeferred",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#_fileDeferred",
    "access": "protected",
    "description": "A deferred promise to return when another service asks if the file has been generated. Once\nthis sevice finishes generating the file, the promise will be resolved.",
    "lineNumber": 149,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "whenReady",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#whenReady",
    "access": "public",
    "description": "Returns a promise that will be resolved when the file has been generated.",
    "lineNumber": 155,
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,undefined>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "getFile",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#getFile",
    "access": "public",
    "description": "Get the name of the file the service generates.",
    "lineNumber": 164,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "getValues",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#getValues",
    "access": "public",
    "description": "Get the values that are going to be injected on the file.",
    "lineNumber": 171,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object,?Error>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "generateHTML",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#generateHTML",
    "access": "public",
    "description": "Generate the HTML file.",
    "lineNumber": 196,
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 294,
    "kind": "get",
    "name": "options",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#options",
    "access": "public",
    "description": "The service options.",
    "lineNumber": 249,
    "type": {
      "nullable": null,
      "types": [
        "HTMLGeneratorOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "_processHTML",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#_processHTML",
    "access": "protected",
    "description": "Creates the code for the HTML file.",
    "lineNumber": 260,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": "The template code where the values are going to be injected."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "The dictionary of values to inject."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "_getFromValues",
    "memberof": "src/services/html/htmlGenerator.js~HTMLGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/html/htmlGenerator.js~HTMLGenerator#_getFromValues",
    "access": "protected",
    "description": "Get a value from an object dictionary using a string _\"object path\"_ (`prop.sub.otherProp`).\nIf the property doesn't exist or the path is invalid, it will return `null`.",
    "lineNumber": 299,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "The dictionary from where the value will be read."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "valuePath",
        "description": "The path to the value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 297,
    "kind": "variable",
    "name": "htmlGenerator",
    "memberof": "src/services/html/htmlGenerator.js",
    "static": true,
    "longname": "src/services/html/htmlGenerator.js~htmlGenerator",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/html/htmlGenerator.js",
    "importStyle": "{htmlGenerator}",
    "description": "A service that hooks itself to the `after-start` event of the app server in order to trigger\nthe generation an the html file when the server starts.",
    "lineNumber": 328,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLGeneratorProviderOptions",
          "HTMLGeneratorOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to customize\n                                                                     the service behavior."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "ProviderCreator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 298,
    "kind": "file",
    "name": "src/services/html/index.js",
    "content": "const { htmlGenerator } = require('./htmlGenerator');\n\nmodule.exports = {\n  htmlGenerator,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/html/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "file",
    "name": "src/services/http/apiClient.js",
    "content": "const ObjectUtils = require('wootils/shared/objectUtils');\nconst APIClientBase = require('wootils/shared/apiClient');\nconst { providerCreator } = require('../../utils/wrappers');\n/**\n * @typdef {Object} APIClientProviderOptions\n * @description The options to customize how the service gets registered.\n * @property {string} [serviceName='apiClient']    The name of the service that will be registered\n *                                                 into the app.\n * @property {string} [configurationSetting='api'] The name of the configuration setting that has\n *                                                 the API information.\n * @property {Class}  [clientClass=APIClient]      The class the service will instantiate. It has\n *                                                 to extend from {@link APIClient}.\n */\n\n/**\n * @typedef {Object} APIClientConfiguration\n * @description The configuration for the API the client will make requests to.\n * @property {string}             url       The API entry point.\n * @property {APIClientEndpoints} endpoints A dictionary of named endpoints relative to the API\n *                                          entry point.\n */\n\n/**\n * An API client for the app to use. What makes this service special is that its that it formats\n * the received errors using the `AppError` service class and as fetch function it uses the\n * `http` service, allowing the app to to internally handle all the requests and responses.\n * @extends {APIClientBase}\n */\nclass APIClient extends APIClientBase {\n  /**\n   * @param {APIClientConfiguration} apiConfig The configuration for the API the client will\n   *                                           make requests to.\n   * @param {HTTP}                   http      To get the `fetch` function for this service\n   *                                           to use on all the requests.\n   * @param {Class}                  HTTPError To format the received errors.\n   */\n  constructor(apiConfig, http, HTTPError) {\n    super(\n      apiConfig.url,\n      apiConfig.endpoints || apiConfig.gateway,\n      http.fetch\n    );\n    /**\n     * The configuration for the API the client will make requests to.\n     * @type {APIClientConfiguration}\n     * @access protected\n     * @ignore\n     */\n    this._apiConfig = ObjectUtils.copy(apiConfig);\n    /**\n     * A local reference for the class the app uses to generate HTTP errors.\n     * @type {Class}\n     * @access protected\n     * @ignore\n     */\n    this._HTTPError = HTTPError;\n  }\n  /**\n   * Formats a response error with the App error class.\n   * @param {Object} response A received response from a request.\n   * @param {number} status   The HTTP status of the request.\n   * @return {HTTPError}\n   */\n  error(response, status) {\n    return new this._HTTPError(this.getErrorMessageFromResponse(response), status);\n  }\n  /**\n   * Helper method that tries to get an error message from a given response.\n   * @param {Object} response                      A received response from a request.\n   * @param {string} [fallback='Unexpected error'] A fallback message in case the method doesn't\n   *                                               found one on the response.\n   * @return {string}\n   */\n  getErrorMessageFromResponse(response, fallback = 'Unexpected error') {\n    let message;\n    if (response.error) {\n      message = response.error;\n    } else if (response.data && response.data && response.data.message) {\n      ({ message } = response.data);\n    } else if (response.data && response.data && response.data.error) {\n      message = response.data.error;\n    } else {\n      message = fallback;\n    }\n\n    return message;\n  }\n  /**\n   * The configuration for the API the client will make requests to.\n   * @type {Object}\n   * @property {string} url       The API entry point.\n   * @property {Object} endpoints A dictionary of named endpoints relative to the API\n   *                              entry point.\n   */\n  get apiConfig() {\n    return Object.freeze(this._apiConfig);\n  }\n}\n/**\n * An API Client service to make requests to an API using endpoints defined on the app\n * configuration.\n * @type {ProviderCreator}\n * @param {APIClientProviderOptions} [options] The options to customize how the service gets\n *                                             registered.\n */\nconst apiClient = providerCreator((options = {}) => (app) => {\n  const defaultName = 'apiClient';\n  const {\n    serviceName = defaultName,\n    clientClass: ClientClass = APIClient,\n  } = options;\n  let { configurationSetting } = options;\n  if (!configurationSetting) {\n    configurationSetting = serviceName === defaultName ? 'api' : serviceName;\n  }\n  app.set(serviceName, () => new ClientClass(\n    app.get('appConfiguration').get(configurationSetting),\n    app.get('http'),\n    app.get('HTTPError')\n  ));\n});\n\nmodule.exports = {\n  APIClient,\n  apiClient,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/http/apiClient.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "typedef",
    "name": "APIClientConfiguration",
    "memberof": "src/services/http/apiClient.js",
    "static": true,
    "longname": "src/services/http/apiClient.js~APIClientConfiguration",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "The configuration for the API the client will make requests to."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The API entry point."
      },
      {
        "nullable": null,
        "types": [
          "APIClientEndpoints"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoints",
        "description": "A dictionary of named endpoints relative to the API\n                                         entry point."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "APIClientConfiguration"
    }
  },
  {
    "__docId__": 301,
    "kind": "class",
    "name": "APIClient",
    "memberof": "src/services/http/apiClient.js",
    "static": true,
    "longname": "src/services/http/apiClient.js~APIClient",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/http/apiClient.js",
    "importStyle": "{APIClient}",
    "description": "An API client for the app to use. What makes this service special is that its that it formats\nthe received errors using the `AppError` service class and as fetch function it uses the\n`http` service, allowing the app to to internally handle all the requests and responses.",
    "lineNumber": 29,
    "interface": false,
    "extends": [
      "APIClientBase"
    ]
  },
  {
    "__docId__": 302,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/http/apiClient.js~APIClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/apiClient.js~APIClient#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "APIClientConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "apiConfig",
        "description": "The configuration for the API the client will\n                                          make requests to."
      },
      {
        "nullable": null,
        "types": [
          "HTTP"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "To get the `fetch` function for this service\n                                          to use on all the requests."
      },
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "HTTPError",
        "description": "To format the received errors."
      }
    ]
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "_apiConfig",
    "memberof": "src/services/http/apiClient.js~APIClient",
    "static": false,
    "longname": "src/services/http/apiClient.js~APIClient#_apiConfig",
    "access": "protected",
    "description": "The configuration for the API the client will make requests to.",
    "lineNumber": 49,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "APIClientConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "_HTTPError",
    "memberof": "src/services/http/apiClient.js~APIClient",
    "static": false,
    "longname": "src/services/http/apiClient.js~APIClient#_HTTPError",
    "access": "protected",
    "description": "A local reference for the class the app uses to generate HTTP errors.",
    "lineNumber": 56,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "error",
    "memberof": "src/services/http/apiClient.js~APIClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/apiClient.js~APIClient#error",
    "access": "public",
    "description": "Formats a response error with the App error class.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "A received response from a request."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "The HTTP status of the request."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTTPError"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "getErrorMessageFromResponse",
    "memberof": "src/services/http/apiClient.js~APIClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/apiClient.js~APIClient#getErrorMessageFromResponse",
    "access": "public",
    "description": "Helper method that tries to get an error message from a given response.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "A received response from a request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'Unexpected error'",
        "defaultRaw": "'Unexpected error'",
        "name": "fallback",
        "description": "A fallback message in case the method doesn't\n                                              found one on the response."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 307,
    "kind": "get",
    "name": "apiConfig",
    "memberof": "src/services/http/apiClient.js~APIClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/apiClient.js~APIClient#apiConfig",
    "access": "public",
    "description": "The configuration for the API the client will make requests to.",
    "lineNumber": 95,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The API entry point."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoints",
        "description": "A dictionary of named endpoints relative to the API\n                             entry point."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 308,
    "kind": "variable",
    "name": "apiClient",
    "memberof": "src/services/http/apiClient.js",
    "static": true,
    "longname": "src/services/http/apiClient.js~apiClient",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/http/apiClient.js",
    "importStyle": "{apiClient}",
    "description": "An API Client service to make requests to an API using endpoints defined on the app\nconfiguration.",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "APIClientProviderOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options to customize how the service gets\n                                            registered."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "ProviderCreator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 309,
    "kind": "file",
    "name": "src/services/http/http.js",
    "content": "const fetch = require('node-fetch');\nconst urijs = require('urijs');\nconst { provider } = require('../../utils/wrappers');\n/**\n * @typedef {Object} HTTPFetchOptions\n * @property {?string}         method  The request method.\n * @property {?Object}         headers The request headers.\n * @property {?string}         body    The request body.\n * @property {?Object}         qs      The request query string parameters.\n * @property {?ExpressRequest} req     An Express request object used to get extra infromation\n *                                     (like headers and the IP.)\n */\n/**\n * @external {Headers} https://developer.mozilla.org/en-US/docs/Web/API/Headers\n */\n/**\n * A set of utilities to work with HTTP requests and responses.\n */\nclass HTTP {\n  /**\n   * Class constructor.\n   * @param {Boolean} logRequests Whether or not to log the requests and their responses.\n   * @param {Logger}  appLogger   If `logRequests` is `true`, this will be used to log the requests\n   *                              and responses information.\n   */\n  constructor(logRequests, appLogger) {\n    /**\n     * Whether or not to log the requests and their responses.\n     * @type {Boolean}\n     * @access protected\n     * @ignore\n     */\n    this._logRequests = logRequests;\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {AppLogger}\n     * @access protected\n     * @ignore\n     */\n    this._appLogger = appLogger;\n    /**\n     * So it can be sent to other services as a reference.\n     * @ignore\n     */\n    this.fetch = this.fetch.bind(this);\n  }\n  /**\n   * Try to get the IP from a given request.\n   * @param {ExpressRequest} req The request from which it will try to obtain the IP address.\n   * @return {?string}\n   */\n  getIPFromRequest(req) {\n    return req.headers['x-forwarded-for'] ||\n      req.connection.remoteAddress ||\n      req.socket.remoteAddress ||\n      req.connection.socket.remoteAddress;\n  }\n  /**\n   * Creates a dictionary with all the custom headers a request has. By custom header it means all\n   * the headers which name start with `x-`.\n   * This method doesn't copy `x-forwarded-for` as the `fetch` method generates it by calling\n   * `getIPFromRequest`.\n   * @param {ExpressRequest} req The request from which it will try to get the headers.\n   * @return {Object}\n   */\n  getCustomHeadersFromRequest(req) {\n    const headers = {};\n    Object.keys(req.headers).forEach((headerName) => {\n      if (headerName.startsWith('x-') && !headerName.startsWith('x-forwarded-for')) {\n        headers[headerName] = req.headers[headerName];\n      }\n    });\n\n    return headers;\n  }\n  /**\n   * It takes a dictionary of headers and normalize the names so each word will start with an\n   * upper case character. This is helpful in case you added custom headers and didn't care about\n   * the casing, or when copying headers from a server request, in which case they are all\n   * tranformed to lower case.\n   * @param {Object} headers The dictionary of headers to normalize.\n   * @return {Object}\n   */\n  normalizeHeaders(headers) {\n    return Object.keys(headers).reduce(\n      (newHeaders, name) => {\n        const newName = name\n        .split('-')\n        .map((part) => part.replace(/^(\\w)/, (ignore, letter) => letter.toUpperCase()))\n        .join('-');\n        return Object.assign({}, newHeaders, {\n          [newName]: headers[name],\n        });\n      },\n      {}\n    );\n  }\n  /**\n   * Make a request.\n   * @param {string}           url          The request URL.\n   * @param {HTTPFetchOptions} [options={}] The request options.\n   * @return {Promise<Object,Error>}\n   */\n  fetch(url, options = {}) {\n    // Get a mutable reference for the URL.\n    let fetchURL = url;\n    // If there are query string parameters...\n    if (options.qs) {\n      // ...use `urijs` to inject them on the URL reference.\n      fetchURL = urijs(url).addSearch(options.qs).toString();\n    }\n    // Define an object that will hold the new set of options.\n    const fetchOptions = {\n      // Set the request method and make it fallback to `GET` if it wasn't set.\n      method: (options.method || 'get').toUpperCase(),\n    };\n    // If there's a body, add it to the new options.\n    if (options.body) {\n      fetchOptions.body = options.body;\n    }\n    // Define the base headers for the request.\n    let defaultHeaders = {};\n    // If there's an Express request object on the `options`...\n    if (options.req) {\n      /**\n       * Overwrite the base headers with the request original IP as `x-forwarded-for` and all the\n       * received custom headers that request may have.\n       */\n      defaultHeaders = Object.assign(\n        {\n          'x-forwarded-for': this.getIPFromRequest(options.req),\n        },\n        this.getCustomHeadersFromRequest(options.req)\n      );\n    }\n    // Merge the base headers with the ones received on the `options`.\n    const headers = Object.assign(\n      {},\n      defaultHeaders,\n      (options.headers || {})\n    );\n    /**\n     * If there's at least one header on the dictionary, add it to the new options. This check is\n     * to avoid sending an empty object.\n     */\n    if (Object.keys(headers).length) {\n      fetchOptions.headers = this.normalizeHeaders(headers);\n    }\n    // If the `logRequests` flag is `true`, call the method to log the request.\n    if (this._logRequests) {\n      this._logRequest(fetchURL, fetchOptions);\n    }\n    // Make the request.\n    let result = fetch(fetchURL, fetchOptions);\n    // If the `logRequests` flag is `true`...\n    if (this._logRequests) {\n      // Add an extra step on the promise chain to log the response.\n      result = result.then((response) => {\n        this._logResponse(response);\n        return response;\n      });\n    }\n    // Return the request promise.\n    return result;\n  }\n  /**\n   * Whether or not to log the requests and their responses.\n   * @type {Boolean}\n   */\n  get logRequests() {\n    return this._logRequests;\n  }\n  /**\n   * Log a a request information using the `appLogger` service.\n   * @param {string}  url            The request URL.\n   * @param {Object}  options        The options generated by the `fetch` method.\n   * @param {string}  options.method The request method.\n   * @param {?Object} options.header The request headers.\n   * @param {?string} options.body   The request body.\n   */\n  _logRequest(url, options) {\n    const prefix = 'REQUEST> ';\n    const lines = [\n      '--->>',\n      `${prefix}${options.method} ${url}`,\n    ];\n    if (options.headers) {\n      Object.keys(options.headers).forEach((header) => {\n        lines.push(`${prefix}${header}: ${options.headers[header]}`);\n      });\n    }\n\n    if (options.body) {\n      lines.push(`${prefix}body: \"${options.body}\"`);\n    }\n\n    this._appLogger.info(lines);\n  }\n  /**\n   * Log a a response information using the `appLogger` service.\n   * @param {Object}  response         The response object returned by `node-fetch`.\n   * @param {string}  response.url     The requested URL.\n   * @param {number}  response.status  The response HTTP status.\n   * @param {Headers} response.headers The response headers dictionary.\n   */\n  _logResponse(response) {\n    const prefix = 'RESPONSE> ';\n    const lines = [\n      '<<---',\n      `${prefix}${response.url}`,\n      `${prefix}status: ${response.status}`,\n    ];\n\n    response.headers.forEach((value, header) => {\n      lines.push(`${prefix}${header}: ${value}`);\n    });\n\n    this._appLogger.info(lines);\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `HTTP` as the `http` service. The provider also checks the `debug.logRequests` setting on\n * the app configuration in order to enable or not the logging of requests.\n * @example\n * // Register it on the container\n * container.register(http);\n * // Getting access to the service instance\n * const http = container.get('http');\n * @type {Provider}\n */\nconst http = provider((app) => {\n  app.set('http', () => {\n    const logRequests = app.get('appConfiguration').get('debug.logRequests') === true;\n    return new HTTP(logRequests, app.get('appLogger'));\n  });\n});\n\nmodule.exports = {\n  HTTP,\n  http,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/http/http.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 310,
    "kind": "typedef",
    "name": "HTTPFetchOptions",
    "memberof": "src/services/http/http.js",
    "static": true,
    "longname": "src/services/http/http.js~HTTPFetchOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The request method."
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "headers",
        "description": "The request headers."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The request body."
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "qs",
        "description": "The request query string parameters."
      },
      {
        "nullable": true,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "An Express request object used to get extra infromation\n                                    (like headers and the IP.)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "HTTPFetchOptions"
    }
  },
  {
    "__docId__": 311,
    "kind": "external",
    "name": "Headers",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Headers",
    "memberof": "src/services/http/http.js",
    "static": true,
    "longname": "src/services/http/http.js~Headers",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 312,
    "kind": "class",
    "name": "HTTP",
    "memberof": "src/services/http/http.js",
    "static": true,
    "longname": "src/services/http/http.js~HTTP",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/http/http.js",
    "importStyle": "{HTTP}",
    "description": "A set of utilities to work with HTTP requests and responses.",
    "lineNumber": 19,
    "interface": false
  },
  {
    "__docId__": 313,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/http/http.js~HTTP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/http.js~HTTP#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "logRequests",
        "description": "Whether or not to log the requests and their responses."
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "If `logRequests` is `true`, this will be used to log the requests\n                             and responses information."
      }
    ]
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "_logRequests",
    "memberof": "src/services/http/http.js~HTTP",
    "static": false,
    "longname": "src/services/http/http.js~HTTP#_logRequests",
    "access": "protected",
    "description": "Whether or not to log the requests and their responses.",
    "lineNumber": 33,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "_appLogger",
    "memberof": "src/services/http/http.js~HTTP",
    "static": false,
    "longname": "src/services/http/http.js~HTTP#_appLogger",
    "access": "protected",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 40,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "AppLogger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "getIPFromRequest",
    "memberof": "src/services/http/http.js~HTTP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/http.js~HTTP#getIPFromRequest",
    "access": "public",
    "description": "Try to get the IP from a given request.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The request from which it will try to obtain the IP address."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "getCustomHeadersFromRequest",
    "memberof": "src/services/http/http.js~HTTP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/http.js~HTTP#getCustomHeadersFromRequest",
    "access": "public",
    "description": "Creates a dictionary with all the custom headers a request has. By custom header it means all\nthe headers which name start with `x-`.\nThis method doesn't copy `x-forwarded-for` as the `fetch` method generates it by calling\n`getIPFromRequest`.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The request from which it will try to get the headers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "normalizeHeaders",
    "memberof": "src/services/http/http.js~HTTP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/http.js~HTTP#normalizeHeaders",
    "access": "public",
    "description": "It takes a dictionary of headers and normalize the names so each word will start with an\nupper case character. This is helpful in case you added custom headers and didn't care about\nthe casing, or when copying headers from a server request, in which case they are all\ntranformed to lower case.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "headers",
        "description": "The dictionary of headers to normalize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "fetch",
    "memberof": "src/services/http/http.js~HTTP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/http.js~HTTP#fetch",
    "access": "public",
    "description": "Make a request.",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The request URL."
      },
      {
        "nullable": null,
        "types": [
          "HTTPFetchOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The request options."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 321,
    "kind": "get",
    "name": "logRequests",
    "memberof": "src/services/http/http.js~HTTP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/http.js~HTTP#logRequests",
    "access": "public",
    "description": "Whether or not to log the requests and their responses.",
    "lineNumber": 170,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "_logRequest",
    "memberof": "src/services/http/http.js~HTTP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/http.js~HTTP#_logRequest",
    "access": "private",
    "description": "Log a a request information using the `appLogger` service.",
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The request URL."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options generated by the `fetch` method."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.method",
        "description": "The request method."
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.header",
        "description": "The request headers."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.body",
        "description": "The request body."
      }
    ],
    "return": null
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "_logResponse",
    "memberof": "src/services/http/http.js~HTTP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/http.js~HTTP#_logResponse",
    "access": "private",
    "description": "Log a a response information using the `appLogger` service.",
    "lineNumber": 206,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "The response object returned by `node-fetch`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "response.url",
        "description": "The requested URL."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "response.status",
        "description": "The response HTTP status."
      },
      {
        "nullable": null,
        "types": [
          "Headers"
        ],
        "spread": false,
        "optional": false,
        "name": "response.headers",
        "description": "The response headers dictionary."
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "variable",
    "name": "http",
    "memberof": "src/services/http/http.js",
    "static": true,
    "longname": "src/services/http/http.js~http",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/http/http.js",
    "importStyle": "{http}",
    "description": "The service provider that once registered on the app container will set an instance of\n`HTTP` as the `http` service. The provider also checks the `debug.logRequests` setting on\nthe app configuration in order to enable or not the logging of requests.",
    "examples": [
      "// Register it on the container\ncontainer.register(http);\n// Getting access to the service instance\nconst http = container.get('http');"
    ],
    "lineNumber": 232,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 325,
    "kind": "file",
    "name": "src/services/http/index.js",
    "content": "const { apiClient } = require('./apiClient');\nconst { http } = require('./http');\nconst { responsesBuilder } = require('./responsesBuilder');\nconst { providers } = require('../../utils/wrappers');\n/**\n * The providers collection for the HTTP services.\n * @type {Provider}\n * @property {Provider} apiClient        The provider for {@link APIClient}.\n * @property {Provider} http             The provider for {@link HTTP}.\n * @property {Provider} responsesBuilder The provider for {@link ResponsesBuilder}.\n */\nconst httpServices = providers({\n  apiClient,\n  http,\n  responsesBuilder,\n});\n\nmodule.exports = httpServices;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/http/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 326,
    "kind": "variable",
    "name": "httpServices",
    "memberof": "src/services/http/index.js",
    "static": true,
    "longname": "src/services/http/index.js~httpServices",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/http/index.js",
    "importStyle": "httpServices",
    "description": "The providers collection for the HTTP services.",
    "lineNumber": 12,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Provider"
        ],
        "spread": false,
        "optional": false,
        "name": "apiClient",
        "description": "The provider for {@link APIClient}."
      },
      {
        "nullable": null,
        "types": [
          "Provider"
        ],
        "spread": false,
        "optional": false,
        "name": "http",
        "description": "The provider for {@link HTTP}."
      },
      {
        "nullable": null,
        "types": [
          "Provider"
        ],
        "spread": false,
        "optional": false,
        "name": "responsesBuilder",
        "description": "The provider for {@link ResponsesBuilder}."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 327,
    "kind": "file",
    "name": "src/services/http/responsesBuilder.js",
    "content": "const statuses = require('statuses');\nconst { provider } = require('../../utils/wrappers');\n/**\n * @typedef {Object} ResponsesBuilderPostMessageOptions It allows customization of a post message\n *                                                      HTML template\n * @property {?string}  [options.target='window.opener'] The target that will emit the\n *                                                       `postMessage`.\n * @property {?Boolean} [options.close=true]             Whether or not to do a `window.close`\n *                                                       after sending the message.\n * @property {?number}  [options.closeDelay=700]         How many ms should it wait before closing\n *                                                       the window, if `options.close` is `true`.\n */\n\n/**\n * A utility service to build server responses.\n */\nclass ResponsesBuilder {\n  /**\n   * Class constructor.\n   * @param {AppConfiguration} appConfiguration To get the app version.\n   */\n  constructor(appConfiguration) {\n    /**\n     * A local reference for the `appConfiguration` service.\n     * @type {AppConfiguration}\n     * @access protected\n     * @ignore\n     */\n    this._appConfiguration = appConfiguration;\n  }\n  /**\n   * Generates and sends a JSON response.\n   * The generated looks like this:\n   * ```\n   * {\n   *   metadata: {\n   *     version: '[app-version]',\n   *     status: [http-status],\n   *   },\n   *   data: [...],\n   * }\n   * ```\n   * @param {ExpressResponse} res                  The Express response object necessary to write\n   *                                               the JSON.\n   * @param {Object}          data                 The information for the `data` key.\n   * @param {number}          [status=statuses.ok] The HTTP status. Jimpex uses the `statuses`\n   *                                               package to reference HTTP statuses, that's why\n   *                                               the default is `statuses.ok`(200).\n   * @param {Object}          [metadata={}]        Extra information to include on the `metadata`\n   *                                               key.\n   */\n  json(res, data, status = statuses.ok, metadata = {}) {\n    res\n    .status(status)\n    .json({\n      metadata: Object.assign({\n        version: this._appConfiguration.get('version'),\n        status,\n      }, metadata),\n      data,\n    })\n    .end();\n  }\n  /**\n   * Generates and send an HTML response that emits a post message.\n   * The post message will be prefixed with the value of the configuration setting\n   * `postMessagesPrefix`.\n   * @param {ExpressResponse}                   res                  The Express response object\n   *                                                                 necessary to write the HTML.\n   * @param {string}                            title                The title for the HTML.\n   * @param {string}                            message              The contents of the post\n   *                                                                 message.\n   * @param {number}                            [status=statuses.ok] The HTTP status. Jimpex uses\n   *                                                                 the `statuses` package to\n   *                                                                 reference HTTP statuses,\n   *                                                                 that's why the default is\n   *                                                                 `statuses.ok`(200). Custom\n   *                                                                 options for the HTML.\n   * @param {ResponsesBuilderPostMessageOptions} [options={}]        Options to customize the HTML.\n   */\n  htmlPostMessage(\n    res,\n    title,\n    message,\n    status = statuses.ok,\n    options = {}\n  ) {\n    const prefix = this._appConfiguration.get('postMessagesPrefix') || '';\n    const target = options.target || 'window.opener';\n    const close = typeof options.close !== 'undefined' ? options.close : true;\n    const defaultCloseDelay = 700;\n    const closeDelay = options.closeDelay || defaultCloseDelay;\n    const closeCode = close ?\n      `setTimeout(function() { window.close(); }, ${closeDelay});` :\n      '';\n    const html = this._htmlTemplate(title, `\n      (function() {\n        if (${target}) {\n          ${target}.postMessage('${prefix}${message}', '*');\n          ${closeCode}\n        }\n      })();\n      `);\n\n    res.setHeader('Content-Type', 'text/html');\n    res.setHeader('Cache-Control', 'no-cache, max-age=0, must-revalidate, no-store');\n    res.status(status);\n    res.write(html);\n    res.end();\n  }\n  /**\n   * Generates a basic HTML template for other services to use.\n   * @param {string} title The HTML `<title />` attribute.\n   * @param {string} code  Javascript code to be wrapped on a `<script />` tag.\n   * @return {string}\n   * @ignore\n   * @access protected\n   */\n  _htmlTemplate(title, code) {\n    return `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\" />\n          <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" />\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n          <title>${title}</title>\n        </head>\n        <body>\n          <script type=\"text/javascript\">\n          ${code}\n        </script>\n      </body>\n    </html>\n    `;\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `ResponsesBuilder` as the `responsesBuilder` service.\n * @example\n * // Register it on the container\n * container.register(responsesBuilder);\n * // Getting access to the service instance\n * const responsesBuilder = container.get('responsesBuilder');\n * @type {Provider}\n */\nconst responsesBuilder = provider((app) => {\n  app.set('responsesBuilder', () => new ResponsesBuilder(\n    app.get('appConfiguration')\n  ));\n});\n\nmodule.exports = {\n  ResponsesBuilder,\n  responsesBuilder,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/http/responsesBuilder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 328,
    "kind": "typedef",
    "name": "ResponsesBuilderPostMessageOptions",
    "memberof": "src/services/http/responsesBuilder.js",
    "static": true,
    "longname": "src/services/http/responsesBuilder.js~ResponsesBuilderPostMessageOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'window.opener'",
        "defaultRaw": "'window.opener'",
        "name": "options.target",
        "description": "The target that will emit the\n                                                      `postMessage`."
      },
      {
        "nullable": true,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.close",
        "description": "Whether or not to do a `window.close`\n                                                      after sending the message."
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "700",
        "defaultRaw": 700,
        "name": "options.closeDelay",
        "description": "How many ms should it wait before closing\n                                                      the window, if `options.close` is `true`."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ResponsesBuilderPostMessageOptions"
    }
  },
  {
    "__docId__": 329,
    "kind": "class",
    "name": "ResponsesBuilder",
    "memberof": "src/services/http/responsesBuilder.js",
    "static": true,
    "longname": "src/services/http/responsesBuilder.js~ResponsesBuilder",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/http/responsesBuilder.js",
    "importStyle": "{ResponsesBuilder}",
    "description": "A utility service to build server responses.",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 330,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/http/responsesBuilder.js~ResponsesBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/responsesBuilder.js~ResponsesBuilder#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "AppConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "appConfiguration",
        "description": "To get the app version."
      }
    ]
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "_appConfiguration",
    "memberof": "src/services/http/responsesBuilder.js~ResponsesBuilder",
    "static": false,
    "longname": "src/services/http/responsesBuilder.js~ResponsesBuilder#_appConfiguration",
    "access": "protected",
    "description": "A local reference for the `appConfiguration` service.",
    "lineNumber": 29,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "AppConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "json",
    "memberof": "src/services/http/responsesBuilder.js~ResponsesBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/responsesBuilder.js~ResponsesBuilder#json",
    "access": "public",
    "description": "Generates and sends a JSON response.\nThe generated looks like this:\n```\n{\n  metadata: {\n    version: '[app-version]',\n    status: [http-status],\n  },\n  data: [...],\n}\n```",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The Express response object necessary to write\n                                              the JSON."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The information for the `data` key."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "statuses.ok",
        "defaultRaw": "statuses.ok",
        "name": "status",
        "description": "The HTTP status. Jimpex uses the `statuses`\n                                              package to reference HTTP statuses, that's why\n                                              the default is `statuses.ok`(200)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "metadata",
        "description": "Extra information to include on the `metadata`\n                                              key."
      }
    ],
    "return": null
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "htmlPostMessage",
    "memberof": "src/services/http/responsesBuilder.js~ResponsesBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/responsesBuilder.js~ResponsesBuilder#htmlPostMessage",
    "access": "public",
    "description": "Generates and send an HTML response that emits a post message.\nThe post message will be prefixed with the value of the configuration setting\n`postMessagesPrefix`.",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The Express response object\n                                                                necessary to write the HTML."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "The title for the HTML."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The contents of the post\n                                                                message."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "statuses.ok",
        "defaultRaw": "statuses.ok",
        "name": "status",
        "description": "The HTTP status. Jimpex uses\n                                                                the `statuses` package to\n                                                                reference HTTP statuses,\n                                                                that's why the default is\n                                                                `statuses.ok`(200). Custom\n                                                                options for the HTML."
      },
      {
        "nullable": null,
        "types": [
          "ResponsesBuilderPostMessageOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Options to customize the HTML."
      }
    ],
    "return": null
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "_htmlTemplate",
    "memberof": "src/services/http/responsesBuilder.js~ResponsesBuilder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/http/responsesBuilder.js~ResponsesBuilder#_htmlTemplate",
    "access": "protected",
    "description": "Generates a basic HTML template for other services to use.",
    "lineNumber": 119,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "The HTML `<title />` attribute."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Javascript code to be wrapped on a `<script />` tag."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 335,
    "kind": "variable",
    "name": "responsesBuilder",
    "memberof": "src/services/http/responsesBuilder.js",
    "static": true,
    "longname": "src/services/http/responsesBuilder.js~responsesBuilder",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/http/responsesBuilder.js",
    "importStyle": "{responsesBuilder}",
    "description": "The service provider that once registered on the app container will set an instance of\n`ResponsesBuilder` as the `responsesBuilder` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(responsesBuilder);\n// Getting access to the service instance\nconst responsesBuilder = container.get('responsesBuilder');"
    ],
    "lineNumber": 148,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 336,
    "kind": "file",
    "name": "src/services/index.js",
    "content": "const common = require('./common');\nconst frontend = require('./frontend');\nconst html = require('./html');\nconst http = require('./http');\nconst utils = require('./utils');\n\nmodule.exports = {\n  common,\n  frontend,\n  html,\n  http,\n  utils,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 337,
    "kind": "file",
    "name": "src/services/utils/ensureBearerToken.js",
    "content": "const statuses = require('statuses');\nconst ObjectUtils = require('wootils/shared/objectUtils');\nconst { providerCreator } = require('../../utils/wrappers');\n\n/**\n * @typedef {Object} EnsureBearerTokenErrorOptions\n * @description These options allow you to modify the error generated by the middleware when the\n *              request doesn't have a valid token.\n * @property {string} [message='Unauthorized'] The error message for the response.\n * @property {number} [status=401]             The HTTP status that will be added to error context\n *                                             information.\n * @property {Object} [response={}]            Context information that the error handler can read\n *                                             and add to the default response.\n */\n\n/**\n * @typedef {Object} EnsureBearerTokenOptions\n * @descriptions The options for how to validate the token and, possibly, create the errors.\n * @property {EnsureBearerTokenErrorOptions} [error]         The options to modify the error\n *                                                           generated by the middleware when the\n *                                                           request doesn't have a valid token.\n * @property {RegExp}                        [expression]    The regular expression used to\n *                                                           extract the token from the request\n *                                                           authorization header.\n * @property {string}                        [local='token'] The property inside the `res.locals`\n *                                                           where the token, if found, will be\n *                                                           saved.\n */\n\n/**\n * This service gives you a middleware that verifies if a request has an `Authorization` header\n * with a bearer token; if it does, the token will be saved on the `res.locals`, otherwise, it\n * will generate an error.\n */\nclass EnsureBearerToken {\n  /**\n   * @param {Class}                     AppError     To format the error caused when the request\n   *                                                 doesn't have a valid token.\n   * @param {EnsureBearerTokenOptions}  [options={}] The options to customize the middleware\n   *                                                 behavior: how to validate the token, how to\n   *                                                 save it and what kind of error should\n   *                                                 generate.\n   */\n  constructor(AppError, options = {}) {\n    /**\n     * A local reference for the class the app uses to generate errors.\n     * @type {Class}\n     * @access protected\n     * @ignore\n     */\n    this._AppError = AppError;\n    /**\n     * The options that define how the middleware validates the token, saves it and generates\n     * the possible error.\n     * @type {EnsureBearerTokenOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = ObjectUtils.merge(\n      {\n        error: {\n          message: 'Unauthorized',\n          status: statuses.unauthorized,\n          response: {},\n        },\n        expression: /bearer (.*?)(?:$|\\s)/i,\n        local: 'token',\n      },\n      options\n    );\n  }\n  /**\n   * Creates the middleware that will validate the presence of a bearer token on the request\n   * authorization header.\n   * @return {ExpressMiddleware}\n   */\n  middleware() {\n    return (req, res, next) => {\n      let unauthorized = true;\n      const { headers: { authorization } } = req;\n      if (authorization) {\n        const matches = this._options.expression.exec(authorization);\n        if (matches) {\n          const [, token] = matches;\n          res.locals[this._options.local] = token;\n          unauthorized = false;\n        }\n      }\n\n      if (unauthorized) {\n        const { error } = this._options;\n        next(new this._AppError(error.message, {\n          status: error.status,\n          response: error.response,\n        }));\n      } else {\n        next();\n      }\n    };\n  }\n  /**\n   * The options that define how the middleware validates the token, saves it and generates\n   * the possible error.\n   * @type {EnsureBearerTokenOptions}\n   */\n  get options() {\n    return this._options;\n  }\n}\n/**\n * Generates a \"service middleware\" that can be used on route controllers in order to validate\n * the presence of a bearer token on the requests authorization header.\n * @type {ProviderCreator}\n * @param {EnsureBearerTokenOptions} options The options to customize the middleware behavior: how\n *                                           to validate the token, how to save it and what kind\n *                                           of error should generate.\n */\nconst ensureBearerToken = providerCreator((options) => (app) => {\n  app.set(\n    'ensureBearerToken',\n    () => (new EnsureBearerToken(app.get('AppError'), options)).middleware()\n  );\n});\n\nmodule.exports = {\n  EnsureBearerToken,\n  ensureBearerToken,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/utils/ensureBearerToken.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 338,
    "kind": "typedef",
    "name": "EnsureBearerTokenErrorOptions",
    "memberof": "src/services/utils/ensureBearerToken.js",
    "static": true,
    "longname": "src/services/utils/ensureBearerToken.js~EnsureBearerTokenErrorOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "These options allow you to modify the error generated by the middleware when the\n             request doesn't have a valid token."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'Unauthorized'",
        "defaultRaw": "'Unauthorized'",
        "name": "message",
        "description": "The error message for the response."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "401",
        "defaultRaw": 401,
        "name": "status",
        "description": "The HTTP status that will be added to error context\n                                            information."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "response",
        "description": "Context information that the error handler can read\n                                            and add to the default response."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "EnsureBearerTokenErrorOptions"
    }
  },
  {
    "__docId__": 339,
    "kind": "typedef",
    "name": "EnsureBearerTokenOptions",
    "memberof": "src/services/utils/ensureBearerToken.js",
    "static": true,
    "longname": "src/services/utils/ensureBearerToken.js~EnsureBearerTokenOptions",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@descriptions",
        "tagValue": "The options for how to validate the token and, possibly, create the errors."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "EnsureBearerTokenErrorOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "error",
        "description": "The options to modify the error\n                                                          generated by the middleware when the\n                                                          request doesn't have a valid token."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": true,
        "name": "expression",
        "description": "The regular expression used to\n                                                          extract the token from the request\n                                                          authorization header."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'token'",
        "defaultRaw": "'token'",
        "name": "local",
        "description": "The property inside the `res.locals`\n                                                          where the token, if found, will be\n                                                          saved."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "EnsureBearerTokenOptions"
    }
  },
  {
    "__docId__": 340,
    "kind": "class",
    "name": "EnsureBearerToken",
    "memberof": "src/services/utils/ensureBearerToken.js",
    "static": true,
    "longname": "src/services/utils/ensureBearerToken.js~EnsureBearerToken",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/utils/ensureBearerToken.js",
    "importStyle": "{EnsureBearerToken}",
    "description": "This service gives you a middleware that verifies if a request has an `Authorization` header\nwith a bearer token; if it does, the token will be saved on the `res.locals`, otherwise, it\nwill generate an error.",
    "lineNumber": 35,
    "interface": false
  },
  {
    "__docId__": 341,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/utils/ensureBearerToken.js~EnsureBearerToken",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/utils/ensureBearerToken.js~EnsureBearerToken#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "AppError",
        "description": "To format the error caused when the request\n                                                doesn't have a valid token."
      },
      {
        "nullable": null,
        "types": [
          "EnsureBearerTokenOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to customize the middleware\n                                                behavior: how to validate the token, how to\n                                                save it and what kind of error should\n                                                generate."
      }
    ]
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "_AppError",
    "memberof": "src/services/utils/ensureBearerToken.js~EnsureBearerToken",
    "static": false,
    "longname": "src/services/utils/ensureBearerToken.js~EnsureBearerToken#_AppError",
    "access": "protected",
    "description": "A local reference for the class the app uses to generate errors.",
    "lineNumber": 51,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 343,
    "kind": "member",
    "name": "_options",
    "memberof": "src/services/utils/ensureBearerToken.js~EnsureBearerToken",
    "static": false,
    "longname": "src/services/utils/ensureBearerToken.js~EnsureBearerToken#_options",
    "access": "protected",
    "description": "The options that define how the middleware validates the token, saves it and generates\nthe possible error.",
    "lineNumber": 59,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "EnsureBearerTokenOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "middleware",
    "memberof": "src/services/utils/ensureBearerToken.js~EnsureBearerToken",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/utils/ensureBearerToken.js~EnsureBearerToken#middleware",
    "access": "public",
    "description": "Creates the middleware that will validate the presence of a bearer token on the request\nauthorization header.",
    "lineNumber": 77,
    "return": {
      "nullable": null,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 345,
    "kind": "get",
    "name": "options",
    "memberof": "src/services/utils/ensureBearerToken.js~EnsureBearerToken",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/utils/ensureBearerToken.js~EnsureBearerToken#options",
    "access": "public",
    "description": "The options that define how the middleware validates the token, saves it and generates\nthe possible error.",
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "EnsureBearerTokenOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 346,
    "kind": "variable",
    "name": "ensureBearerToken",
    "memberof": "src/services/utils/ensureBearerToken.js",
    "static": true,
    "longname": "src/services/utils/ensureBearerToken.js~ensureBearerToken",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/utils/ensureBearerToken.js",
    "importStyle": "{ensureBearerToken}",
    "description": "Generates a \"service middleware\" that can be used on route controllers in order to validate\nthe presence of a bearer token on the requests authorization header.",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "EnsureBearerTokenOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to customize the middleware behavior: how\n                                          to validate the token, how to save it and what kind\n                                          of error should generate."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "ProviderCreator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 347,
    "kind": "file",
    "name": "src/services/utils/index.js",
    "content": "const { ensureBearerToken } = require('./ensureBearerToken');\nconst { providers } = require('../../utils/wrappers');\n/**\n * The providers collection for the utils services.\n * @type {Provider}\n * @property {Provider} ensureBearerToken The provider for {@link EnsureBearerToken}.\n */\nconst utilsServices = providers({\n  ensureBearerToken,\n});\n\nmodule.exports = utilsServices;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/services/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 348,
    "kind": "variable",
    "name": "utilsServices",
    "memberof": "src/services/utils/index.js",
    "static": true,
    "longname": "src/services/utils/index.js~utilsServices",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/services/utils/index.js",
    "importStyle": "utilsServices",
    "description": "The providers collection for the utils services.",
    "lineNumber": 8,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Provider"
        ],
        "spread": false,
        "optional": false,
        "name": "ensureBearerToken",
        "description": "The provider for {@link EnsureBearerToken}."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 349,
    "kind": "file",
    "name": "src/typedef.js",
    "content": "/**\n * @external {AppConfiguration}\n * https://homer0.github.io/wootils/class/wootils/node/appConfiguration.js~AppConfiguration.html\n */\n\n/**\n * @external {APIClientBase}\n * https://homer0.github.io/wootils/class/wootils/shared/apiClient.js~APIClient.html\n */\n\n/**\n * @external {APIClientEndpoints}\n * https://homer0.github.io/wootils/typedef/index.html#static-typedef-APIClientEndpoints\n */\n\n/**\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n */\n\n/**\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n */\n\n/**\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n */\n\n/**\n * @external {ErrorHandler}\n * https://homer0.github.io/wootils/class/wootils/node/errorHandler.js~ErrorHandler.html\n */\n\n/**\n * @external {RootRequire}\n * https://homer0.github.io/wootils/function/index.html#static-function-rootRequire\n */\n\n/**\n * @external {Express} https://expressjs.com/en/4x/api.html\n */\n\n/**\n * @external {ExpressMiddleware} http://expressjs.com/en/guide/using-middleware.html\n */\n\n/**\n * @external {ExpressRequest} https://expressjs.com/en/4x/api.html#req\n */\n\n/**\n * @external {ExpressResponse} https://expressjs.com/en/4x/api.html#res\n */\n\n/**\n * @external {ExpressRouter} https://expressjs.com/en/4x/api.html#router\n */\n\n/**\n * @typdef {function} ExpressNext\n * @description A function to call the next middleware. If an argument is specified, it will be\n *              handled as an error and sent to the `errorHandler` service.\n * @param {?Error} error The error to sent to the error handler.\n */\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/typedef.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 350,
    "kind": "external",
    "name": "AppConfiguration",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/appConfiguration.js~AppConfiguration.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~AppConfiguration",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 351,
    "kind": "external",
    "name": "APIClientBase",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/shared/apiClient.js~APIClient.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~APIClientBase",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 352,
    "kind": "external",
    "name": "APIClientEndpoints",
    "externalLink": "https://homer0.github.io/wootils/typedef/index.html#static-typedef-APIClientEndpoints",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~APIClientEndpoints",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 353,
    "kind": "external",
    "name": "PathUtils",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~PathUtils",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 354,
    "kind": "external",
    "name": "Logger",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Logger",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 355,
    "kind": "external",
    "name": "EnvironmentUtils",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~EnvironmentUtils",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 356,
    "kind": "external",
    "name": "ErrorHandler",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/errorHandler.js~ErrorHandler.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ErrorHandler",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 357,
    "kind": "external",
    "name": "RootRequire",
    "externalLink": "https://homer0.github.io/wootils/function/index.html#static-function-rootRequire",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~RootRequire",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 358,
    "kind": "external",
    "name": "Express",
    "externalLink": "https://expressjs.com/en/4x/api.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Express",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 359,
    "kind": "external",
    "name": "ExpressMiddleware",
    "externalLink": "http://expressjs.com/en/guide/using-middleware.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ExpressMiddleware",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 360,
    "kind": "external",
    "name": "ExpressRequest",
    "externalLink": "https://expressjs.com/en/4x/api.html#req",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ExpressRequest",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 361,
    "kind": "external",
    "name": "ExpressResponse",
    "externalLink": "https://expressjs.com/en/4x/api.html#res",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ExpressResponse",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 362,
    "kind": "external",
    "name": "ExpressRouter",
    "externalLink": "https://expressjs.com/en/4x/api.html#router",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ExpressRouter",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 363,
    "kind": "file",
    "name": "src/utils/functions.js",
    "content": "/**\n * Removes any leading slash from a URL.\n * @param {string} url The URL to format.\n * @return {string}\n */\nconst removeLeadingSlash = (url) => url.replace(/^\\/+/, '');\n/**\n * Removes any trailing slash from a URL.\n * @param {string} url The URL to format.\n * @return {string}\n */\nconst removeTrailingSlash = (url) => url.replace(/\\/+$/, '');\n/**\n * Remove any leading and trailing slash from a URL.\n * @param {string}  url             The URL to format.\n * @param {boolean} [leading=true]  Whether or not to remove any leading slash.\n * @param {boolean} [trailing=true] Whether or not to remove the trailing slash.\n * @return {string}\n */\nconst removeSlashes = (url, leading = true, trailing = true) => {\n  const newUrl = leading ? removeLeadingSlash(url) : url;\n  return trailing ? removeTrailingSlash(newUrl) : newUrl;\n};\n/**\n * Escapes a string to be used on `new RegExp(...)`.\n * @param {string} text The text to escape.\n * @return {string}\n */\nconst escapeForRegExp = (text) => text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n/**\n * Given a server route definition, this function creates a regular expression to match\n * it: The expression replaces the routes parameters with placeholders so it can be compared\n * with real routes.\n * @param {string}  route                 The route from which the expression will be created.\n * @param {boolean} [leadingSlash=true]   Whether or not the expression should match a leading\n *                                        slash.\n * @param {boolean} [trailingSlash=false] Whether or not the expression should match a trailing\n *                                        slash. The reason this is `false` by default is because\n *                                        these expressions are often used to match against\n *                                        incoming requests, and they don't have a trailing slash.\n * @return {RegExp}\n */\nconst createRouteExpression = (route, leadingSlash = true, trailingSlash = false) => {\n  let expression = removeSlashes(route)\n  .split('/')\n  .map((part) => (part.startsWith(':') ? '(?:([^\\\\/]+?))' : escapeForRegExp(part)))\n  .join('\\\\/');\n  if (leadingSlash) {\n    expression = `\\\\/${expression}`;\n  }\n  if (trailingSlash) {\n    expression = `${expression}\\\\/`;\n  }\n\n  return new RegExp(expression);\n};\n\nmodule.exports = {\n  createRouteExpression,\n  escapeForRegExp,\n  removeLeadingSlash,\n  removeSlashes,\n  removeTrailingSlash,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/utils/functions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 364,
    "kind": "function",
    "name": "createRouteExpression",
    "memberof": "src/utils/functions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/functions.js~createRouteExpression",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/utils/functions.js",
    "importStyle": "{createRouteExpression}",
    "description": "Given a server route definition, this function creates a regular expression to match\nit: The expression replaces the routes parameters with placeholders so it can be compared\nwith real routes.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The route from which the expression will be created."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "leadingSlash",
        "description": "Whether or not the expression should match a leading\n                                       slash."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "trailingSlash",
        "description": "Whether or not the expression should match a trailing\n                                       slash. The reason this is `false` by default is because\n                                       these expressions are often used to match against\n                                       incoming requests, and they don't have a trailing slash."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 365,
    "kind": "function",
    "name": "escapeForRegExp",
    "memberof": "src/utils/functions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/functions.js~escapeForRegExp",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/utils/functions.js",
    "importStyle": "{escapeForRegExp}",
    "description": "Escapes a string to be used on `new RegExp(...)`.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to escape."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 366,
    "kind": "function",
    "name": "removeLeadingSlash",
    "memberof": "src/utils/functions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/functions.js~removeLeadingSlash",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/utils/functions.js",
    "importStyle": "{removeLeadingSlash}",
    "description": "Removes any leading slash from a URL.",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL to format."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 367,
    "kind": "function",
    "name": "removeSlashes",
    "memberof": "src/utils/functions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/functions.js~removeSlashes",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/utils/functions.js",
    "importStyle": "{removeSlashes}",
    "description": "Remove any leading and trailing slash from a URL.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL to format."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "leading",
        "description": "Whether or not to remove any leading slash."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "trailing",
        "description": "Whether or not to remove the trailing slash."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 368,
    "kind": "function",
    "name": "removeTrailingSlash",
    "memberof": "src/utils/functions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/functions.js~removeTrailingSlash",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/utils/functions.js",
    "importStyle": "{removeTrailingSlash}",
    "description": "Removes any trailing slash from a URL.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL to format."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 369,
    "kind": "file",
    "name": "src/utils/wrappers.js",
    "content": "/**\n * @typedef {Object} Provider\n * @description An object that when registered on Jimpex will take care of setting up services\n *              and/or configuring the app. The method Jimpex uses to register a provider is\n *              {@link Jimpex#register} and is inherit from {@link Jimple}.\n * @property {ProviderRegistrationCallback} register The function Jimpex calls when registering\n *                                                   the provider.\n * @property {Boolean}                      provider A flag set to `true` to identify the resource\n *                                                   as a service provider.\n */\n\n/**\n * @typedef {function} ProviderCreator\n * @description A special kind of {@link Provider} because it can be used with\n *              {@link Jimpex#register} as a regular provider, or it can be called as a function\n *              with custom paramters in order to obtain a \"configured {@link Provider}\"\n * @return {Provider}\n */\n\n/**\n * @typedef {function} ProviderRegistrationCallback\n * @description The function called by the app container in order to register a service provider.\n * @param {Jimpex} app The instance of the app container.\n */\n\n/**\n * @typedef {function} ProviderCreatorCallback\n * @description A function called in order to generate a {@link Provider}. They usually have\n *              different options that will be sent to the service registration.\n * @return {ProviderRegistrationCallback}\n */\n\n/**\n * @typedef {Object} Controller\n * @description An object that when mounted on Jimpex will take care of handling a list of specific\n *              routes. The method Jimpex uses to mount a controller is {@link Jimpex#mount}.\n * @property {ControllerMountCallback} connect    The function Jimpex calls when mounting the\n *                                                controller.\n * @property {Boolean}                 controller A flag set to `true` to identify the resource\n *                                                as a routes controller.\n */\n\n/**\n * @typedef {function} ControllerCreator\n * @description A special kind of {@link Controller} because it can be used with\n *              {@link Jimpex#mount} as a regular controller, or it can be called as a function\n *              with custom paramters in order to obtain a \"configured {@link Controller}\"\n * @return {Controller}\n */\n\n/**\n * @typedef {function} ControllerMountCallback\n * @description The function called by the app container in order to mount a routes controller.\n * @param {Jimpex} app   The instance of the app container.\n * @param {string} route The route where the controller will be mounted.\n * @return {Array|ExpressRouter} The list of routes the controller will manage, or a router\n *                               instance.\n */\n\n/**\n * @typedef {function} ControllerCreatorCallback\n * @description A function called in order to generate a {@link Controller}. They usually have\n *              different options that will be sent to the controller creation.\n * @return {ControllerMountCallback}\n */\n\n/**\n * @typedef {Object} Middleware\n * @description An object that when mounted on Jimpex add an {@link ExpressMiddleware} to the app.\n *              The method Jimpex uses to mount a middleware is {@link Jimpex#use}.\n * @property {MiddlewareUseCallback} connect    The function Jimpex calls when mounting the\n *                                              middleware.\n * @property {Boolean}               middleware A flag set to `true` to identify the resource\n *                                              as a middleware.\n */\n\n/**\n * @typedef {function} MiddlewareCreator\n * @description A special kind of {@link Middleware} because it can be used with\n *              {@link Jimpex#use} as a regular middleware, or it can be called as a function\n *              with custom paramters in order to obtain a \"configured {@link Middleware}\"\n * @return {Middleware}\n */\n\n/**\n * @typedef {function} MiddlewareUseCallback\n * @description The function called by the app container in order to use a middleware.\n * @param {Jimpex} app The instance of the app container.\n * @return {?ExpressMiddleware} A middleware for Express to use. It can also return `null` in case\n *                              there's a reason for the middleware not to be active.\n */\n\n/**\n * @typedef {function} MiddlewareCreatorCallback\n * @description A function called in order to generate a {@link Middleware}. They usually have\n *              different options that will be sent to the middleware creation.\n * @return {MiddlewareUseCallback}\n */\n\n/**\n * This is a helper the wrappers use in order to create an object by placing a given function\n * on an specific key.\n * @param {string}   name The name of the resource. It will also be added to the object as a\n *                        property with the value of `true`.\n * @param {string}   key  The key in which the function will be placed.\n * @param {function} fn   The function to insert in the object.\n * @return {Object}\n * @ignore\n */\nconst resource = (name, key, fn) => ({\n  [key]: fn,\n  [name]: true,\n});\n/**\n * Similar to `resource`, this helper creates an \"object\" and places a given function on an\n * specify key. The difference is that instead of being an actual object what gets created, it's\n * another function, then a proxy is added to that function in order to intercept the `key`\n * property and return the result of the function.\n *\n * This is kind of hard to explain, so let's compare it with `resource` and use a proper example:\n * - `resource`: (name, key, fn) => ({ [key]: fn, [name]: true })\n * - `resourceCreator`: ((name, key, creatorFn) => creatorFn(...) => fn)[key]: creatorFn()\n *\n * While `resource` is meant to create objects with a resource function, this is meant to create\n * those resource functions by sending them \"optional paramters\", and they are optionals because\n * if you access the `key` property, it would be the same as calling the `creatorFn` without\n * paramters.\n * @param {string}   name      The name of the resource, to be added as a property of both the\n *                             generated resource and the one with the proxy. The value of the\n *                             property will be `true`.\n * @param {string}   key       The key in which the creator function will be placed in case it's\n *                             used without parameters; and also the key in which the result\n *                             function from the creator will be placed if called with parameters.\n * @param {function} creatorFn The function that generates the \"resource function\".\n * @return {function}\n * @ignore\n */\nconst resourceCreator = (name, key, creatorFn) => new Proxy(\n  (...args) => resource(name, key, creatorFn(...args)),\n  {\n    name,\n    resource: null,\n    get(target, property) {\n      let result;\n      if (property === this.name) {\n        result = true;\n      } else if (property === key) {\n        if (this.resource === null) {\n          this.resource = creatorFn();\n        }\n        result = this.resource;\n      } else {\n        result = target[property];\n      }\n\n      return result;\n    },\n  }\n);\n/**\n * Generates a service provider for the app container.\n * @param {ProviderRegistrationCallback} registerFn A function that will be called the moment the\n *                                                  app registers the provider.\n * @return {Provider}\n */\nconst provider = (registerFn) => resource('provider', 'register', registerFn);\n/**\n * Generates a collection of service providers that can be registered all at once or one by one.\n * You can send the collection directly to the `.register()` and it will register all its\n * \"children\"; and if you want to register one provider at a time, you can access them by name,\n * as the collection is a regular object.\n * @example\n * const collection = providers({ one: providerOne, two: providerTwo });\n * // Register all at once\n * app.register(collection);\n * // Register one by one\n * app.register(collection.one);\n * app.register(collection.two);\n * @param {Object} items A dictionary of service providers; the keys will be for the collection\n *                       object, and the values the one that will get send to `.register()`.\n * @return {Provider}\n */\nconst providers = (items) => {\n  const invalidNames = Object.keys(items).some((name) => (\n    ['register', 'providers'].includes(name)\n  ));\n  if (invalidNames) {\n    throw new Error(\n      'You can\\'t create a collection with a providers called `register` or `providers`'\n    );\n  }\n\n  return Object.assign(\n    resource(\n      'providers',\n      'register',\n      (app) => Object.keys(items).forEach((item) => {\n        app.register(items[item]);\n      })\n    ),\n    items\n  );\n};\n/**\n * Generates a configurable service provider for the app container. It's configurable because\n * the creator, instead of just being sent to the container to register, it can also be called\n * as a function with custom parameters the service can receive.\n * @example\n * const myService = providerCreator((options) => (app) => {\n *   app.set('myService', () => new MyService(options));\n * });\n * @param {ProviderCreatorCallback} creatorFn The function that generates the provider.\n * @return {ProviderCreator}\n */\nconst providerCreator = (creatorFn) => resourceCreator('provider', 'register', creatorFn);\n/**\n * Generates a routes controller for the app container to mount.\n * @param {ControllerMountCallback} connectFn A function that will be called the moment the app\n *                                            mounts the controller. It should return a list of\n *                                            routes.\n * @return {Controller}\n */\nconst controller = (connectFn) => resource('controller', 'connect', connectFn);\n/**\n * Generates a configurable routes controller for the app to mount. It's configurable because\n * the creator, instead of just being sent to the container to mount, it can also be called\n * as a function with custom parameters the controller can receive.\n * @example\n * const myController = controllerCreator((options) => (app) => {\n *   const router = app.get('router');\n *   const ctrl = new MyController(options);\n *   return [router.get('...', ctrl.doSomething())];\n * });\n * @param {ProviderCreatorCallback} creatorFn The function that generates the controller.\n * @return {ProviderCreator}\n */\nconst controllerCreator = (creatorFn) => resourceCreator('controller', 'connect', creatorFn);\n/**\n * Generates a middleware for the app to use.\n * @param {MiddlewareUseCallback} connectFn A function that will be called the moment the app\n *                                          mounts the middleware.\n * @return {Middleware}\n */\nconst middleware = (connectFn) => resource('middleware', 'connect', connectFn);\n/**\n * Generates a configurable middleware for the app to use. It's configurable because the creator,\n * instead of just being sent to the container to use, it can also be called as a function with\n * custom parameters the middleware can receive.\n * @example\n * const myMiddleware = middlewareCreator((options) => (app) => (\n *   options.enabled ?\n *     (req, res, next) => {} :\n *     null\n * ));\n * @param {ProviderCreatorCallback} creatorFn The function that generates the middleware.\n * @return {ProviderCreator}\n */\nconst middlewareCreator = (creatorFn) => resourceCreator('middleware', 'connect', creatorFn);\n\nmodule.exports = {\n  provider,\n  providerCreator,\n  providers,\n  controller,\n  controllerCreator,\n  middleware,\n  middlewareCreator,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/jimpex/src/utils/wrappers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 370,
    "kind": "typedef",
    "name": "Provider",
    "memberof": "src/utils/wrappers.js",
    "static": true,
    "longname": "src/utils/wrappers.js~Provider",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "An object that when registered on Jimpex will take care of setting up services\n             and/or configuring the app. The method Jimpex uses to register a provider is\n             {@link Jimpex#register} and is inherit from {@link Jimple}."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "ProviderRegistrationCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "register",
        "description": "The function Jimpex calls when registering\n                                                  the provider."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "A flag set to `true` to identify the resource\n                                                  as a service provider."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Provider"
    }
  },
  {
    "__docId__": 371,
    "kind": "typedef",
    "name": "ProviderCreator",
    "memberof": "src/utils/wrappers.js",
    "static": true,
    "longname": "src/utils/wrappers.js~ProviderCreator",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "A special kind of {@link Provider} because it can be used with\n             {@link Jimpex#register} as a regular provider, or it can be called as a function\n             with custom paramters in order to obtain a \"configured {@link Provider}\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ProviderCreator"
    }
  },
  {
    "__docId__": 372,
    "kind": "typedef",
    "name": "ProviderRegistrationCallback",
    "memberof": "src/utils/wrappers.js",
    "static": true,
    "longname": "src/utils/wrappers.js~ProviderRegistrationCallback",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "The function called by the app container in order to register a service provider."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Jimpex"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The instance of the app container."
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ProviderRegistrationCallback"
    }
  },
  {
    "__docId__": 373,
    "kind": "typedef",
    "name": "ProviderCreatorCallback",
    "memberof": "src/utils/wrappers.js",
    "static": true,
    "longname": "src/utils/wrappers.js~ProviderCreatorCallback",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "A function called in order to generate a {@link Provider}. They usually have\n             different options that will be sent to the service registration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProviderRegistrationCallback"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ProviderCreatorCallback"
    }
  },
  {
    "__docId__": 374,
    "kind": "typedef",
    "name": "Controller",
    "memberof": "src/utils/wrappers.js",
    "static": true,
    "longname": "src/utils/wrappers.js~Controller",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "An object that when mounted on Jimpex will take care of handling a list of specific\n             routes. The method Jimpex uses to mount a controller is {@link Jimpex#mount}."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "ControllerMountCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "connect",
        "description": "The function Jimpex calls when mounting the\n                                               controller."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "controller",
        "description": "A flag set to `true` to identify the resource\n                                               as a routes controller."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Controller"
    }
  },
  {
    "__docId__": 375,
    "kind": "typedef",
    "name": "ControllerCreator",
    "memberof": "src/utils/wrappers.js",
    "static": true,
    "longname": "src/utils/wrappers.js~ControllerCreator",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "A special kind of {@link Controller} because it can be used with\n             {@link Jimpex#mount} as a regular controller, or it can be called as a function\n             with custom paramters in order to obtain a \"configured {@link Controller}\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Controller"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ControllerCreator"
    }
  },
  {
    "__docId__": 376,
    "kind": "typedef",
    "name": "ControllerMountCallback",
    "memberof": "src/utils/wrappers.js",
    "static": true,
    "longname": "src/utils/wrappers.js~ControllerMountCallback",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "The function called by the app container in order to mount a routes controller."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Jimpex"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The instance of the app container."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The route where the controller will be mounted."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array",
        "ExpressRouter"
      ],
      "spread": false,
      "description": "The list of routes the controller will manage, or a router\n                              instance."
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ControllerMountCallback"
    }
  },
  {
    "__docId__": 377,
    "kind": "typedef",
    "name": "ControllerCreatorCallback",
    "memberof": "src/utils/wrappers.js",
    "static": true,
    "longname": "src/utils/wrappers.js~ControllerCreatorCallback",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "A function called in order to generate a {@link Controller}. They usually have\n             different options that will be sent to the controller creation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ControllerMountCallback"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ControllerCreatorCallback"
    }
  },
  {
    "__docId__": 378,
    "kind": "typedef",
    "name": "Middleware",
    "memberof": "src/utils/wrappers.js",
    "static": true,
    "longname": "src/utils/wrappers.js~Middleware",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "An object that when mounted on Jimpex add an {@link ExpressMiddleware} to the app.\n             The method Jimpex uses to mount a middleware is {@link Jimpex#use}."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "MiddlewareUseCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "connect",
        "description": "The function Jimpex calls when mounting the\n                                             middleware."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware",
        "description": "A flag set to `true` to identify the resource\n                                             as a middleware."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Middleware"
    }
  },
  {
    "__docId__": 379,
    "kind": "typedef",
    "name": "MiddlewareCreator",
    "memberof": "src/utils/wrappers.js",
    "static": true,
    "longname": "src/utils/wrappers.js~MiddlewareCreator",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "A special kind of {@link Middleware} because it can be used with\n             {@link Jimpex#use} as a regular middleware, or it can be called as a function\n             with custom paramters in order to obtain a \"configured {@link Middleware}\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Middleware"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "MiddlewareCreator"
    }
  },
  {
    "__docId__": 380,
    "kind": "typedef",
    "name": "MiddlewareUseCallback",
    "memberof": "src/utils/wrappers.js",
    "static": true,
    "longname": "src/utils/wrappers.js~MiddlewareUseCallback",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "The function called by the app container in order to use a middleware."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Jimpex"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The instance of the app container."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "ExpressMiddleware"
      ],
      "spread": false,
      "description": "A middleware for Express to use. It can also return `null` in case\n                             there's a reason for the middleware not to be active."
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "MiddlewareUseCallback"
    }
  },
  {
    "__docId__": 381,
    "kind": "typedef",
    "name": "MiddlewareCreatorCallback",
    "memberof": "src/utils/wrappers.js",
    "static": true,
    "longname": "src/utils/wrappers.js~MiddlewareCreatorCallback",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "A function called in order to generate a {@link Middleware}. They usually have\n             different options that will be sent to the middleware creation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MiddlewareUseCallback"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "MiddlewareCreatorCallback"
    }
  },
  {
    "__docId__": 382,
    "kind": "function",
    "name": "resource",
    "memberof": "src/utils/wrappers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/wrappers.js~resource",
    "access": "public",
    "export": false,
    "importPath": "jimpex/src/utils/wrappers.js",
    "importStyle": null,
    "description": "This is a helper the wrappers use in order to create an object by placing a given function\non an specific key.",
    "lineNumber": 110,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the resource. It will also be added to the object as a\n                       property with the value of `true`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key in which the function will be placed."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to insert in the object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 383,
    "kind": "function",
    "name": "resourceCreator",
    "memberof": "src/utils/wrappers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/wrappers.js~resourceCreator",
    "access": "public",
    "export": false,
    "importPath": "jimpex/src/utils/wrappers.js",
    "importStyle": null,
    "description": "Similar to `resource`, this helper creates an \"object\" and places a given function on an\nspecify key. The difference is that instead of being an actual object what gets created, it's\nanother function, then a proxy is added to that function in order to intercept the `key`\nproperty and return the result of the function.\n\nThis is kind of hard to explain, so let's compare it with `resource` and use a proper example:\n- `resource`: (name, key, fn) => ({ [key]: fn, [name]: true })\n- `resourceCreator`: ((name, key, creatorFn) => creatorFn(...) => fn)[key]: creatorFn()\n\nWhile `resource` is meant to create objects with a resource function, this is meant to create\nthose resource functions by sending them \"optional paramters\", and they are optionals because\nif you access the `key` property, it would be the same as calling the `creatorFn` without\nparamters.",
    "lineNumber": 138,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the resource, to be added as a property of both the\n                            generated resource and the one with the proxy. The value of the\n                            property will be `true`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key in which the creator function will be placed in case it's\n                            used without parameters; and also the key in which the result\n                            function from the creator will be placed if called with parameters."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "creatorFn",
        "description": "The function that generates the \"resource function\"."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 384,
    "kind": "function",
    "name": "provider",
    "memberof": "src/utils/wrappers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/wrappers.js~provider",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/utils/wrappers.js",
    "importStyle": "{provider}",
    "description": "Generates a service provider for the app container.",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProviderRegistrationCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "registerFn",
        "description": "A function that will be called the moment the\n                                                 app registers the provider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 385,
    "kind": "function",
    "name": "providerCreator",
    "memberof": "src/utils/wrappers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/wrappers.js~providerCreator",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/utils/wrappers.js",
    "importStyle": "{providerCreator}",
    "description": "Generates a configurable service provider for the app container. It's configurable because\nthe creator, instead of just being sent to the container to register, it can also be called\nas a function with custom parameters the service can receive.",
    "examples": [
      "const myService = providerCreator((options) => (app) => {\n  app.set('myService', () => new MyService(options));\n});"
    ],
    "lineNumber": 215,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProviderCreatorCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "creatorFn",
        "description": "The function that generates the provider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProviderCreator"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 386,
    "kind": "function",
    "name": "providers",
    "memberof": "src/utils/wrappers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/wrappers.js~providers",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/utils/wrappers.js",
    "importStyle": "{providers}",
    "description": "Generates a collection of service providers that can be registered all at once or one by one.\nYou can send the collection directly to the `.register()` and it will register all its\n\"children\"; and if you want to register one provider at a time, you can access them by name,\nas the collection is a regular object.",
    "examples": [
      "const collection = providers({ one: providerOne, two: providerTwo });\n// Register all at once\napp.register(collection);\n// Register one by one\napp.register(collection.one);\napp.register(collection.two);"
    ],
    "lineNumber": 183,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "A dictionary of service providers; the keys will be for the collection\n                      object, and the values the one that will get send to `.register()`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 387,
    "kind": "function",
    "name": "controller",
    "memberof": "src/utils/wrappers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/wrappers.js~controller",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/utils/wrappers.js",
    "importStyle": "{controller}",
    "description": "Generates a routes controller for the app container to mount.",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "ControllerMountCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "connectFn",
        "description": "A function that will be called the moment the app\n                                           mounts the controller. It should return a list of\n                                           routes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Controller"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 388,
    "kind": "function",
    "name": "controllerCreator",
    "memberof": "src/utils/wrappers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/wrappers.js~controllerCreator",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/utils/wrappers.js",
    "importStyle": "{controllerCreator}",
    "description": "Generates a configurable routes controller for the app to mount. It's configurable because\nthe creator, instead of just being sent to the container to mount, it can also be called\nas a function with custom parameters the controller can receive.",
    "examples": [
      "const myController = controllerCreator((options) => (app) => {\n  const router = app.get('router');\n  const ctrl = new MyController(options);\n  return [router.get('...', ctrl.doSomething())];\n});"
    ],
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProviderCreatorCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "creatorFn",
        "description": "The function that generates the controller."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProviderCreator"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 389,
    "kind": "function",
    "name": "middleware",
    "memberof": "src/utils/wrappers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/wrappers.js~middleware",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/utils/wrappers.js",
    "importStyle": "{middleware}",
    "description": "Generates a middleware for the app to use.",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "MiddlewareUseCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "connectFn",
        "description": "A function that will be called the moment the app\n                                         mounts the middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Middleware"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 390,
    "kind": "function",
    "name": "middlewareCreator",
    "memberof": "src/utils/wrappers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/wrappers.js~middlewareCreator",
    "access": "public",
    "export": true,
    "importPath": "jimpex/src/utils/wrappers.js",
    "importStyle": "{middlewareCreator}",
    "description": "Generates a configurable middleware for the app to use. It's configurable because the creator,\ninstead of just being sent to the container to use, it can also be called as a function with\ncustom parameters the middleware can receive.",
    "examples": [
      "const myMiddleware = middlewareCreator((options) => (app) => (\n  options.enabled ?\n    (req, res, next) => {} :\n    null\n));"
    ],
    "lineNumber": 258,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProviderCreatorCallback"
        ],
        "spread": false,
        "optional": false,
        "name": "creatorFn",
        "description": "The function that generates the middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProviderCreator"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "kind": "index",
    "content": "# Jimpex\n\nExpress as dependency injection container.\n\nJimpex is an implementation of [Express](https://expressjs.com), one of the most popular web frameworks for Node, using [Jimple](https://github.com/fjorgemota/jimple), a Javascript port of [Pimple](https://pimple.symfony.com/) dependency injection container.\n\n## Motivation/Introduction\n\nA friend who's also web developer brought the idea of start using a dependency injection container on Node, and how Jimple was a great tool for it, and from that moment on I can't think of starting an app without using it. It not only allows you to implement dependency injection on a simple and clean way but it also kind of forces you to have a really good organization of your code.\n\nA couple of months after that, the same friend told me that we should do something similar to [Silex](https://silex.symfony.com/), which is based on Pimple, with Express. I ran with the idea and... this project is what I think a mix of Jimple and Express would look like. To be clear, **this is not a port of Silex**.\n\n## Information\n\n| -            | -                                                                  |\n|--------------|--------------------------------------------------------------------|\n| Package      | jimpex                                                             |\n| Description  | Express as dependency injection container.                         |\n| Node Version | >= v10.0.0                                                         |\n\n## Usage\n\n### Creating your app\n\nTo create a Jimpex app you would require the `Jimpex` class from the package, extend it and define all your services, controllers and middlewares on its `boot` method:\n\n```js\nconst { Jimpex } = require('jimpex');\n\nclass MyApp extends Jimpex {\n  boot() {\n    // Do all your custom stuff...\n  }\n}\n```\n\nThe class constructor has two parameters:\n\n1. `boot` (`true`): Whether or not to call the `boot` method after initializing the instance.\n2. `options` (`{}`): A set of options to customize the app.\n\nThere are a lot of options to customize an app, so I would recommend you to read the [Jimpex Options documentation](manual/options.html).\n\n#### App configuration\n\nJimpex, by default, depends on external configuration files and as a base configuration it will try to load `./config/app/app.config.js`. Of course this is extremely configurable through the [Jimpex Options](manual/options.html).\n\nA configuration file is just a Javascript file that exports an Object, for example:\n\n```js\nmodule.exports = {\n  port: 2509,\n};\n```\n\n> If that's who you default configuration file looks like, the app will run on the port `2509`.\n\nTo access the app configuration, you just call the `appConfiguration` service:\n\n```js\nconst config = app.get('appConfiguration');\n```\n\nThen you can read its values using `.get(setting)`:\n\n```js\nconsole.log(config.get('port'));\n// Will log 2509\n```\n\nTo more information about how the `appConfiguration` service works, you can check [its documentation on the wootils repository](https://github.com/homer0/wootils/blob/master/documents/node/appConfiguration.md).\n\n#### Starting the app\n\nTo start the app you need a valid configuration file with a valid `port` setting. Check the previous section to more information about it.\n\nNow, Starting the app is as easy as calling `start()`:\n\n```js\napp.start(() => {\n  console.log('The app is running!');\n});\n```\n\n> - Like Express, you can send a callback to be executed after the server starts.\n> - You also have a `listen` alias with the same signature as express (port and callback) for serverless platforms where you don't manually start the app.\n\nYou can also stop the app by calling `stop()`:\n\n```js\napp.stop();\n// Done, the app is not longer running.\n```\n\n### Defining a service\n\nTo define a service and its provider, you would write your service as a `class` or a `function` and then wrap it on the `provider` function Jimpex provides:\n\n```js\nconst { provider } = require('jimpex');\n\n// Create your service\nclass MyService {\n  constructor(depOne, depTwo);\n}\n\n// Define the provider\nconst myService = provider((app) => {\n  app.set('myService', () => new MyService(\n    app.get('depOne'),\n    app.get('depTwo')\n  ));\n});\n\n// Export the service and its provider\nmodule.exports = {\n  MyService,\n  myService,\n};\n```\n\n> You could export just export the provider, but I believe is a good practice to export both in case another part of your app wants to extend the class and overwrite the service on the container.\n\nThen, on you app, you would simple `register` the provider:\n\n```js\nconst { Jimpex } = require('jimpex');\nconst { myService } = require('...');\n\nclass MyApp extends Jimpex {\n  boot() {\n    ...\n    this.register(myService);\n  }\n}\n```\n\nDone, your service is now available.\n\n#### Defining a configurable service\n\nIn case you want to create a service that could accept custom setting when instantiated, you can use a _\"provider creator\"_:\n\n```js\nconst { providerCreator } = require('jimpex');\n\n// Create your service\nclass MyService {\n  constructor(depOne, depTwo, options = {});\n}\n\n// Define the provider\nconst myService = providerCreator((options) => (app) => {\n  app.set('myService', () => new MyService(\n    app.get('depOne'),\n    app.get('depTwo'),\n    settings\n  ));\n});\n\n// Export the service and its provider\nmodule.exports = {\n  MyService,\n  myService,\n};\n```\n\nThe special behavior the creators have, is that you can call them as a function, sending the settings, or just use them on the `register`, so **it's very important that the settings must be optional**:\n\n```js\nconst { Jimpex } = require('jimpex');\nconst { myService } = require('...');\n\nclass MyApp extends Jimpex {\n  boot() {\n    ...\n    this.register(myService);\n    // or\n    this.register(myService({ ... }));\n  }\n}\n```\n\n### Adding a controller\n\nTo add controller you need to use the `controller` function and return a list of routes:\n\n```js\nconst { controller } = require('jimpex');\n\n// (Optional) Define a class to organize your route handlers.\nclass HealthController {\n  health() {\n    return (req, res) => {\n      res.write('Everything works!');\n    };\n  }\n}\n\n// Define the controller\nconst healthController = controller((app) => {\n  const ctrl = new HealthController();\n  // Get the router service\n  const router = app.get('router');\n  // Return the list of routes this controller will handle\n  return [\n    router.get('/', ctrl.health()),\n  ];\n});\n\n// Export the controller class and the controller itself\nmodule.exports = {\n  HealthController,\n  healthController,\n};\n```\n\n> - You could export just export the controller, but I believe is a good practice to export both in case another part of your app wants to extend the class and mount a new route withs its inherit functionalities.\n> - The function inside the `controller` wrapper won't be called until the app is started. In case you are wondering about the lazy loading of the services that you may inject.\n\nThen, on you app, you would `mount` the controller:\n\n```js\nconst { Jimpex } = require('jimpex');\nconst { healthController } = require('...');\n\nclass MyApp extends Jimpex {\n  boot() {\n    ...\n    this.mount('/health', healthController);\n  }\n}\n```\n\n#### Defining a configurable controller\n\nLike with _\"providers creators\", you can define controllers that accept custom settings when\ninstantiated, using a _\"controller creator\"_:\n\n```js\nconst { controllerCreator } = require('jimpex');\n\n// (Optional) Define a class to organize your route handlers.\nclass HealthController {\n  constructor(settings = {});\n  \n  health() {\n    return (req, res) => {\n      res.write('Everything works!');\n    };\n  }\n}\n\n// Define the controller\nconst healthController = controllerCreator((settings) => (app) => {\n  const ctrl = new HealthController(settings);\n  // Get the router service\n  const router = app.get('router');\n  // Return the list of routes this controller will handle\n  return [\n    router.get('/', ctrl.health()),\n  ];\n});\n\n// Export the controller class and the controller itself\nmodule.exports = {\n  HealthController,\n  healthController,\n};\n```\n\nThe special behavior the creators have, is that you can call them as a function, sending the settings, or just use them with `mount` as regular controllers; and since they can be used as regular controllers, **it's very important that the settings are optional**:\n\n```js\nconst { Jimpex } = require('jimpex');\nconst { healthController } = require('...');\n\nclass MyApp extends Jimpex {\n  boot() {\n    ...\n    this.mount('/health', healthController);\n    // or\n    this.mount('/health', healthController({ ... }));\n  }\n}\n```\n\n### Adding a middleware\n\nTo add a new middleware you need to use the `middleware` function and return a function:\n\n```js\nconst { middlware } = require('jimpex');\n\n// Define your middleware function (or class if it gets more complex)\nconst greetingsMiddleware = () => (req, res, next) => {\n  console.log('Hello!');\n};\n\n// Define the middleware\nconst greetings = middleware(() => greetingsMiddleware());\n\n// Export the function and the middleware\nmodule.exports = {\n  greetingsMiddleware,\n  greetings,\n};\n```\n\n> You could export just export the provider, but I believe is a good practice to export both in case another part of your app wants to extend the class or use the function.\n\nThen, on you app, you would `use` the controller:\n\n```js\nconst { Jimpex } = require('jimpex');\nconst { greetings } = require('...');\n\nclass MyApp extends Jimpex {\n  boot() {\n    ...\n    this.use(greetings);\n  }\n}\n```\n\n#### Defining a configurable middleware\n\nLike with controllers and providers, you can also create a middleware that can accept settings when instantiated, with a _\"middleware creator\"_:\n\n```js\nconst { middlwareCreator } = require('jimpex');\n\n// Define your middleware function (or class if it gets more complex)\nconst greetingsMiddleware = (message = 'Hello!') => (req, res, next) => {\n  console.log(message);\n};\n\n// Define the middleware\nconst greetings = middlewareCreator((message) => greetingsMiddleware(message));\n\n// Export the function and the middleware\nmodule.exports = {\n  greetingsMiddleware,\n  greetings,\n};\n```\n\nThe special behavior the creators have, is that you can call them as a function, sending the settings, or just register them with `use` as regular middlewares, so **it's very important that the settings must be optional**:\n\n```js\nconst { Jimpex } = require('jimpex');\nconst { greetings } = require('...');\n\nclass MyApp extends Jimpex {\n  boot() {\n    ...\n    this.use(greetings);\n    // or\n    this.use(greetings('Howdy!'));\n  }\n}\n```\n\n## Built-in features\n\nJimpex comes with a few services, middlewares and controllers that you can import and use on your app, some of them [are activated by default on the options](manual/options.html), but others you have to implement manually:\n\n### Controllers\n\n- **Configuration:** Allows you to see and switch the current configuration. It can be enabled or disabled by using a setting on the configuration.\n- **Health:** Shows the version and name of the configuration, just to check the app is running.\n- **Statics:** It allows your app to server specific files from any directory, without having to use the `static` middleware.\n- **Gateway:** It allows you to automatically generate a set of routes that will make gateway requests to an specific API.\n\n[Read more about the built-in controllers](manual/controllers.html)\n\n### Middlewares\n\n- **Error handler:** Allows you to generate responses for errors and potentially hide uncaught exceptions under a generic message, unless it's disabled via configuration settings.\n- **Force HTTPS:** Redirect all incoming traffic from HTTP to HTTPS. It also allows you to set routes to ignore the redirection.\n- **Fast HTML:** Allows your app to skip unnecessary processing by showing an specific HTML when a requested route doesn't have a controller for it or is not on a \"whitelist\".\n- **Show HTML:** A really simple middleware to serve an HTML file. Its true feature is that it can be hooked up to the **HTML Generator** service.\n- **Version validator:** If you mount it on a route it will generate a `409` error if the request doesn't have a version parameter with the same version as the one on the configuration.\n\n[Read more about the built-in controllers](manual/middlewares.html)\n\n### Services\n\n- **API client:** An implementation of the [wootils API Client](https://github.com/homer0/wootils/blob/master/documents/shared/APIClient.md) but that is connected to the HTTP service, to allow logging and forwarding of the headers.\n- **App Error:** A very simple subclass of `Error` but with support for context information. It can be used to customize the error handler responses.\n- **Ensure bearer token:** A service-middleware that allows you to validate and retrieve a bearer token from the incoming requests `Authorization` header.\n- **HTTP Error:** Another type of error, but specific for the HTTP requests the app does with the API client.\n- **Send File:** It allows you to send a file on a response with a path relative to the app executable.\n- **Frontend Fs:** Useful for when your app has a bundled frontend, it allows you to read, write and delete files with paths relative to the app executable.\n- **HTML Generator:** A service that allows you to generate an HTML file when the app gets started and inject contents of the configuration as a `window` variable.\n- **HTTP:** A set of utilities to work with HTTP requests and responses.\n- **Responses builder:** A service that generates JSON and HTML responses.\n\n[Read more about the built-in services](manual/services.html)\n\nThe service also implements a few other services from the [wootils](https://github.com/homer0/wootils) as core utilities:\n\n- [`appLogger`](https://github.com/homer0/wootils/blob/master/documents/node/logger.md): The logger service.\n- [`environmentUtils`](https://github.com/homer0/wootils/blob/master/documents/node/environmentUtils.md): The service that reads the environment variables.\n- [`packageInfo`](https://github.com/homer0/wootils/blob/master/documents/node/packageInfo.md): The app package.json information.\n- [`pathUtils`](https://github.com/homer0/wootils/blob/master/documents/node/pathUtils.md): The service to build paths relative to the project root directory.\n- [`rootRequire`](https://github.com/homer0/wootils/blob/master/documents/node/rootRequire.md): The service to make requires relatives to the project root directory.\n- [`events`](https://github.com/homer0/wootils/blob/master/documents/shared/eventsHub.md): To handle the app events.\n\n## Development\n\n### NPM/Yarn Tasks\n\n| Task                    | Description                         |\n|-------------------------|-------------------------------------|\n| `yarn test`             | Run the project unit tests.         |\n| `yarn run lint`         | Lint the modified files.            |\n| `yarn run lint:full`    | Lint the project code.              |\n| `yarn run docs`         | Generate the project documentation. |\n| `yarn run todo`         | List all the pending to-do's.       |\n\n### Testing\n\nI use [Jest](https://facebook.github.io/jest/) with [Jest-Ex](https://yarnpkg.com/en/package/jest-ex) to test the project. The configuration file is on `./.jestrc`, the tests and mocks are on `./tests` and the script that runs it is on `./utils/scripts/test`.\n\n### Linting\n\nI use [ESlint](http://eslint.org) to validate all our JS code. The configuration file for the project code is on `./.eslintrc` and for the tests on `./tests/.eslintrc` (which inherits from the one on the root), there's also an `./.eslintignore` to ignore some files on the process, and the script that runs it is on `./utils/scripts/lint`.\n\n### Documentation\n\nI use [ESDoc](http://esdoc.org) to generate HTML documentation for the project. The configuration file is on `./.esdocrc` and the script that runs it is on `./utils/scripts/docs`.\n\n### To-Dos\n\nI use `@todo` comments to write all the pending improvements and fixes, and [Leasot](https://yarnpkg.com/en/package/leasot) to generate a report. The script that runs it is on `./utils/scripts/todo`.\n",
    "longname": "/Users/homer0/CODE/node/jimpex/README-esdoc.md",
    "name": "./README-esdoc.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n    \"name\": \"jimpex\",\n    \"description\": \"Express as dependency injection container.\",\n    \"homepage\": \"https://homer0.github.io/jimpex/\",\n    \"version\": \"5.0.1\",\n    \"repository\": \"homer0/jimpex\",\n    \"author\": \"Leonardo Apiwan (@homer0) <me@homer0.com>\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n      \"wootils\": \"^3.0.2\",\n      \"jimple\": \"^1.5.0\",\n      \"express\": \"^4.17.1\",\n      \"body-parser\": \"^1.19.0\",\n      \"compression\": \"^1.7.4\",\n      \"node-fetch\": \"^2.6.0\",\n      \"urijs\": \"^1.19.2\",\n      \"statuses\": \"^1.5.0\",\n      \"fs-extra\": \"^9.0.0\",\n      \"multer\": \"^1.4.2\",\n      \"mime\": \"^2.4.4\"\n    },\n    \"devDependencies\": {\n      \"eslint\": \"^6.8.0\",\n      \"eslint-plugin-homer0\": \"^3.0.2\",\n      \"jest-ex\": \"^8.0.0\",\n      \"jest-cli\": \"^25.1.0\",\n      \"jasmine-expect\": \"^4.0.3\",\n      \"esdoc\": \"^1.1.0\",\n      \"esdoc-standard-plugin\": \"^1.0.0\",\n      \"esdoc-node\": \"1.0.4\",\n      \"leasot\": \"^10.1.0\",\n      \"coveralls\": \"^3.0.11\",\n      \"husky\": \"^4.2.3\"\n    },\n    \"engine-strict\": true,\n    \"engines\": {\n      \"node\": \">=10.0.0\"\n    },\n    \"main\": \"src/index.js\",\n    \"husky\": {\n      \"hooks\": {\n        \"pre-commit\": \"./utils/hooks/pre-commit\",\n        \"post-merge\": \"./utils/hooks/post-merge\"\n      }\n    },\n    \"scripts\": {\n      \"hooks\": \"./utils/hooks/install\",\n      \"test\": \"./utils/scripts/test\",\n      \"lint\": \"./utils/scripts/lint\",\n      \"lint:full\": \"./utils/scripts/lint-full\",\n      \"predocs\": \"./utils/scripts/docs-index\",\n      \"docs\": \"./utils/scripts/docs\",\n      \"todo\": \"./utils/scripts/todo\"\n    }\n}\n",
    "longname": "/Users/homer0/CODE/node/jimpex/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": false,
    "content": null,
    "longname": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/homer0/CODE/node/jimpex/documents/options.md",
    "name": "./documents/options.md",
    "content": "# Jimpex Options\n\nThe options the second parameter of the class constructor and it allows you to customize almost every aspect of Jimpex.\n\nThis is what the options object looks like:\n\n```js\n{\n  // The version of the app\n  version: '0.0.0',\n\n  // The size limit for the requests payload.\n  filesizeLimit: '15MB',\n\n  // The options to customize how the app configuration is loaded (details on its section).\n  configuration: ...,\n\n  // The options for the static middleware (details on its section).\n  statics: ...,\n\n  // The options to customize the express instance and default middlewares (details on its section).\n  express: ...,\n\n  // Which built-in services to register (details on its section).\n  defaultServices: ...\n}\n```\n\nBesides the first two, which default values and descriptions are pretty clear, I'll go in detail for all the others.\n\n## Configuration\n\nThis set of options allows you to customize every aspect of how the configuration service is created. Remember that the app requires a valid configuration with a `port` setting to be started:\n\n```js\n{\n  // The default configuration. If the value is null, it will load [app-name].config.js\n  default: null,\n\n  // The name of the app, to be used on the configurations directory and filenames.\n  name: 'app',\n\n  // The path relative to the root directory where the configurations are located.\n  path: 'config/',\n\n  // If `true`, the path to the configuration will add a folder with the name of the app.\n  hasFolder: true,\n\n  // The environment variable the app will check for a configuration name.\n  environmentVariable: 'CONFIG',\n\n  // Whether or not to check for the environment variable.\n  loadFromEnvironment: true,\n\n  // If `true`, the version of the app will be copied from the loaded configuration.\n  loadVersionFromConfiguration: true,\n\n  // The name format of the configuration files.\n  filenameFormat: '[app-name].[configuration-name].config.js',\n}\n```\n\nAs you can see, if you don't want to depend on environment variables or just have one single configuration for your app, you can use the `default` option and turn `loadFromEnvironment` to `false`.\n\nThe configuration service is an implementation of [wootils AppConfiguration](https://github.com/homer0/wootils/blob/master/documents/node/appConfiguration.md), so you can check its API in its oficial configuration.\n\n## Statics\n\nThese options are specifically for the Express [`static`](https://github.com/expressjs/serve-static) middleware:\n\n```js\n{\n  // Whether or not to enable the middleware to serve statics files.\n  enabled: true,\n\n  // If true, the statics folder would be relative to the project root directory, otherwise,\n  // it would be relative to the app executable.\n  onHome: false,\n\n  // The name of both the route and the folder, relative to whatever you defined with the\n  // `onHome` option.\n  route: 'statics',\n  \n  // By default, the folder will be the same as the `route`, but you can use this option\n  // to define a relative path that won't affect the route.\n  folder: '',\n}\n```\n\n## Express\n\nThese are options for miscellaneous things you can add to the Express server:\n\n```js\n{\n  // Whether or not to enable the `trust proxy` option.\n  trustProxy: true,\n\n  // Whether or not to remove the `x-powered-by` header.\n  disableXPoweredBy: true,\n\n  // Whether or not to add the `compression` middleware.\n  compression: true,\n\n  // Whether or not to add the `body-parser` middleware.\n  bodyParser: true,\n\n  // Whether or not to add the `multer` middleware.\n  multer: true,\n}\n```\n\n## Default services\n\nThese options allow you to register some of the built-in service that I consider useful enough to be added on any app.\n\n```js\n{\n  // These services include:\n  // - Error handler\n  // - Send File\n  common: true,\n\n  // These services include:\n  // - API client\n  // - HTTP\n  // - Responses builder\n  http: true,\n\n  // These services include:\n  // - Ensure bearer token\n  utils: true,\n}\n```\n\nFor more information about these services, check the document about **Built-in Services**.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/homer0/CODE/node/jimpex/documents/controllers.md",
    "name": "./documents/controllers.md",
    "content": "# Built-in Controllers\n\nAll of these controllers are available on the Jimpex package and can be easily required and implemented.\n\n## Configuration\n\nAllows you to see and switch the current configuration. It can be enabled or disabled by using a setting on the configuration.\n\n- Module: `common`\n- Requires: `responsesBuilder`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    http: { responsesBuilder },\n  },\n  controllers: {\n    common: { configurationController },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(responsesBuilder);\n    \n    // Add the controller.\n    this.mount('/config', configurationController);\n  }\n}\n```\n\nNow, there are two rules behind this controller:\n\n1. Your configuration must have a setting `debug.configurationController` with the value of `true`.\n2. To be able to switch configurations, the default configuration and/or the first configuration loaded must have a setting `allowConfigurationSwitch` set to `true`.\n\nThe reason for those rules is that this controller is development purposes as you wouldn't want to make public the settings of your app.\n\nThe controller then will mount two routes:\n\n- `GET /`: It will show the current configuration.\n- `GET /switch/:name`: It will, if allowed, switch to an specified configuration.\n\n## Health\n\nShows the version and name of the configuration, just to check the app is running.\n\n- Module: `common`\n- Requires: `responsesBuilder`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    http: { responsesBuilder },\n  },\n  controllers: {\n    common: { healthController },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(responsesBuilder);\n    \n    // Add the controller.\n    this.mount('/health', healthController);\n  }\n}\n```\n\nThat's all there is, the controller mounts only one route:\n\n- `GET /`: Shows the information.\n\n## Statics\n\nIt allows your app to server specific files from any directory, without having to use the `static` middleware.\n\n- Module: `common`\n- Requires: `sendFile`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { sendFile },\n  },\n  controllers: {\n    common: { staticsController },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(sendFile);\n    \n    // Add the controller.\n    this.mount('/', staticsController);\n  }\n}\n```\n\nThe controller comes with a lot of default options:\n\n```js\n{\n  // The list of files it will serve.\n  files: ['favicon.ico', 'index.html'],\n  // The HTTP methods for which it will mount routes.\n  methods: {\n    // If `all` is `true`, then all the others are ignored.\n    all: false,\n    get: true,\n  },\n  // The \"master\" paths to prepend to all file routes and files.\n  paths: {\n    // The base route from where the files are going to be served.\n    route: '',\n    // The base path from where the files are located.\n    source: './',\n  },\n}\n```\nAll of those values can be customized by calling the controller as a function:\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { sendFile },\n  },\n  controllers: {\n    common: { staticsController },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(sendFile);\n    \n    // Add the controller.\n    this.mount('/', staticsController({\n      paths: {\n        route: 'public',\n        source: 'secret-folder',\n      }\n      files: [\n        'my-file-one.html',\n        'favicon.icon',\n        'index.html',\n        'some-other.html',\n      ],\n    }));\n  }\n}\n```\n\nYou can also specify custom information to each individual file:\n\n```js\nthis.mount('/', staticsController({\n  files: [\n    'my-file-one.html',\n    {\n      route: 'favicon.ico',\n      source: 'icons/fav/icon.ico',\n      headers: {\n        'X-Custom-Icon-Header': 'Something!',\n      },\n    },\n    'index.html',\n  ],\n}));\n```\n\nFinally, you can also add a custom middleware or middlewares to the routes created by the controller, you just need to send a function that returns the middlewares when called.\n\n```js\n/**\n * In this case, we'll use Jimpex's `ensureBearerToken` to protect the\n * file routes.\n */\nconst filesProtection = (app) => [app.get('ensureBearerToken')];\n\nthis.mount('/', staticsController(\n  {\n    files: [\n      'index.html',\n    ],\n  },\n  [filesProtection]\n));\n```\n\nAnd that's all, the middleware will be added to the route, just before serving the file.\n\n## Gateway\n\nIt allows you to automatically generate a set of routes that will make gateway requests to an specific API.\n\n- Module: `utils`\n- Requires: `http`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    http: { http },\n  },\n  controllers: {\n    utils: { gateway },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(http);\n    \n    // Add the controller.\n    this.mount('/gateway', gateway);\n  }\n}\n```\n\nThe controller will automatically look into your app configuration for a key called `api` with the following format:\n\n```js\n{\n  url: 'api-entry-point',\n  gateway: {\n    endpointOne: 'endpoint/one/path',\n  },\n}\n```\n\n> Yes, the format is almost the same as the API Client.\n\nBased on the example above and that configuration, the controller would mount a route on `/gateway/endpoint/one/path` that would fire a request to `api-entry-point/endpoint/one/path`.\n\nThe controller has a few options that you can customize:\n\n```js\n{\n\n  // The name that will be used to register the controller as a sevice (yes!),\n  // so other services can access the API Client configuration the controller\n  // generates from its routes.\n\n  serviceName: 'apiGateway',\n\n  // The name of a registered service that will work as a helper, and that the\n  // controller will call in order to modify requests, responses and even handle\n  // errors.\n  helperServiceName: 'apiGatewayHelper',\n\n  // The name of the configuration setting where the gateway configuration is stored.\n  // This is also used to wrap the endpoints on the generated API Client configuration.\n  configurationSetting: 'api',\n\n  // This is a helper for when the gateway is used with an API client. The idea is\n  // that, by default, the routes are mounted on the controller route, but with\n  // this option, you can specify another sub path. For example: The controller\n  // is mounted on `/routes`, if you set `root` to `gateway`, all the routes will\n  // be on `/routes/gateway`.\n  root: '',\n\n  // How the gateway will handle headers from requests and responses.\n  headers: {\n\n    // Whether or not to include the header with a request real IP.\n    useXForwardedFor: true,\n\n    // Whether or not to copy the custom headers (the ones that start with `x-`).\n    copyCustomHeaders: true,\n\n    // A list of headers that will be copied from the incoming request into the\n    // fetch request.\n    copy: [\n      'authorization',\n      'content-type',\n      'referer',\n      'user-agent',\n    ],\n\n    // A list of headers that will be removed while copying the headers from a\n    // fetch response into the server's response.\n    remove: [\n      'server',\n      'x-powered-by',\n    ],\n  },\n}\n```\n\nThe way you overwrite them is by calling the controller as a function:\n\n```js\nconst {\n  Jimpex,\n  services: {\n    http: { http },\n  },\n  controllers: {\n    utils: { gateway },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(http);\n    \n    // Add the controller.\n    this.mount('/gateway', gateway({\n      serviceName: 'Batman',\n    }));\n  }\n}\n```\n\nI strongly recommend you to read the techinical documentation in order to know all the things you\ncan do with the helper service and the logic behind the naming convetion the controller creator enforces (the `serviceName` must end with `Gateway`, among other things).\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/homer0/CODE/node/jimpex/documents/middlewares.md",
    "name": "./documents/middlewares.md",
    "content": "# Built-in Middlewares\n\nAll of these controllers are available on the Jimpex package and can be easily required and implemented.\n\n## Error Handler\n\nAllows you to generate responses for errors and potentially hide uncaught exceptions under a generic message, unless it's disabled via configuration settings.\n\n- Module: `common`\n- Requires: `responsesBuilder` and `appError`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    http: { responsesBuilder },\n    common: { appError },\n  },\n  middlewares: {\n    common: { errorHandler },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(responsesBuilder);\n    this.register(appError);\n    \n    ...\n    \n    // Add the middleware at the end.\n    this.use(errorHandler);\n  }\n}\n```\n\nNow, there's a configuration setting for this controller: `debug.showErrors`. By enabling the setting, the middleware will show the message and the stack information of all kind of errors.\n\nIf the configuration setting is disabled (or not present), the errors stack will never be visible, and if the error is not an instance of `AppError`, it will show a generic message.\n\nBy default, the generic message is _\"Oops! Something went wrong, please try again\"_ and the default HTTP status is `500`, but you can use it as a function to modify those defaults:\n\n```js\nconst {\n  Jimpex,\n  services: {\n    http: { responsesBuilder },\n    common: { appError },\n  },\n  middlewares: {\n    common: { errorHandler },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(responsesBuilder);\n    this.register(appError);\n    \n    ...\n    \n    // Add the middleware at the end.\n    this.use(errorHandler({\n      default: {\n        message: 'Unknown error',\n        status: 503,\n      },\n    }));\n  }\n}\n```\n\nFinally, when using errors of the type `AppError`, you can add the following context information:\n\n```js\n// Assuming `AppError` is the injected `AppError` and you are on the context of a middleware\nnext(new AppError('Something went wrong', {\n  status: someHTTPStatus,\n  response: someObject,\n}));\n```\n\n- `status` will replace the error responses HTTP status.\n- `response` will be merged into the error response `data` key.\n\n## Force HTTPS\n\nRedirect all incoming traffic from HTTP to HTTPS. It also allows you to set routes to ignore the redirection.\n\n- Module: `common`\n\n```js\nconst {\n  Jimpex,\n  middlewares: {\n    common: { forceHTTPS },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Add the middleware first.\n    this.use(errorHandler);\n  }\n}\n```\n\nBy default, it redirects all the URLs that don't start with `/service/` from HTTP to HTTPs, but you can use it as a function to modify the rules:\n\n```js\nconst {\n  Jimpex,\n  middlewares: {\n    common: { forceHTTPS },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Add the middleware first.\n    this.use(forceHTTPS([\n      /^\\/service\\//,\n      /^\\/api\\//,\n    ]));\n  }\n}\n```\n\n**VERY IMPORTANT:** The forced redirection will only happen if your configuration has a setting named `forceHTTPS` with a value of `true`.\n\n## Fast HTML\n\nAllows your app to skip unnecessary processing by showing an specific HTML when a requested route doesn't have a controller for it or is not on a \"whitelist\"\n\n- Module: `html`\n- Requires: `events`, `sendFile` and, optionally, an `HTMLGenerator` service.\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { sendFile },\n  },\n  middlewares: {\n    html: { fastHTML },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(sendFile);\n    \n    // Add the middleware on one of the first positions.\n    this.use(fastHTML);\n  }\n}\n```\n\nThe middleware has a few options with default values that can be customized:\n\n```js\n{\n  // The name of the file it will serve.\n  file: 'index.html',\n  // A list of expressions for routes that should be ignored.\n  ignore: [/\\.ico$/i],\n  // Whether or not to use the routes controlled by the app to validate the requests.\n  useAppRoutes: true,\n  // The name of the HTML Generator service the middleware can use to obtain the HTML. \n  htmlGenerator: 'htmlGenerator',\n}\n```\n\nYou can customize all those options by just calling the middleware as a function:\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { sendFile },\n  },\n  middlewares: {\n    html: { fastHTML },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(sendFile);\n    \n    // Add the middleware on one of the first positions.\n    this.use(fastHTML({\n      file: 'my-custom-index.html',\n      ignore: [`/^\\/service\\//`],\n      useAppRoutes: false,\n      htmlGenerator: null, // To disable it.\n    }));\n  }\n}\n```\n\nNow, as mentioned on the requirements, you can optionally use the `htmlGenerator` service or an `HTMLGenerator`-like service to serve a generated file.\n\nYou use the `htmlGenerator` option to disable it, or modify the name of the service it will look for:\n\n- If you set it to a _\"falsy\"_ value, it will be disabled.\n- If you change its name, it will try to look for that service when mounted.\n\n**Important:** When using the generator, no matter the value you set on the `file` option, it will overwritten with the name of the file from the generator service.\n\n## Show HTML\n\nA really simple middleware to serve an HTML file. Its true feature is that it can be hooked up to the **HTML Generator** service.\n\n- Module: `html`\n- Requires: `sendFile` and, optionally, an `HTMLGenerator` service.\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { sendFile },\n  },\n  middlewares: {\n    html: { showHTML },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(sendFile);\n    \n    // Add the middleware at the end.\n    this.use(showHTML);\n  }\n}\n```\n\nBy default, if the middleware is reached, it will show an `index.html`, but you can use it as a function to modify the filename:\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { sendFile },\n  },\n  middlewares: {\n    html: { showHTML },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(sendFile);\n    \n    // Add the middleware at the end.\n    this.use(showHTML({\n      file: 'my-file.html',\n    }));\n  }\n}\n```\n\nNow, as mentioned on the requirements, you can optionally use the `htmlGenerator` or an `HTMLGenerator` service to show the generated file.\n\nThe default implementation checks if there's an `htmlGenerator` service registered on the app and uses that file; and in the case of `showHTML`, you can specify a second parameter with the name of the `HTMLGenerator` service name you want to use.\n\n## Version validator\n\nThis can be used as a middleware and as controller. The idea is that it validates a `version` parameter against the version defined on the configuration.\n\n- Module: `utils`\n- Requires: `appConfiguration`, `responsesBuilder` and `appError`\n\n```js\nconst {\n  Jimpex,\n  middlewares: {\n    utils: { versionValidator },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Add the middleware before the routes you want to be protected.\n    this.use(versionValidator);\n    // or, protect a specific route.\n    this.mount('/to-protect', versionValidator);\n  }\n}\n```\n\nBy default, it comes with a lot of already defined options, like whether or not to allow `latest` as a version, but you can use it as a function to modify them, for example:\n\n```js\nconst {\n  Jimpex,\n  middlewares: {\n    utils: { versionValidator },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Add the middleware before the routes you want to be protected.\n    this.use(versionValidator({\n      latest: {\n        allow: false,\n      }\n    }));\n    // or, protect a specific route.\n    this.mount('/to-protect', versionValidator({\n      latest: {\n        allow: false,\n      }\n    }));\n  }\n}\n```\n\n**Very important:** The middleware will only validate if `req.params.version` is found.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/homer0/CODE/node/jimpex/documents/services.md",
    "name": "./documents/services.md",
    "content": "# Built-in Services\n\nAll of these controllers are available on the Jimpex package and can be easily required and implemented.\n\nIn the case of the services from the modules `api`, `http` and `common`, you can register them when the app starts by using the `defaultService` option (Check the options document for more information).\n\n## API Client\n\nAn implementation of the [wootils API Client](https://github.com/homer0/wootils/blob/master/documents/shared/APIClient.md) but that is connected to the HTTP service, to allow logging and forwarding of the headers.\n\n- Module: `http`\n- Requires: `http` and `appError`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { appError },\n    http: { apiClient, http },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(http);\n    this.register(appError);\n\n    // Register the client\n    this.register(apiClient);\n  }\n}\n```\n\nThe service has a few options that can be customized:\n\n```js\n{\n  // The name the service will have in the container; in case you need more than one.\n  serviceName: 'apiClient',\n\n  // The name of the configuration setting that will contain the API `url` and `endpoints`.\n  // If this is not customized, but the `serviceName` is, this value will be set to the\n  // same as the `serviceName`.\n  configurationSetting: 'api',\n\n  // The class the service will instantiate. This is in case you end up extending the\n  // base one in order to add custommethods.\n  clientClass: APIClient,\n}\n```\n\nYou can use the provider as a function to modify the options:\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { appError },\n    http: { apiClient, http },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(http);\n    this.register(appError);\n\n    // Register the client\n    this.register(apiClient({\n      serviceName: 'myCustomAPIService',\n      configurationSetting: 'myapi',\n    });\n  }\n}\n```\n\n## App Error\n\nA very simple subclass of `Error` but with support for context information. It can be used to customize the error handler responses.\n\n- Module: `common`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { appError },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {        \n    // Register the service\n    this.register(appError);\n  }\n}\n```\n\nBy registering the \"service\", two things are added to the container: The class declaration, so you can construct the errors, and a shorthand function that does the same:\n\n```js\nconst AppError = app.get('AppError');\nthrow new AppError('Something happened', {\n  someProp: 'someValue',\n});\n// or\nconst appError = app.get('appError');\nthrow appError('Something happened', {\n  someProp: 'someValue',\n});\n```\n\nThis is useful if you are building an app with multiple known exceptions, you can use the context to send useful information.\n\n## Ensure bearer token\n\nA service-middleware that allows you to validate and retrieve a bearer token from the incoming requests `Authorization` header.\n\nIt's a _\"service-middleware\"_ because when you access the service, it doesn't return a class/service instance, but a middleware function for you to use on your controller routes.\n\n- Module: `utils`\n- Requires: `appError`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { appError },\n    utils: { ensureBearerToken },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(appError);\n\n    // Register the service\n    this.register(ensureBearerToken);\n  }\n}\n```\n\nThis service has a few default options:\n\n```js\n{\n  // The information for the error generated when no token is found.\n  error: {\n    // The error message.\n    message: 'Unauthorized',\n    // The HTTP status associated to the error, this is for the error handler.\n    status: statuses.unauthorized,\n    // Extra context information for the error handler to add to the response.\n    response: {},\n  },\n  // The regular expression used to validate and extract the token.\n  expression: /bearer (.*?)(?:$|\\s)/i,\n  // The name of the property on `res.locals` where the token will be saved.\n  local: 'token',\n}\n```\n\nYou modify those default values by using the provider as a function when registering:\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { appError },\n    utils: { ensureBearerToken },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(appError);\n\n    // Register the service\n    this.register(ensureBearerToken({\n      error: {\n        message: 'You are not authorized to access this route',\n      },\n      local: 'userToken',\n    }));\n  }\n}\n```\n\nNow, if the token processes a request and detects a valid token, it will save it on `res.locals.token`:\n\n```js\nconst myCtrl = controller((app) => {\n  const router = app.get('router');\n  const ensureBearerToken = app.get('ensureBearerToken');\n  return [router.get('/something', [\n    ensureBearerToken,\n    (req, res, next) => {\n      console.log('Token:', res.locals.token);\n      next();\n    },\n  ])];\n});\n```\n\n## HTTP Error\n\nAnother type of error, but specific for the HTTP requests the app does with the API client. This is a subclass of `AppError`. The only advantage over `AppError` is that you know the that the type of error is specific to requests and that it has a paramter for an HTTP status.\n\n- Module: `common`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { httpError },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {        \n    // Register the service\n    this.register(httpError);\n  }\n}\n```\n\nBy registering the \"service\", two things are added to the container: The class declaration, so you can construct the errors, and a shorthand function that does the same:\n\n```js\nconst HTTPError = app.get('HTTPError');\nthrow new AppError('Not found', 404);\n// or\nconst httpError = app.get('httpError');\nthrow httpError('Not found', 404);\n```\n## Send File\n\nIt allows you to send a file on a response with a path relative to the app executable.\n\nThe `sendFile` doesn't return a class service instance but just a function.\n\n- Module: `common`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    common: { sendFile },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {        \n    // Register the service\n    this.register(sendFile);\n  }\n}\n```\n\nDone, you can now use it on your middlewares and/or controllers routes to send files as responses:\n\n```js\nconst myCtrl = controller((app) => {\n  const router = app.get('router');\n  const sendFile = app.get('sendFile');\n  return [router.get('/something', [\n    (req, res, next) => {\n      sendFile(res, './something.html', next);\n    },\n  ])];\n});\n```\n\nBy default, the path of the file is relative to the directory where the app executable is located, but you can change the location ([Check `PathUtils` locations](https://github.com/homer0/wootils/blob/master/documents/node/pathUtils.md#multiple-locations)) by adding an extra parameter:\n\n```js\nconst myCtrl = controller((app) => {\n  const router = app.get('router');\n  const sendFile = app.get('sendFile');\n  return [router.get('/something', [\n    (req, res, next) => {\n      sendFile(res, './something.html', next, 'home');\n    },\n  ])];\n});\n```\n\nIn this last example, the path to the file is relative to the project root directory.\n\n## Frontend Fs\n\nThis service allows the app to easily read static files. The idea behind centralizing this functionalities into a service is that is pretty common to have bundling tools to generate the frontend, and on that process files can have different paths or not even be generated all, that's why this service exists.\n\n The service can be extended/overwritten to accommodate any requirements and avoid having to update or add `if`s to every `fs` call the app does. Another _'feature'_ of this service is that all the paths are relative to the directory where the app executable is located, so you don't have to remember the relative path from the place you are accessing a file to the place where it's located.\n\n- Module: `common`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    frontend: { frontendFs },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {        \n    // Register the service\n    this.register(frontendFs);\n  }\n}\n```\n\nNow, whenever you are reading/writing/deleting a file that was generated/belongs to the frontend, you can use this service methods:\n\n- `.read(filepath, [encoding='utf-8'])`\n- `.write(filepath, data)`\n- `.delete(filepath)`\n\n## HTML Generator\n\nA service that allows you to generate an HTML file when the app gets started and inject contents of the configuration as a `window` variable.\n\n- Module: `html`\n- Requires: `frontendFs`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    frontend: { frontendFs },\n    html: { htmlGenerator },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(frontendFs);\n\n    // Register the service\n    this.register(htmlGenerator);\n  }\n}\n```\n\nThe service, after registering, it hooks itself to the app event that gets fired when it starts, so it can create the file automatically.\n\nNow, this service has a few default options, so instead of explaining which are, we'll see each option on detail:\n\n```js\n{\n  // The name the service will have in the container; in case you need more than one.\n  serviceName: 'htmlGenerator',\n\n  // The name of a service from will it obtain the values for the template. When\n  // instantiated, it will look for it on the container, and if is not avaiable,\n  // it will just ignore it and use `configurationKeys`.\n  // You can completely by setting the value to `null`.\n  valuesService: 'htmlGeneratorValues',\n\n  // The name of the file it should use as template.\n  template: 'index.tpl.html',\n\n  // The name of the generated file.\n  file: 'index.html',\n\n  // Whether or not to delete the template after generating the file.\n  deleteTemplateAfter: true,\n\n  // The placeholder string where the information will be written.\n  replacePlaceholder: '{{appConfiguration}}',\n\n  // A dynamic placeholder to replace single values on the template.\n  valuesExpression: /\\{\\{(.*?)\\}\\}/ig,\n\n  // The name of the variable that will have the information on the file.\n  variable: 'appConfiguration',\n\n  // A list of settings from the app configuration that will be used as the\n  // information to inject on the file.\n  configurationKeys: ['features', 'version', 'postMessagesPrefix'],\n}\n```\n\nTo modify the options, you just need to use provider as a function:\n\n```js\nconst {\n  Jimpex,\n  services: {\n    frontend: { frontendFs },\n    html: { htmlGenerator },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the dependencies...\n    this.register(frontendFs);\n\n    // Register the service\n    this.register(htmlGenerator({\n      template: 'template.tpl',\n      file: 'my-index.html',\n      ...\n    }));\n  }\n}\n```\n\n## HTTP\n\nA set of utilities to work with HTTP requests and responses.\n\n- Module: `http`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    http: { http },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the service\n    this.register(http);\n  }\n}\n```\n\nThe `http` service has three methods:\n\n- `getIPFromRequest(req)`: It allows you to get the IP address from an app request.\n- `getCustomHeadersFromRequest(req)`: It returns a dictionary with all the custom headers a request may have, except for `x-forwarded-for`.\n- `fetch(url, options)`: Probably the most important as is the one the app uses to make requests to external services. This service supports the same signature as the native `fetch` function, with the addition that you can send a request object as `req` on the options and the method will include the `x-forwarded-for` method with the request IP address (`getIPFromRequest`) and all the request custom headers (`getCustomHeadersFromRequest`).\n\nAlso, if you have a configuration setting named `debug.logRequests` with the value of `true`, it will log information of all the outgoing requests and their responses on the console.\n\n## Responses builder\n\nA service that generates JSON and HTML responses.\n\n- Module: `http`\n\n```js\nconst {\n  Jimpex,\n  services: {\n    http: { responsesBuilder },\n  },\n};\n\nclass App extends Jimpex {\n  boot() {\n    // Register the service\n    this.register(responsesBuilder);\n  }\n}\n```\n\nThis service has only two methods:\n\n- `json(res, data, status = 200, metadata = {})`: To write regular JSON responses.\n- `htmlPostMessage(res, title, message, status = 200, options = {})`: To write an HTML response that sends a post message. Very useful for when the app opened the route using a popup. The last parameter allows you to customize the HTML response:\n\n```js\n{\n  // The target that will emit the `postMessage`.\n  target: 'window.opener',\n\n  //  Whether or not to do a `window.close` after sending the message.\n  close: true,\n\n  // How many ms should it wait before closing the window, if `options.close` is `true`.\n  closeDelay: 700,  \n}\n```\n",
    "static": true,
    "access": "public"
  }
]
const { provider } = require('../../utils/wrappers');
/**
 * A simple subclass of `Error` that supports extra properties.
 * @extends {Error}
 */
class AppError extends Error {
  /**
   * Class constructor.
   * @param {string} message     The error message.
   * @param {Object} [extras={}] Extra properties for the app. This can be used to send and HTTP
   *                             status when the error is generated by a request, or any other
   *                             context information the app can use.
   */
  constructor(message, extras = {}) {
    super(message);
    /**
     * Overwrite the name of the `Error` with the one from the class.
     * @ignore
     */
    this.name = this.constructor.name;
    /**
     * The extra properties sent on the constructor.
     * @type {Object}
     */
    this.extras = extras;
  }
}
/**
 * A service provider that instead of returning an instance of a service, returns the class itself.
 * Once registered, it will set `AppError` as a service with the same name.
 * @example
 * // Register it on the container
 * container.register(appError);
 * // Getting access to the class.
 * const AppError = container.get('AppError');
 * @type {Provider}
 */
const appError = provider((app) => {
  app.set('appError', () => AppError);
});

module.exports = {
  AppError,
  appError,
};

const mime = require('mime');
const { middlewareCreator } = require('../../utils/wrappers');
/**
 * It's common for an app to show an HTML view when no route was able to handle a request, so the
 * idea behind this middleware is to avoid going to every middleware and controller and just
 * specify that if the request is not for a route handled by a controller, just serve the HTML
 * and avoid processing unnecessary data.
 * A simple example: The app has a route `/backend` that the frontend uses to get information.
 * This middleware can be used to only allow the execution of middlewares and controllers when
 * the request route is for `/backend`, thus avoid extra processing.
 * Disclaimer: Managing statics files with Express is not a best practice, but there are scenarios
 * where there is not other choice.
 */
class FastHTML {
  /**
   * Class constructor.
   * @param {SendFile}      sendFile                               Necessary to serve the HTML file.
   * @param {string}        [file='index.html']                    The name of the file it will
   *                                                               serve. If `htmlGenerator` is
   *                                                               specified, this will be
   *                                                               overwritten with the name of
   *                                                               the file generated by that
   *                                                               service.
   * @param {Array}         [ignoredRoutes=[/^\/api\//, /\.ico$/]] A list of regular expressions
   *                                                               to match requests paths that
   *                                                               should be ignored.
   * @param {HTMLGenerator} [htmlGenerator=null]                   If used, the file to serve will
   *                                                               be the one generated by that
   *                                                               service.
   */
  constructor(
    sendFile,
    file = 'index.html',
    ignoredRoutes = [/^\/api\//, /\.ico$/],
    htmlGenerator = null
  ) {
    /**
     * A local reference for the `sendFile` service.
     * @type {SendFile}
     * @access protected
     * @ignore
     */
    this._sendFile = sendFile;
    /**
     * The name of the file to serve.
     * @type {string}
     */
    this._file = file;
    /**
     * A list of regular expressions to match requests paths that should be ignored.
     * @type {Array}
     */
    this._ignoredRoutes = ignoredRoutes;
    /**
     * If specified, a reference for a service that generates HTML files.
     * @type {HTMLGenerator}
     */
    this._htmlGenerator = htmlGenerator;
    /**
     * Whether or not the file is ready to be served.
     * @type {Boolean}
     * @access protected
     * @ignore
     */
    this._ready = true;
    // If an `HTMLGenerator` service was specified...
    if (this._htmlGenerator) {
      // ...get the name of the file from that service.
      this._file = this._htmlGenerator.getFile();
      /**
       * Mark the `_ready` flag as `false` as this service needs to wait for the generator to
       * create the file.
       */
      this._ready = false;
    }
  }
  /**
   * Returns the Express middleware that validates the routes and serves the HTML file if necessary.
   * @return {ExpressMiddleware}
   */
  middleware() {
    return (req, res, next) => {
      // Validate if the route should be ignored.
      const shouldIgnore = this._ignoredRoutes
      .some((expression) => expression.test(req.originalUrl));
      // If the route should be ignored...
      if (shouldIgnore) {
        // ...go to the next middleware.
        next();
      } else if (!this._ready) {
        /**
         * ...if `_ready` is `false`, it means that it's using the `HTMLGenerator` service, so it
         * calls the method that will notify this service when the file has been created and is
         * ready to be loaded.
         */
        this._htmlGenerator.whenReady()
        .then(() => {
          // The file is ready to use, so mark the `_ready` flag as `true`.
          this._ready = true;
          // Serve the file.
          this._sendHTML(res, next);
        })
        .catch((error) => {
          // Something happened while generating the file, send the error the next middlware.
          next(error);
        });
      } else {
        /**
         * If `_ready` is `true` it means that the `HTMLGenerator` has already created the file on
         * a previous request or it was never specified, so just serve the file.
         */
        this._sendHTML(res, next);
      }
    };
  }
  /**
   * The name of the file to serve.
   * @type {string}
   */
  get file() {
    return this._file;
  }
  /**
   * A list of regular expressions to match requests paths that should be ignored.
   * @type {Array}
   */
  get ignoredRoutes() {
    return this._ignoredRoutes.slice();
  }
  /**
   * Serves the file on the response.
   * @param {ExpressResponse} res  The server response.
   * @param {ExpressNext}     next The functino to call the next middleware.
   * @ignore
   * @access protected
   */
  _sendHTML(res, next) {
    res.setHeader('Content-Type', mime.getType('html'));
    this._sendFile(res, this._file, next);
  }
}
/**
 * A middleware for filtering routes and serve an HTML file when the requested route doesn't have
 * a controller to handle it.
 * @type {MiddlewareCreator}
 * @param {string} [file]                                     The name of the file it will serve.
 *                                                            If the `HTMLGenerator` service
 *                                                            specified is avaialable, this will
 *                                                            be overwritten with the name of the
 *                                                            file generated by that service.
 * @param {Array}  [ignoredRoutes]                            A list of regular expressions to
 *                                                            match requests paths that should be
 *                                                            ignored.
 * @param {string} [htmlGeneratorServiceName='htmlGenerator'] The name of a `HTMLGenerator`
 *                                                            service. If the service is not
 *                                                            registered on the app, it won't throw
 *                                                            an error, but just send `null` to
 *                                                            the service constructor.
 */
const fastHTML = middlewareCreator((
  file,
  ignoredRoutes,
  htmlGeneratorServiceName = 'htmlGenerator'
) => (app) => new FastHTML(
  app.get('sendFile'),
  file,
  ignoredRoutes,
  app.try(htmlGeneratorServiceName)
).middleware());

module.exports = {
  FastHTML,
  fastHTML,
};
